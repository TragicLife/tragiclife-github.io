{"meta":{"title":"薛鸿杰的博客","subtitle":null,"description":null,"author":"薛鸿杰","url":"https://tragiclife.github.io"},"pages":[{"title":"","date":"2018-12-05T14:13:25.229Z","updated":"2018-12-05T14:13:25.229Z","comments":false,"path":"categories/index.html","permalink":"https://tragiclife.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-02T07:00:58.836Z","updated":"2018-12-02T07:00:58.836Z","comments":false,"path":"tags/index.html","permalink":"https://tragiclife.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"css揭秘","slug":"front-end/css/css-reveal-secrets","date":"2018-12-10T00:04:00.000Z","updated":"2018-12-09T16:16:47.180Z","comments":true,"path":"2018/12/10/front-end/css/css-reveal-secrets/","link":"","permalink":"https://tragiclife.github.io/2018/12/10/front-end/css/css-reveal-secrets/","excerpt":"","text":"实用效果使用box-shadow制作假边框，第四个值为增大或者减小投影面积(box-shadow范围内不会触发事件)box-shadow: 0 0 0 10px #655, 0 0 0 15px deeppink;box-shadow 是层层叠加的，第一层投影位于最顶层，依次类推。因此，你需要按此规律调整扩张半径。比如说，在前面的代码中，我们想在外圈再加一道 5px 的外框，那就需要指定扩张半径的值为15px （ 10px+5px ），会随着border-radius贴合border outline不触发事件，不随border-radius而贴合border background-origin通过backgroun-origin改变background-position的基准位置 reapting-linear-gradientlinear-gradient的扩展 利用linear-gradient实现网格background: white;background-image: linear-gradient(90deg, rgba(200,0,0,.5) 50%, transparent 0), linear-gradient( rgba(200,0,0,.5) 50%, transparent 0);background-size: 30px 30px; 形状自适应的椭圆(元素为正方形时展示圆形)border-radius: 50% / 50%;可简写为border-radius: 50%; 切角效果 .corner-cutting{display: inline-block;width:100px; height: 100px;line-height: 100px;background: linear-gradient(135deg, transparent 15px, #58a 0) top left, linear-gradient(-135deg, transparent 15px, #58a 0) top right, linear-gradient(-45deg, transparent 15px, #58a 0) bottom right,linear-gradient(45deg, transparent 15px, #58a 0) bottom left;background-size: 50% 50%;background-repeat: no-repeat;text-align: center;}.clip-path{clip-path:polygon(20px 0, calc(100% - 20px) 0, 100% 20px,100% calc(100% - 20px), calc(100% - 20px) 100%,20px 100%, 0 calc(100% - 20px), 0 20px);} background clip-path12345678910111213.corner-cutting &#123; width: 100px; height: 100px; background: linear-gradient(135deg, transparent 15px, #58a 0) top left, linear-gradient(-135deg, transparent 15px, #58a 0) top right, linear-gradient(-45deg, transparent 15px, #58a 0) bottom right, linear-gradient(45deg, transparent 15px, #58a 0) bottom left; background-size: 50% 50%; background-repeat: no-repeat;&#125;// 或者使用clip-pathclip-path:polygon(20px 0, calc(100% - 20px) 0, 100% 20px,100% calc(100% - 20px), calc(100% - 20px) 100%,20px 100%, 0 calc(100% - 20px), 0 20px);制作单边倾斜的梯形12transform: perspective(.5em) rotateX(5deg);transform-origin: bottom left;投影单边投影box-shadow: 0 5px 4px -4px black;邻边投影box-shadow: 3px 3px 6px -3px black;两侧投影box-shadow: 5px 0 5px -5px black, -5px 0 5px -5px black;滤镜filter: bulr(1px) grayscale() drop-shadow(3px 3px 6px black;)blur 元素模糊drop-shadow 类似于box-shadow设置缩进tab-size: 2;空心字效果text-shadow: 1px 1px black, -1px -1px black, 1px -1px black, -1px 1px black;或text-shadow: 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black;使用text-shadow实现文字模糊效果color: transparent;text-shadow: 0 0 .1em white, 0 0 .3em white;利用svg实现环形文字效果circular reasoning works because 用户体验使用合适的cursor增大可点击范围border: 10px solid transparent;background-clip: padding-box;需要边框时增加box-shadow: 0 0 0 1px rgba(0,0,0,.3) inset; 水平居中行内元素：对其父元素设置text-align:center;块级元素：对其自身设置margin:0 auto; 实现水平垂直居中position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);margin: 50% auto 0;transform: translateY(-50%);(只适用于全屏居中)父元素设置display:flex;min-height:100vh;margin:0;子元素设置margin:auto; 小球回弹动画@keyframes bounce { 60%, 80%, to { transform: translateY(400px); animation-timing-function: ease; } 70% { transform: translateY(300px); } 90% { transform: translateY(360px); }}.ball {animation: bounce 3s cubic-bezier(.1,.25,1,.25);} 利用steps对png背景做切换animation: loader 1s infinite steps(8);@keyframes loader {to { background-position: -800px 0; }} 实现闪烁效果.highlight {animation: .5s blink-smooth 6 alternate;}@keyframes blink-smooth { to { color: transparent } } 背景图片来回播放@keyframes panoramic {to { background-position: 100% 0; }}.panoramic { width: 150px; height: 150px; background: url(“img/naxos-greece.jpg”); background-size: auto 100%; animation: panoramic 10s linear infinite alternate; animation-play-state: paused;}.panoramic:hover, .panoramic:focus { animation-play-state: running;} 利用translate实现transform-origin的效果transform: rotate(30deg);transform-origin: 200px 300px;上面两行等同于下面两行transform: translate(200px, 300px) rotate(30deg) translate(-200px, -300px);transform-origin: 0 0;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"}]},{"title":"日常小记-样式","slug":"front-end/css/daily-notes","date":"2018-12-09T00:12:08.000Z","updated":"2018-12-08T16:28:27.303Z","comments":true,"path":"2018/12/09/front-end/css/daily-notes/","link":"","permalink":"https://tragiclife.github.io/2018/12/09/front-end/css/daily-notes/","excerpt":"","text":"命名规范BEM(block element modifier) 记录的知识点浏览器html默认字体大小为16px，设置font-size为62.5%后可换算为10px 常用的屏幕大小手机屏：&lt;768pad屏：≥768显示器：≥992大屏显示器：≥1200 word-break：break-all设置后火狐下的文字会比较对齐 50vh表示50%的设备高度，50vw表示50%的设备宽度 禁止文本选中user-select:none 链接的伪类:link :visited :hover :active(点击时) ie浏览器的option标签不可改变样式、不触发事件(由select触发) 子元素都为float，则父元素需要设置float才能被撑开 bsckground:url() repeat attachment position/size origin clip 使用inline-block边距会多出4个像素，可通过font-size:0去除 文字要超过一行text-align:justify才会生效 textarea添加spellcheck＝”false”去除检查 display:inline-block的元素可以通过vertical-align:middle实现居中 resize属性可以设置文本框的拖动，其overflow需要设置为overflow/auto/scroll 制作梯形transform: perspective(20px) rotateX(-1deg ) rotateY(-2deg) translateZ(0) 实现模糊效果(支持IOS)backdrop-filter:blur(10px); matrix(a,b,c,d,e,f)e和f相当于translatea和d相当于scaleb和c相当于rotate 使滚动变流畅-webkit-overflow-scrolling: touch; -webkit-overflow-scrolling产生的问题滚动中scrollTop不会变化、不触发scroll事件，只在停下来的时候触发手势可穿过其它元素触发元素滚动滚动时暂停其它transition有时会卡住不动，浏览器容器回弹停止后才可滑动 文本渐变h2[data-text] { position: relative;}h2[data-text]::after { content: attr(data-text); z-index: 10; color: #e3e3e3; position: absolute; top: 0; left: 0; -webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,0)), color-stop(50%, rgba(0,0,0,1)), to(rgba(0,0,0,0)));} 黑白图片img { filter: grayscale(100%);} 优化文本显示.text { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; text-rendering: optimizeLegibility;} 文本模糊.text{ text-shadow: 0 0 5px rgba(0, 0, 0, .5)} 表格单元格等宽.table { table-layout: fixed;} 多行省略号display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 2; // 显示的行数overflow: hidden;text-overflow: ellipsis; 伸缩盒子元素的宽度没有超过父元素宽度或没有设置flex-wrap: wrap时，align-content不生效 GPU硬件加速1、设置will-change:transform进行硬件加速，还需要设置trsnsform:translateZ(0)进行hack2、transform: translate3d(0, 0, 0) 避免隐式合成保持动画的对象的z-index尽可能的高。理想的，这些元素应该是body元素的直接子元素。当然，这不是总可能的。所以你可以克隆一个元素，把它放在body元素下仅仅是为了做动画。将元素上设置will-change CSS属性，元素上有了这个属性，浏览器会提升这个元素成为一个复合层（不是总是）。这样动画就可以平滑的开始和结束。但是不要滥用这个属性，否则会大大增加内存消耗。 动画优化减少浏览器的重排和重绘的发生。不要使用table布局。css动画中尽量只使用transform和opacity，这不会发生重排和重绘。尽可能地只使用css做动画。避免浏览器的隐式合成。改变复合层的尺寸。(使用小图片，通过scale放大) 只有块级元素或者行内块元素transform属性才回生效 scroll-behavior: smooth使用锚点切换时平滑滚动 实现左右300px，中间自适应布局1、float(优：兼容性好；缺：需要清除浮动)2、position:absolute(优：布局快；缺：兄弟元素都需要脱离文档流处理，可使用性差)3、flex(比较完美)4、table、table-cell(易处理；其中一个单元格高度增长时，其余也会跟着增长)5、grid background的设置顺序background:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit; :last-child匹配父元素的最后一个元素 position:fixed宽高受父级元素影响问题如果父级元素使用了transform，则其position为fixed的子元素设置的宽高受父元素影响 touch-actionhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-actionhttps://www.zhangxinxu.com/wordpress/2018/07/chrome-safari-touchmove-preventdefault-treated-as-passive/ 移动端设置cursor: pointer时，点击元素会有背景色设置元素*{-webkit-tap-highlight-color: transparent; } 图片上下排列3px间隔的消除方法给居上的图片加vertical-align: top给居上的图片加display: block设置font-size: 0","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"}]},{"title":"屏幕适配","slug":"front-end/css/screen-adaptation","date":"2018-12-08T00:34:18.000Z","updated":"2018-12-07T17:12:18.000Z","comments":true,"path":"2018/12/08/front-end/css/screen-adaptation/","link":"","permalink":"https://tragiclife.github.io/2018/12/08/front-end/css/screen-adaptation/","excerpt":"","text":"常见移动web适配方法PC960px/1000px居中盒子模型，定高，定宽display:inline-block 移动web:定高，宽度百分比flexMedia Query(媒体查询) Media Query1234@media 媒体类型 and (媒体特性)如: @media screen and (max-width:320px)可在标签上引用&lt;link href=&quot;&quot; media=&quot;screen and (max-width:320px)&quot;/&gt; rem原理和简介字体单位值根据html根元素大小而定，同样可以作为宽度、高度等单位适配原理将px替换成rem，动态修改html的font-size适配兼容性IOS6以上、Android2.1以上 js动态修改font-sizelet htmlWidth = document.docElement.clientWidth || document.body.clientWidthlet $html = document.querySelector(‘html’)$html.style.fontSize = htmWidth / 3.75 + ‘px’","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"},{"name":"rem","slug":"rem","permalink":"https://tragiclife.github.io/tags/rem/"}]},{"title":"深入overflow","slug":"front-end/css/deep-into-overflow","date":"2018-12-07T22:28:51.000Z","updated":"2018-12-07T17:15:17.841Z","comments":true,"path":"2018/12/08/front-end/css/deep-into-overflow/","link":"","permalink":"https://tragiclife.github.io/2018/12/08/front-end/css/deep-into-overflow/","excerpt":"","text":"相关问题 overfloe-x、overflow-y(IE8+)如果overflow-x与overflow-y相同，则等同于overflow；如果两个设置不同，切其中一个设置为visible则visible会被重置为auto 表格元素无效，需要先设置table-layout:fixed overflow:auto时，chrome下能显示padding-bottom，而其他浏览器都不显示padding-bottom 无论什么浏览器，默认滚动条都来自html标签，而不是body标签 获取滚动高度12chrome:document.body.scrollTop其他浏览器:document.documentElement.scrollTop 滚动条的宽度等于外部容器减去内部元素的clientWidth 出现滚动条时，修复水平居中的元素跳动问题 设置html{overflow-y:scroll} container{padding-left:calc(100vw - 100%)}，既设置滚动条的宽度，适用于IE9+及其他浏览器 格式化上下文1overflow:auto/scroll/hidden 作用 清除浮动影响overflow:hidden;_zoom:1; 避免margin穿透问题 两栏自适应布局 BFC属性12345678910111213// 自适应，但溢出不可见，限制了应用场景overflow:hidden// 包裹性+破坏性，无法自适应，块状浮动布局float+floatposition:absolute // 包裹性，无法自适应，IE6、7不识别display:inline-block// 包裹性，无溢出特性，绝对宽度也能自适应display:table-cell 两栏自适应布局display:table-cell;width:2000px;//IE8+ BFC特性display:inline-block;width:auto;//IE7- 伪BFC特性 元素的父元素没有设置position:absolute/relative/fixed时，父元素的overflow无法包裹住position:absolute的子元素12345678910111213让overflow起作用例子：// 父元素设置overflow:hidden;position:relative// 子元素设置position:absolutediv overflow:hidden div display:relative div position:absolutediv overflow:hidden div transform:translate(0) overflow失效妙用123456// 父元素height:0;overflow:hidden;text-align:right;// 子元素position:absolute resize拉伸(horizontal、vertical、both)元素的overflow不能是visible 文字溢出出省略号123456789101112// 单行省略width:100px;white-space:nowrap;text-overflow:ellipisis;overflow:hidden;// 多行省略号display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 2; // 显示的行数overflow: hidden;text-overflow: ellipsis; IE7下，当宽度或高度设置为100%时，会出现滚动条IE7解决文字越多，padding越大问题，设置overflow:visible 锚点定位锚点定位的触发url地址中的锚链与锚点元素可focus的锚点元素处于focus态 作用快速定位选项卡技术 应用场景单页应用","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"}]},{"title":"深入float","slug":"front-end/css/deep-into-float","date":"2018-12-06T21:39:30.000Z","updated":"2018-12-06T14:59:32.900Z","comments":true,"path":"2018/12/07/front-end/css/deep-into-float/","link":"","permalink":"https://tragiclife.github.io/2018/12/07/front-end/css/deep-into-float/","excerpt":"","text":"设置初衷为了文字的环绕float元素会产生BFC(块级格式化上下文，block formatting context) 特性 包裹具有包裹性的相关属性 123display:inline-block/table-cellposition:absolute/fixed/stickyoverflow:hidden/scroll 破坏(父元素塌陷)具有破坏性的相关属性 12display:noneposition:absolute/fixed/sticky 能形成BFC的样式12345float:left/rightposition:absolute/fixedoverflow:hidden/scroll(IE7+)display:inline-block/table-cell(IE8+)width/height/zoom:1...(IE6/IE7) 清除浮动(较佳使用)123.clearfix:after&#123;content:&apos;&apos;;display:table;clear:both;&#125;.clesrfix&#123;*zoom:1;&#125; //IE6、7应用于包含浮动元素的父元素上 浮动与两侧皆适应的流体布局display:table-cell;display:inline-block;width:2000px;width:auto","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"}]},{"title":"深入border","slug":"front-end/css/deep-into-border","date":"2018-12-05T23:16:00.000Z","updated":"2018-12-06T13:13:36.670Z","comments":true,"path":"2018/12/06/front-end/css/deep-into-border/","link":"","permalink":"https://tragiclife.github.io/2018/12/06/front-end/css/deep-into-border/","excerpt":"","text":"border-style为dashed时，不同浏览器下实线和空白区域的比例不同 dotted形状不同 当border-color没有指定颜色时，默认使用color作为边框颜色，类似的还有box-shadow,text-shadow ，outline 让背景图固定距离右侧50pxborder-right:50px solid transparentbackground-position:100% 40px 投影(元素不可见时该属性也是不可见的)filter:drop-shadow(20px 0 #ff8040)","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"}]},{"title":"深入padding","slug":"front-end/css/deep-into-padding","date":"2018-12-04T21:37:28.000Z","updated":"2018-12-05T16:28:53.637Z","comments":true,"path":"2018/12/05/front-end/css/deep-into-padding/","link":"","permalink":"https://tragiclife.github.io/2018/12/05/front-end/css/deep-into-padding/","excerpt":"","text":"padding是否生效对于block水平元素 padding值过大，一定会影响尺寸 width非auto，padding一定影响尺寸 width为auto或box-sizing为border-box，同时padding值没有过大，不影响尺寸 对于inline水平元素水平padding影响尺寸，垂直padding不影响尺寸，但是会影响背景色(占据空间) 支持的属性值 不支持负值 百分比根据宽度计算(如果设置50%则为一个正方形) inline元素的padding：同样相对于宽度计算，默认的宽度高度细节有差异，padding会断行 inline元素的垂直padding会让让空白节点显现，既规范中的strut，可以通过font-size:0去除 ol/ul标签内置padding-left是以px为单位的，如果字号很小，间距就会很开；如果字号很大，就会跑到容器外面input、textarea、button都有内置padding在firefox下设置button的padding为0时依然有padding值，通过设置button::-moz-focus-inner{padding:0}。IE7下文字越多，button的padding值越大，通过设置button{overflow:visiable;}去除。可访问性隐藏：将元素设置absolute，定位到看不见的地方，或者设置z-index为-1隐藏在背景之下。可通过使用label来代替button12&lt;button id＝&quot;btn&quot;&gt;&lt;/button&gt;&lt;label for＝&quot;btn&quot;&gt;&lt;/label&gt; 通过background-clip:content-box与padding结合，实现border与内容区域之间空白的效果 如何得到一个正方形.square-container{width: 50px;height: 50px;}.square {width: 100%;padding-top: 100%;background-color: blue;} 123456789101112.square-container&#123; width: 50px; height: 50px;&#125;.square &#123; width: 100%; padding-top: 100%; background-color: blue;&#125;&lt;div class=&quot;square-container&quot;&gt; &lt;div class=&quot;square&quot;&gt;&lt;/div&gt;&lt;/div&gt;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"}]},{"title":"深入margin","slug":"front-end/css/deep-into-margin","date":"2018-12-03T22:42:01.000Z","updated":"2018-12-05T15:14:35.578Z","comments":true,"path":"2018/12/04/front-end/css/deep-into-margin/","link":"","permalink":"https://tragiclife.github.io/2018/12/04/front-end/css/deep-into-margin/","excerpt":"","text":"设置元素的外边距，允许使用负值，适用于没有设置宽高的普通block元素，既非float、absolute/fixed、inline、table-cell元素。 设置方式1234567891011// 设置一个值，相当于四个方向的外边距都为10pxmargin: 10px;// 设置两个值，相当于设置上下、左右的外边距，即上下为10px，左右为5pxmargin: 10px 5px;// 设置三个值，相当于设置上、左右、下的外边距，即上为10px，左右为5px，下为1pxmargin: 10px 5px 1px;// 设置四个值，相当于设置上、右、下、左的外边距，即上为10px，右为5px，下为2px，左为1pxmargin: 10px 5px 2px 1px; 特性 可以改变元素尺寸 适用于没有设置宽高的普通block元素，既非float、absolute/fixed、inline、table-cell元素。 如何计算普通元素的百分比margin都是相对于容器的宽度计算的绝对定位元素的百分比margin是相对于第一个定位祖先元素（relative、absolute、fixed）的宽度计算的。 margin重叠margin重叠特性只对block元素(除float和absolute)起作用，只发生在垂直方向上(writing-mode设置可变为水平方向) 重叠的三种情境 相邻的兄弟元素 父级元素和第一个或最后一个子元素 空的block元素正正取大值，正负值相加，负负最负值 实现水平垂直居中12345678// 元素宽高固定position:absolute;top: 50%;left: 50%;margin-top: -50px;margin-left: -100px;width: 100px;height: 200px; 负值的应用场景1234567891011121314// margin负值下的两端对齐ul &#123; margin-right:-20px;&#125;li &#123; margin-right:20px;&#125;// margin负值下的等高布局div &#123; margin-bottom:-600px; padding-bottom:600px;&#125;// margin负值下的两栏自适应布局 margin失效情形 inline水平元素的垂直margin无效 margin重叠 display:table-cell等 position:absolute;当其父元素设置为relative时会生效 前一个元素float以后，后一个元素的margin-left要大于前一个元素的宽度时才会生效 内联特性导致无效 新属性值123456789101112// (一开始相当于margin-left):文档流开始的方向leftmargin-start// 相当于margin-topmargin-before// 相当于margin-bottommargin-after// 重叠效果margin-collapse可选值：collapse(默认重叠) | discard(取消margin效果) | separate(不重叠)","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://tragiclife.github.io/tags/css/"}]}]}