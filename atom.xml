<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薛鸿杰的博客</title>
  <icon>https://www.gravatar.com/avatar/4f853191bd7c2a6954041f3c64c97642</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tragiclife.github.io/"/>
  <updated>2018-12-18T16:16:02.134Z</updated>
  <id>https://tragiclife.github.io/</id>
  
  <author>
    <name>薛鸿杰</name>
    <email>xuehongjiej@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>错误捕获</title>
    <link href="https://tragiclife.github.io/2018/12/19/front-end/js/error-catch/"/>
    <id>https://tragiclife.github.io/2018/12/19/front-end/js/error-catch/</id>
    <published>2018-12-18T23:37:38.000Z</published>
    <updated>2018-12-18T16:16:02.134Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Vue中的错误捕获"><a href="#Vue中的错误捕获" class="headerlink" title="Vue中的错误捕获"></a>Vue中的错误捕获</h4><p><a href="https://www.cnblogs.com/luozhihao/p/8635507.html" target="_blank" rel="noopener">例子</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 2.2.0+支持，2.4.0+支持自定义事件的捕获</span><br><span class="line">Vue.config.errorHandler = (err, vm, info) =&gt; &#123;</span><br><span class="line">  let &#123;</span><br><span class="line">    message, // 异常信息</span><br><span class="line">    name, // 异常名称</span><br><span class="line">    script,  // 异常脚本url</span><br><span class="line">    line,  // 异常行号</span><br><span class="line">    column,  // 异常列号</span><br><span class="line">    stack  // 异常堆栈信息</span><br><span class="line">  &#125; = err;</span><br><span class="line">  // info 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a>window.onerror</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">window.onerror = (errorMessage, scriptURI, lineNo, columnNo, error) =&gt; &#123;</span><br><span class="line">  console.log(&apos;errorMessage: &apos; + errorMessage); // 异常信息</span><br><span class="line">  console.log(&apos;scriptURI: &apos; + scriptURI); // 异常文件路径</span><br><span class="line">  console.log(&apos;lineNo: &apos; + lineNo); // 异常行号</span><br><span class="line">  console.log(&apos;columnNo: &apos; + columnNo); // 异常列号</span><br><span class="line">  console.log(&apos;error: &apos; + error); // 异常堆栈信息</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="window-addEventListener-‘error’"><a href="#window-addEventListener-‘error’" class="headerlink" title="window.addEventListener(‘error’)"></a>window.addEventListener(‘error’)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;error&apos;, (err) =&gt; &#123;</span><br><span class="line">  console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Vue中的错误捕获&quot;&gt;&lt;a href=&quot;#Vue中的错误捕获&quot; class=&quot;headerlink&quot; title=&quot;Vue中的错误捕获&quot;&gt;&lt;/a&gt;Vue中的错误捕获&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/luozhihao
      
    
    </summary>
    
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="error" scheme="https://tragiclife.github.io/tags/error/"/>
    
      <category term="vue" scheme="https://tragiclife.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Canvas</title>
    <link href="https://tragiclife.github.io/2018/12/17/front-end/js/canvas/"/>
    <id>https://tragiclife.github.io/2018/12/17/front-end/js/canvas/</id>
    <published>2018-12-16T23:39:44.000Z</published>
    <updated>2018-12-16T15:46:42.252Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/charmingyj/p/5527223.html" target="_blank" rel="noopener">https://www.cnblogs.com/charmingyj/p/5527223.html</a></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>// 创建canvas对象<br>var ctx = $(“#canvas”)[0].getContext(‘2d’);<br>var ctx2 = $(“#canvas2”)[0].getContext(‘2d’);</p><p>// 设置线条颜色<br>ctx.strokeStyle = ‘#00f’;</p><p>// 设置填充颜色<br>ctx.fillStyle = ‘#f00’;<br>//fillRect(x, y, width, height)</p><p>// 绘制有颜色填充的矩形,参数：起始坐标<br>ctx.fillRect(0,0,100,50);<br>//strokeRect(x, y, width, height)</p><p>// 绘制无填充色的矩形<br>ctx.strokeRect(150,0,100,50);</p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p>// 设置字体大小和字体<br>ctx.font = ‘30px Arial’;<br>ctx.cont = ‘italic 30px serif’; // 斜体</p><p>// 绘制实心文字<br>ctx.fillText(‘Canvas’,150,25);</p><p>// 绘制空心文字<br>ctx.strokeText(‘Canvas’,0,25);</p><p>// 设置颜色渐变<br>var grd = ctx.createLinearGradient(0,0,100,0); //参数：起始坐标(x0,y0),终止坐标(x1,y1)<br>grd.addColorStop(0,’blue’); //指定停止颜色,值为0-1<br>grd.addColorStop(0.5,’white’);<br>grd.addColorStop(1,’red’);<br>ctx.fillStyle = grd;<br>ctx.fillRect(0,50,100,50);</p><p>//clearRect(x, y, width, height)<br>ctx.clearRect(0,30,10,10); //清空矩形区域的内容,参数：x坐标,y坐标,宽度,高度</p><h4 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h4><p>//moveTo(x, y)<br>// 定义线条开始的坐标<br>ctx2.moveTo(0,0);<br>//lineTo(x, y)</p><p>// 定义线条结束的坐标<br>ctx2.lineTo(200,100);</p><p>// 绘制线条，或者使用fill<br>ctx2.stroke();</p><h4 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h4><p>// 重新生成一条路径<br>ctx2.beginPath();<br>//arc(x, y, radius, startAngle, endAngle, anticlockwise)</p><p>// 绘制圆形，参数：x坐标，y坐标，圆的半径，起始角度，终止角度;anticlockwise：false为顺时针，true为逆时针(默认为false)<br>ctx2.arc(100,50,30,0,Math.PI * 2,false);<br>ctx2.stroke();</p><h4 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h4><p>ctx2.beginPath();<br>ctx2.moveTo(25,50);<br>ctx2.arc(25,50,25,0,Math.PI * 0.5,false); //参数：x坐标，y坐标，半径，起始角度(圆的正右方开始)，终止角度，是否逆时针(false为顺时针，true为逆时针)<br>ctx2.lineTo(25,50)<br>ctx2.stroke();</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/charmingyj/p/5527223.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/charmingyj/p/5527223.h
      
    
    </summary>
    
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="canvas" scheme="https://tragiclife.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>对象</title>
    <link href="https://tragiclife.github.io/2018/12/17/front-end/js/object/"/>
    <id>https://tragiclife.github.io/2018/12/17/front-end/js/object/</id>
    <published>2018-12-16T23:28:19.000Z</published>
    <updated>2018-12-18T16:16:10.903Z</updated>
    
    <content type="html"><![CDATA[<p><strong>判断是不是数组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(typeof Array.isArray===&quot;undefined&quot;)&#123;</span><br><span class="line">   Array.isArray = function(arg)&#123;</span><br><span class="line">         return Object.prototype.toString.call(arg)===&quot;[object Array]&quot;</span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>vue框架核心方法defineProperty(defineProperties)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">writable、value和set、get不能同时存在</span><br><span class="line">Object.defineProperty(obj, prop, &#123;</span><br><span class="line">  configurable: false, //是否可以通过delete删除，能否修改属性的特性。直白点：是否可配置</span><br><span class="line">  enumerable: false, //枚举性，表示是否可以通过for-in循环返回</span><br><span class="line">  writable: false, //可写性：是否可以修改属性的值</span><br><span class="line">  value: undefined, //包含属性的值，也就是对应的可读性。</span><br><span class="line">  set: undefined,</span><br><span class="line">  get: undefined</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>对象拷贝</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">浅拷贝</span><br><span class="line">1. Object.assign(obj)</span><br><span class="line">2. 扩展运算符(...) &#123;...obj&#125;</span><br><span class="line">3. let obj = Object.defineProperties(&#123;&#125;, Object.getOwnPropertyDescriptors(copyObj))</span><br><span class="line"></span><br><span class="line">深拷贝</span><br><span class="line">1. JSON.parse(JSON.stringify(obj))</span><br><span class="line">  局限性</span><br><span class="line">    会忽略 undefined</span><br><span class="line">    不能序列化函数</span><br><span class="line">    不能解决循环引用的对象</span><br><span class="line">2. MessageChannel，不支持包含函数的对象，异步，支持Android4.4+</span><br><span class="line">function deepCopy(obj) &#123;</span><br><span class="line">  return new Promise(resolve =&gt; &#123;</span><br><span class="line">    const &#123;port1, port2&#125; = new MessageChannel();</span><br><span class="line">    port2.onmessage = ev =&gt; resolve(ev.data);</span><br><span class="line">    port1.postMessage(obj);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>new的过程</strong></p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋值给新对象</li><li>执行构造函数的代码</li><li>返回新的对象</li></ol><p><strong>原型链的顶层是什么</strong></p><p>null</p><p><strong>禁止扩展方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 禁止对象扩展，可修改已有的值，可以通过defineProperty重新定义已有属性</span><br><span class="line">Object.preventExtensions(obj); </span><br><span class="line"></span><br><span class="line">// 判断对象是否可扩展</span><br><span class="line">Object.isExtensible(obj);</span><br><span class="line"></span><br><span class="line">// 禁止对象扩展，可修改已有的值，不可以通过defineProperty重新定义已有属性</span><br><span class="line">Object.seal(obj)</span><br><span class="line"></span><br><span class="line">// 判断对象是否密封</span><br><span class="line">Objct.isSealed(obj);</span><br><span class="line"></span><br><span class="line">// 冻结对象，返回冻结的对象，不能做任何操作，只能读取</span><br><span class="line">Object.freeze(obj)</span><br><span class="line"></span><br><span class="line">// 判断对象是否冻结</span><br><span class="line">Object.isFrozen(obj)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>函数</th><th>对象已设置为不可扩展的</th><th>为每个属性将configurable设置为false</th><th>为每个属性将writable设置为false</th></tr></thead><tbody><tr><td>Object.preventExtensions</td><td>是</td><td>否</td><td>否</td></tr><tr><td>Object.seal</td><td>是</td><td>是</td><td>否</td></tr><tr><td>Object.seal</td><td>是</td><td>是</td><td>是</td></tr></tbody></table><table><thead><tr><th>函数</th><th>对象是否可扩展</th><th>为每个属性将configurable设置为false</th><th>为每个属性将writable设置为false</th></tr></thead><tbody><tr><td>Object.preventExtensions</td><td>是</td><td>否</td><td>否</td></tr><tr><td>Object.seal</td><td>否</td><td>是</td><td>是</td></tr><tr><td>Object.seal</td><td>否</td><td>是</td><td>是</td></tr></tbody></table><p><strong>Object.create(null)、new Object()、{}的区别</strong></p><p>Object.create(null)创建的对象没有继承Object的属性和方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;判断是不是数组&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="Object" scheme="https://tragiclife.github.io/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>事件</title>
    <link href="https://tragiclife.github.io/2018/12/16/front-end/js/event/"/>
    <id>https://tragiclife.github.io/2018/12/16/front-end/js/event/</id>
    <published>2018-12-15T23:17:49.000Z</published>
    <updated>2018-12-18T16:21:52.326Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事件的绑定与解绑"><a href="#事件的绑定与解绑" class="headerlink" title="事件的绑定与解绑"></a>事件的绑定与解绑</h4><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(type, fn, useCapture/options)</span><br><span class="line">options可传值：</span><br><span class="line">passive: false 是否阻止默认事件；如果设置为true，则即使在触发的函数中使用e.preventDefault也不会生效</span><br><span class="line">capture: false 触发阶段；true为捕获时触发，false为冒泡时触发</span><br><span class="line">once: 只执行一次</span><br><span class="line"></span><br><span class="line">attachEvent</span><br></pre></td></tr></table></figure><h5 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">removeEventListener(type, fn, useCapture/options)</span><br><span class="line">options可传值：</span><br><span class="line">passive: false 是否阻止默认事件；如果设置为true，则即使在触发的函数中使用e.preventDefault也不会生效</span><br><span class="line">capture: false 触发阶段；true为捕获时触发，false为冒泡时触发</span><br><span class="line">once: 只执行一次</span><br></pre></td></tr></table></figure><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用handleEvent</span><br><span class="line">var tap = &#123;</span><br><span class="line">  handleEvent: function(e) &#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">  &#125;,</span><br><span class="line">  name:&apos;tap&apos;</span><br><span class="line">&#125;;</span><br><span class="line">document.querySelector(&apos;.wea_mod&apos;).addEventListener(&apos;click&apos;, tap, false);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用CustomEvent</span><br><span class="line">var tap2 = document.querySelector(&apos;.wea_mod&apos;);</span><br><span class="line">tap2.addEventListener(&apos;tap&apos;, function(e)&#123;</span><br><span class="line">  console.log(&apos;custom &apos; + e.detail);</span><br><span class="line">&#125;, false);</span><br><span class="line">var evt = new window.CustomEvent(&apos;tap&apos;, &#123;</span><br><span class="line">  bubbles: true, // 如果为 true，事件将冒泡到触发事件的元素的祖先</span><br><span class="line">  cancelable: true, // 如果为 true，可以使用事件对象的 stopPropagation() 方法取消事件传播。</span><br><span class="line">  detail: &#123;&#125; // 细节参数、自定义参数</span><br><span class="line">&#125;);</span><br><span class="line">tap2.dispatchEvent(evt); // 触发自定义事件，返回一个布尔值，判断是否阻止默认事件，false为阻止默认事件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用new Event(不能使用自定义参数detail)</span><br><span class="line">var btn = document.querySelector(&apos;.wea_mod&apos;);</span><br><span class="line">var ev = new Event(&apos;test&apos;, &#123;</span><br><span class="line">    bubbles: &apos;true&apos;,</span><br><span class="line">    cancelable: &apos;true&apos;</span><br><span class="line">&#125;);</span><br><span class="line">btn.addEventListener(&apos;test&apos;, function (event) &#123;</span><br><span class="line">    console.log(event.bubbles);</span><br><span class="line">    console.log(event.cancelable);</span><br><span class="line">    console.log(event.detail);</span><br><span class="line">&#125;, false);</span><br><span class="line">btn.dispatchEvent(ev);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用createEvent</span><br><span class="line">let evt = document.createEvent(&quot;HTMLEvents&quot;); // 可传值HTMLEvents、MouseEvents、UIEvents以及CustomEvent(自定义事件)</span><br><span class="line">// 初始化</span><br><span class="line">evt.initEvent(&quot;alert&quot;, false, false); // eventType,canBubble,cancelable</span><br><span class="line">// 触发</span><br><span class="line">week.dispatchEvent(evt);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;事件的绑定与解绑&quot;&gt;&lt;a href=&quot;#事件的绑定与解绑&quot; class=&quot;headerlink&quot; title=&quot;事件的绑定与解绑&quot;&gt;&lt;/a&gt;事件的绑定与解绑&lt;/h4&gt;&lt;h5 id=&quot;事件绑定&quot;&gt;&lt;a href=&quot;#事件绑定&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="Event" scheme="https://tragiclife.github.io/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>移动端屏幕像素</title>
    <link href="https://tragiclife.github.io/2018/12/15/front-end/other/mobile-screen-pixels/"/>
    <id>https://tragiclife.github.io/2018/12/15/front-end/other/mobile-screen-pixels/</id>
    <published>2018-12-14T22:12:06.000Z</published>
    <updated>2018-12-18T16:21:10.062Z</updated>
    
    <content type="html"><![CDATA[<p>Pixel 移动开发像素知识<br>px: css pixels 逻辑像素，浏览器使用的抽象单位<br>dp,pt: device independent pixels 设备无关像素<br>dpr: devicePixelRatio 设备像素缩放比</p><p>计算公式：1px = (dpr)² * dp</p><p>DPI: 打印机每英寸可以喷的墨汁点(印刷行业)<br>PPI: 屏幕每英寸的像素数量，即单位英寸内的像素密度</p><p>计算公式：以iPhone5为例子<br>ppi = √ (1136² + 640²) / 4 = 326ppi (视网膜Retina屏)</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">ldpi</th><th style="text-align:center">mdpi</th><th style="text-align:center">hdpi</th><th style="text-align:center">xhdpi</th></tr></thead><tbody><tr><td style="text-align:center">ppi</td><td style="text-align:center">120</td><td style="text-align:center">160</td><td style="text-align:center">240</td><td style="text-align:center">320</td></tr><tr><td style="text-align:center">默认缩放比</td><td style="text-align:center">0.75</td><td style="text-align:center">1.0</td><td style="text-align:center">1.5</td><td style="text-align:center">2.0</td></tr></tbody></table><p>Retina屏(高清屏): dpr都是大于等于2</p><p>PPI越高，像素数越高，图像越清晰<br>但可视度越低(小)，系统默认设置缩放比越大</p><p>Viewport<br>手机浏览器默认为我们做两件事<br>页面渲染在980px(ios)的viewport(为了排版正确)<br>缩放(排版正确后，再缩放到手机屏幕大小) //这就是网页在手机上，会全屏显示的原因</p><p>visual viewport：度量/视口viewport宽高<br>visual viewport是页面当前显示在屏幕上的部分。用户可以通过滚动来改变他所看到的页面的部分，或者通过缩放来改变visual viewport的大小。<br>// 无法改变，通过缩放scale控制<br>layout viewport: 布局viewport 如图，ios的默认layout viewport为980px<br>// 可以理解为就是body的宽度，在此之上渲染页面</p><p>为什么不适用默认的980px的布局viewport(layout viewport)<br>宽度不可控制，不同系统不同设备的默认值都可能不同<br>页面先在layout viewport全屏渲染css,再通过缩放由visual viewport展示，交互不友好<br>链接不可点<br>有缩放，缩放后又有滚动<br>font-size:40px=PC的12px,不规范，字体设置是另外一门学问了。</p><p>meta标签</p><p><meta name="viewport" content="name=value,name=value"><br>width: 设置布局viewport的特定值(device-width)<br>initial-scale: 设置页面的初始缩放<br>minimum-scale: 最小缩放<br>maximum-scale: 最大缩放<br>user-scalable: 用户能否缩放<br>最常用写法</p><meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no"><p>方案一：根据设备的实际宽度来设计(常用)<br>手机宽320px，拿320px设计<br>方案二：1px=1dp<br>缩放0.5。根据设备的物理像素dp等于抽象像素px来设计。1像素边框和高清图片都不需要额外处理。</p><p>响应式设计<br>媒体类型：<br>screen(屏幕)<br>print(打印机)<br>handheld(手持设备)<br>all(通用)<br>常用媒体查询参数：<br>width(视口宽度)<br>height(视口高度)<br>device-width(设备宽度)<br>device-height(设备高度)<br>orientation(检查设备处于横向(landscape)还是竖屏(portrait))</p><p>移动web页面上的click事件响应都要慢上300ms<br>使用tap事件代替click事件</p><p>自定义tap事件原理：<br>在touchstart、touchend时记录时间、手指位置，在touchend时进行比较，如果手指位置为同一位置(或允许移动一个非常小的位移值)且时间间隔较短(一般认为是200ms)，且过程中未曾触发过touchmove，即可认为出发了手持设备上的”click”，一般称它为”tap”</p><p>tap透传的解决方案<br>使用缓动动画，过渡300ms的延迟<br>中间层dom元素的加入，让中间层接受这个“穿透”事件，稍后隐藏<br>“上下”都使用tap事件，原理上解决tap透传事件(但不可避免原生标签的click事件)<br>改用Fastclick的库</p><p>触摸事件<br>touchstart: 手指触摸屏幕触发(已经有手指放屏幕上不会触发)<br>touchmove: 手指在屏幕华东，连续触发<br>touchend: 手指离开屏幕时触发<br>touchcancel: 系统取消touch时候触发(不常用)</p><p>触摸属性<br>touches: 跟踪触摸操作的touch对象数组<br>targetTouches: 特定事件目标的touch对象数组<br>changeTouches: 上次触摸改变的touch对象数组</p><p>每个touch对象包含属性:<br>clientX: 触摸目标在视口中的x坐标<br>clientY: 触摸目标在视口中的y坐标<br>identifier: 标识触摸的唯一ID<br>pageX: 触摸目标在页面中的x坐标(包含滚动)<br>pageY: 触摸目标在页面中的y坐标(包含滚动)<br>screenX: 触摸目标在屏幕中的x坐标<br>screenY: 触摸目标在屏幕中的y坐标<br>target: 触摸目标的DOM节点</p><p>弹性滚动<br>body层滚动(系统特殊化处理):<br>自带弹性滚动，overflow: hidden失效，GIF和定时器暂停<br>局部滚动:<br>没有弹性滚动，没有惯性滚动，不流畅<br>局部滚动开启弹性滚动(仅支持IOS)<br>-webkit-overflow-scrolling: touch;<br>上拉加载使用scroll事件，而不是touch事件(因为android中会有bug)</p><p>-webkit-overflow-scrolling:touch偶尔卡住或不能滑动的bug<br>在使用该属性的元素上不设置定位或者手动设置定位为static<br>在webkit-overflow-scrolling:touch属性的下一层子元素上，将height加1%或1px。从而主动触发scrollbar。</p><p>-webkit-overflow-scrolling:touch还会导致的bug<br>滚动中 scrollTop 属性不会变化<br>手势可穿过其他元素触发元素滚动<br>滚动时暂停其他 transition</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pixel 移动开发像素知识&lt;br&gt;px: css pixels 逻辑像素，浏览器使用的抽象单位&lt;br&gt;dp,pt: device independent pixels 设备无关像素&lt;br&gt;dpr: devicePixelRatio 设备像素缩放比&lt;/p&gt;
&lt;p&gt;计算公式：
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试记录</title>
    <link href="https://tragiclife.github.io/2018/12/14/front-end/other/interview-record/"/>
    <id>https://tragiclife.github.io/2018/12/14/front-end/other/interview-record/</id>
    <published>2018-12-13T22:23:55.000Z</published>
    <updated>2018-12-18T16:20:49.386Z</updated>
    
    <content type="html"><![CDATA[<h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><p><strong>一个页面上两个div左右铺满整个浏览器，要保证左边的div一直为100px，右边的div跟随浏览器大小变化（比如浏览器为500，右边div为400，浏览器为900，右边div为800），请写出大概的css代码。</strong></p><ol><li><p>使用flex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line">&lt;div class=&apos;box&apos;&gt;&lt;div class=&apos;left&apos;&gt;&lt;/div&gt; &lt;div class=&apos;right&apos;&gt;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">//css</span><br><span class="line">.box &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    align-items: center;</span><br><span class="line">    border: 1px solid #c3c3c3;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    flex-basis：100px;</span><br><span class="line">    -webkit-flex-basis: 100px;</span><br><span class="line">    /* Safari 6.1+ */</span><br><span class="line">    background-color: red;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>浮动布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;left&quot;&gt;Left sidebar&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;Main Content&lt;/div&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">* &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 220px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">#content &#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">    margin-left: 220px;</span><br><span class="line">    /*==等于左边栏宽度==*/</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>请写出一些前端性能优化的方式，越多越好</strong></p><ol><li>减少dom操作</li><li>部署前，图片压缩，代码压缩</li><li>优化js代码结构，减少冗余代码</li><li>减少http请求，合理设置 HTTP缓存</li><li>使用内容分发cdn加速</li><li>静态资源缓存</li><li>图片延迟加载</li></ol><p><strong>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</strong></p><ol><li>浏览器查找域名的 IP 地址</li><li>这一步包括 DNS具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…</li><li>浏览器向 web 服务器发送一个 HTTP 请求</li><li>服务器的永久重定向响应（从<a href="http://example.com到http://www.example.com）" target="_blank" rel="noopener">http://example.com到http://www.example.com）</a></li><li>浏览器跟踪重定向地址</li><li>服务器处理请求</li><li>服务器返回一个 HTTP 响应</li><li>浏览器显示 HTML</li><li>浏览器发送请求获取嵌入在HTML中的资源（如图片、音频、视频、CSS、JS等等）</li><li>浏览器发送异步请求</li></ol><p><strong>请大概描述下页面访问cookie的限制条件</strong></p><ol><li>跨域问题</li><li>设置了HttpOnly</li></ol><p><strong>描述浏览器重绘和回流，哪些方法能够改善由于dom操作产生的回流</strong></p><ol><li><p>直接改变className，如果动态改变样式，则使用cssText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 不好的写法</span><br><span class="line">var left = 1;</span><br><span class="line">var top = 1;</span><br><span class="line">el.style.left = left + &quot;px&quot;;</span><br><span class="line">el.style.top = top + &quot;px&quot;; // 比较好的写法</span><br><span class="line">el.className += &quot; className1&quot;;</span><br><span class="line"></span><br><span class="line">// 比较好的写法</span><br><span class="line">el.style.cssText += &quot;;</span><br><span class="line">left: &quot; + left + &quot;px;</span><br><span class="line">top: &quot; + top + &quot;px;&quot;;</span><br></pre></td></tr></table></figure></li><li><p>让要操作的元素进行”离线处理”，处理完后一起更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a) 使用DocumentFragment进行缓存操作,引发一次回流和重绘；</span><br><span class="line">b) 使用display:none技术，只引发两次回流和重绘；</span><br><span class="line">c) 使用cloneNode(true or false)和replaceChild技术，引发一次回流和重绘</span><br></pre></td></tr></table></figure></li></ol><p><strong>vue生命周期钩子</strong></p><ol><li>beforcreate</li><li>created</li><li>beformount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>actived</li><li>deatived</li><li>beforeDestroy</li><li>destroyed</li></ol><p><strong>js跨域请求的方式，能写几种是几种</strong></p><ol><li>通过jsonp跨域</li><li>通过修改document.domain来跨子域</li><li>使用window.name来进行跨域</li><li>使用HTML5中新引进的window.postMessage方法来跨域传送数据（ie 67 不支持）</li><li>CORS 需要服务器设置header ：Access-Control-Allow-Origin。</li><li>nginx反向代理 这个方法一般很少有人提及，但是他可以不用目标服务器配合，不过需要你搭建一个中转nginx服务器，用于转发请求</li></ol><p><strong>对前端工程化的理解</strong></p><ul><li>开发规范</li><li>模块化开发</li><li>组件化开发</li><li>组件仓库</li><li>性能优化</li><li>项目部署</li><li>开发流程</li><li>开发工具</li></ul><p><strong>js深度复制的方式</strong></p><ol><li>使用jq的$.extend(true, target, obj)</li><li>newobj = Object.create(sourceObj)，// 但是这个是有个问题就是newobj的更改不会影响到 sourceobj但是 sourceobj的更改会影响到newObj</li><li>newobj = JSON.parse(JSON.stringify(sourceObj))</li></ol><p><strong>js设计模式: 总体来说设计模式分为三大类</strong></p><ul><li>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li><li>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li><li>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式</li></ul><p><strong>图片预览</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; onchange=&quot;showPreview(this)&quot; /&gt;</span><br><span class="line">&lt;img id=&quot;portrait&quot; src=&quot;&quot; width=&quot;70&quot; height=&quot;75&quot;&gt;</span><br><span class="line">function showPreview(source) &#123;</span><br><span class="line">  var file = source.files[0];</span><br><span class="line">  if(window.FileReader) &#123;</span><br><span class="line">      var fr = new FileReader();</span><br><span class="line">      fr.onloadend = function(e) &#123;</span><br><span class="line">        document.getElementById(&quot;portrait&quot;).src = e.target.result;</span><br><span class="line">      &#125;;</span><br><span class="line">      fr.readAsDataURL(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>扁平化多维数组</strong></p><ol><li><p>老方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var result = []</span><br><span class="line">function unfold(arr)&#123;</span><br><span class="line">     for(var i=0;i&lt; arr.length;i++)&#123;</span><br><span class="line">      if(typeof arr[i]==&quot;object&quot; &amp;&amp; arr[i].length&gt;1) &#123;</span><br><span class="line">       unfold(arr[i]);</span><br><span class="line">     &#125; else &#123;        </span><br><span class="line">       result.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var arr = [1,3,4,5,[6,[0,1,5],9],[2,5,[1,5]],[5]];</span><br><span class="line">unfold(arr)</span><br></pre></td></tr></table></figure></li><li><p>使用tostring</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var c=[1,3,4,5,[6,[0,1,5],9],[2,5,[1,5]],[5]];</span><br><span class="line">var b = c.toString().split(&apos;,&apos;)</span><br></pre></td></tr></table></figure></li><li><p>使用es6的reduce函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr=[1,3,4,5,[6,[0,1,5],9],[2,5,[1,5]],[5]];</span><br><span class="line">const flatten = arr =&gt; arr.reduce((a, b) =&gt; a.concat(Array.isArray(b) ? flatten(b) : b), []);</span><br><span class="line">var result = flatten(arr)</span><br></pre></td></tr></table></figure></li></ol><p><strong>iframe有那些缺点？</strong></p><ul><li>iframe会阻塞主页面的Onload事件；</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO;</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li><li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。</li></ul><p><strong>数组乱序</strong></p><ol><li><p>方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function shuffle(a) &#123;</span><br><span class="line">    var len = a.length;</span><br><span class="line">    for (var i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        var index = parseInt(Math.random() * (len - i));</span><br><span class="line">        var temp = a[index];</span><br><span class="line">        a[index] = a[len - i - 1];</span><br><span class="line">        a[len - i - 1] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function shuffle(arr)&#123;</span><br><span class="line">  return arr.sort(() =&gt; &#123;</span><br><span class="line">    return Math.random() &gt; 0.5 ? -1:1</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>new Function的写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var message = new Function(&apos;msg&apos;,&apos;alert(msg)&apos;);</span><br></pre></td></tr></table></figure></p><p><strong>原型链顶层</strong></p><ul><li>Object.prototype</li></ul><p><strong>代码题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var test = (function(a)&#123;</span><br><span class="line">  this.a = a * 2; // 立即执行函数的this指向window</span><br><span class="line">  return function(b)&#123;</span><br><span class="line">    return this.a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)((function(a)&#123;</span><br><span class="line">  return a</span><br><span class="line">&#125;)(1,2))</span><br><span class="line"></span><br><span class="line">console.log(test(4)) // 6</span><br></pre></td></tr></table></figure></p><h4 id="明源云"><a href="#明源云" class="headerlink" title="明源云"></a>明源云</h4><p><strong>状态码及其表达的意思</strong></p><ul><li>200   请求成功</li><li>204   请求成功，但没有返回响应实体</li><li>401   当前请求需要用户验证</li><li>403   禁止访问</li><li>404   资源未找到</li><li>408   请求超时</li><li>500   后台程序错误</li></ul><p><strong>防止代码提交冲突的方案</strong></p><p><strong>axios发起请求会有两个的原理，axios跨域处理</strong><br>OPTIONS是预请求，判断其是否能支持跨域</p><p><strong>vuex原理</strong></p><p><strong>svn和git的区别</strong></p><p><strong>使用ES5或者ES6实现单例模式</strong></p><ol><li><p>ES5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var Single = function(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    // 一个标记，用来判断是否已经创建了该类的实例</span><br><span class="line">    this.instance = null;</span><br><span class="line">&#125;</span><br><span class="line">// 提供了一个静态方法，用户可以直接在类上调用</span><br><span class="line">Single.getInstance = function(name)&#123;</span><br><span class="line">    // 没有实例化的时候创建一个该类的实例</span><br><span class="line">    if (!this.instance) &#123;</span><br><span class="line">        this.instance = new Single(name)</span><br><span class="line">    &#125;</span><br><span class="line">    // 已经实例化了，返回第一次实例化对象的引用</span><br><span class="line">    return this.instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ES6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Single &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.instance = null; </span><br><span class="line">    &#125;</span><br><span class="line">    // 构造一个广为人知的接口，供用户对该类进行实例化</span><br><span class="line">    static getInstance(name) &#123;</span><br><span class="line">        if (!this.instance) &#123;</span><br><span class="line">            this.instance = new Single(name);</span><br><span class="line">        &#125;</span><br><span class="line">        return this.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>代码题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var test = function(a, b)&#123;</span><br><span class="line">    alert(b);</span><br><span class="line">    return &#123;</span><br><span class="line">        test: function(c)&#123;</span><br><span class="line">            return test(c, a)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = test(100);a.test(201);a.test(301); // undefined 100 100</span><br><span class="line">var a = test(101).test(201).test(301); // undefined 101 201</span><br><span class="line">var a = test(103).test(203);a.test(303); // undefined 103 203</span><br></pre></td></tr></table></figure></p><p><strong>Promise链式调用其中一个报错，如何让其继续运行</strong><br>在catch中捕获错误</p><p><strong>AMD和CMD的异同</strong></p><blockquote><p>相同点</p></blockquote><p>RequireJS 和 Sea.js 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。</p><blockquote><p>不同点</p></blockquote><ol><li><strong>定位有差异</strong>。RequireJS 想成为浏览器端的模块加载器，同时也想成为 Rhino / Node 等环境的模块加载器。Sea.js 则专注于 Web 浏览器端，同时通过 Node 扩展的方式可以很方便跑在 Node 环境中。</li><li><strong>遵循的规范不同</strong>。RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。Sea.js 更贴近 CommonJS Modules/1.1 和 Node Modules 规范。</li><li><strong>推广理念有差异</strong>。RequireJS 在尝试让第三方类库修改自身来支持 RequireJS，目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。</li><li><strong>对开发调试的支持有差异</strong>。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持。</li><li><strong>插件机制不同</strong>。RequireJS 采取的是在源码中预留接口的形式，插件类型比较单一。Sea.js 采取的是通用事件机制，插件类型更丰富。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CMD 推崇依赖就近，AMD 推崇依赖前置。</span><br><span class="line">//CMD</span><br><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">    var a = require(&apos;./a&apos;)</span><br><span class="line">    a.doSomething()   // 此处略去 100 行</span><br><span class="line">    var b = require(&apos;./b&apos;) // 依赖可以就近书写   </span><br><span class="line">    b.doSomething()   </span><br><span class="line">&#125;)</span><br><span class="line">// AMD 默认推荐的是</span><br><span class="line">define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123;// 依赖必须一开始就写好</span><br><span class="line">    a.doSomething()</span><br><span class="line">    // 此处略去 100 行    </span><br><span class="line">    b.doSomething()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>如何使脱离文档流的元素回到文档流</strong></p><h4 id="旺合盛世"><a href="#旺合盛世" class="headerlink" title="旺合盛世"></a>旺合盛世</h4><p><strong>rem和百分比的优缺点</strong></p><p><strong>iframe的优缺点</strong><br>优点</p><ol><li>iframe能够原封不动的把嵌入的网页展现出来</li><li>如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。</li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。<br>5.重载页面时不需要重载整个页面，只需要重载页面中的一个框架页(减少了数据的传输，增加了网页下载速度)</li></ol><p>缺点</p><ol><li>页面样式调试麻烦，出现多个滚动条；</li><li>浏览器的后退按钮失效；</li><li>过多会增加服务器的HTTP请求；</li><li>小型的移动设备无法完全显示框架；</li><li>产生多个页面，不易管理；</li><li>不容易打印；</li><li>代码复杂，无法被一些搜索引擎解读。</li></ol><h4 id="星斯达"><a href="#星斯达" class="headerlink" title="星斯达"></a>星斯达</h4><p><strong>什么是MVC，MVC的框架又哪些</strong></p><p><strong>如何通过正则匹配协议</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.href.match(/(\w*):\/\//)</span><br><span class="line">[&quot;https://&quot;, &quot;https&quot;, index: 0, input: &quot;https://www.bilibili.com/video/av11314749/&quot;,length: 2]</span><br></pre></td></tr></table></figure></p><p><strong>js实现二分树</strong></p><h4 id="智游人"><a href="#智游人" class="headerlink" title="智游人"></a>智游人</h4><p><strong>vue-router中history和hash模式有什么区别</strong><br>hash模式的话路由地址会带上#，但是浏览器发送给服务端的却实#之前的URL，hash模式的好处是，虽然你是个单页面应用，但你可以刷新当前页。history的话需要服务端配合，如果服务端配置仅仅是找不到路由，就重定向到index.html，那么刷新会跳首页，如果服务端对于匹配不到URL不做配置，那么一般返回404页面</p><p><strong>样式优先级</strong><br>important &gt; 内联样式 &gt; id选择器 &gt; 类选择器、伪类选择器(:hover)、属性选择器 &gt; 伪元素选择器(::before)、标签选择器</p><p><strong>冒泡排序</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function arrSort (arr) &#123;</span><br><span class="line">    var i, j, tmp, len = arr.length - 1;</span><br><span class="line">    for(i = 0; i&lt; len; i++) &#123;</span><br><span class="line">        for(j = 0; j &lt; len - i; j++) &#123;</span><br><span class="line">            if(arr[j] &gt; arr[j + 1]) &#123; // 升序</span><br><span class="line">                tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j + 1];</span><br><span class="line">                arr[j + 1] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="仙人掌"><a href="#仙人掌" class="headerlink" title="仙人掌"></a>仙人掌</h4><p><strong>原型和原型链</strong></p><h4 id="开拍网"><a href="#开拍网" class="headerlink" title="开拍网"></a>开拍网</h4><p><strong>DOM操作方法</strong><br>parent.appendChild(child)           增加子元素<br>parent.removeChild(child)           删除子元素<br>parent.replaceChild(new, old)       替换子元素<br>parent.insertBefore(new, existsDOM) 向已有子节点添加元素<br>element.nextSibling                 返回元素相邻的下一个元素<br>element.previousSibling             返回元素相邻的上一个元素</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;记录&quot;&gt;&lt;a href=&quot;#记录&quot; class=&quot;headerlink&quot; title=&quot;记录&quot;&gt;&lt;/a&gt;记录&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;一个页面上两个div左右铺满整个浏览器，要保证左边的div一直为100px，右边的div跟随浏览器大小变化（比如浏览器为50
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目中遇到的那些事</title>
    <link href="https://tragiclife.github.io/2018/12/13/front-end/other/problems-encountered-in-the-project/"/>
    <id>https://tragiclife.github.io/2018/12/13/front-end/other/problems-encountered-in-the-project/</id>
    <published>2018-12-12T22:03:31.000Z</published>
    <updated>2018-12-14T15:38:31.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p><strong>界面渲染时出现花括号{}</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在挂载vue的标签上使用v-cloak，设置v-cloak属性的样式，vue渲染完后会自动移除该属性</span><br><span class="line">&lt;div class=&quot;app&quot; v-cloak&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">[v-cloak]&#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>使用:style或:class绑定时，key名带中划线(-)问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用引号将该key包裹起来，:style=&#123;&apos;background-color&apos;: &apos;#fff&apos;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>错误捕获</strong></p><blockquote><p>2.2.0+可用, 2.4.0+支持自定义事件的捕获<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler捕获钩子函数的报错信息，只能捕获钩子函数的错</span><br><span class="line">Vue.config.errorHandler = (err, vm, info) =&gt; &#123;</span><br><span class="line">  let &#123;</span><br><span class="line">    message, // 异常信息</span><br><span class="line">    name, // 异常名称</span><br><span class="line">    script,  // 异常脚本url</span><br><span class="line">    line,  // 异常行号</span><br><span class="line">    column,  // 异常列号</span><br><span class="line">    stack  // 异常堆栈信息</span><br><span class="line">  &#125; = err;</span><br><span class="line">  // info 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>使用ref绑定问题</strong></p><p>如果绑定的元素为遍历元素，则生成的refs为数组</p><p><strong>vue-router在history模式下使用子路由刷新报错问题</strong></p><p>修改assetsPublicPath路径，使用绝对路径</p><p><strong>style标签使用scoped的时候无法覆盖子组件样式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方法:</span><br><span class="line">1. 去掉scoped</span><br><span class="line">2. 混用本地和全局样式，即增加一个style标签，不写scoped，进行样式覆</span><br><span class="line">3. 使用深度选择器 /deep/或者&gt;&gt;&gt;，如.a /dep/ .b&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>进入详情页要缓存，从首页进入时要刷新的处理方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">使用keep-alive，在router中定义keeyAlive，在App.vue中</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">js代码：</span><br><span class="line">watch: &#123;</span><br><span class="line">  $route: &#123;</span><br><span class="line">    handler(to, from) &#123;</span><br><span class="line">      if (to.name === &apos;Home&apos;) &#123;</span><br><span class="line">        this.$refs.customerList.clearStatus();</span><br><span class="line">        from.meta.reload = true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  this.loadData();</span><br><span class="line">&#125;,</span><br><span class="line">activated() &#123;</span><br><span class="line">  if (this.$route.meta.reload) &#123;</span><br><span class="line">    this.loadData();</span><br><span class="line">    this.$route.meta.reload = false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>style标签使用scss的@import相对路径问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [&apos;.js&apos;, &apos;.vue&apos;],</span><br><span class="line">  alias: &#123;</span><br><span class="line">    &apos;@&apos;: path.resolve(__dirname, &apos;src&apos;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">引用时，@import &apos;~@/scss/icon.scss&apos;;</span><br></pre></td></tr></table></figure></p><p><strong>Duplicate presence of slot “titleName” found in the same render tree</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用具名插槽slot-scope</span><br><span class="line">&lt;template slot=&quot;titleName&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;order-title&quot;&gt;采购订单&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><p><strong>日期转换问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">日期中不允许有-，需要replace(/-/g, &apos;/&apos;)才可以进行new Date()</span><br><span class="line">日期中不允许有.0，如(2018-09-06 00:00:00.0)，需要replace(/\..*/g,&apos;&apos;)替换处理</span><br></pre></td></tr></table></figure></p><p><strong>滚动暂停问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 将滚动容器从body改为app，设置-webkit-overflow-scrolling:touch，该属性会造成scroll事件只会在滚动停止的时候执行一次</span><br><span class="line">2. 使用滚动插件(如better-scroll)</span><br></pre></td></tr></table></figure></p><p><strong>IOS7伸缩盒兼容性问题</strong></p><p>使用伸缩盒时加webkit前缀，使用box</p><p><strong>IOS9元素运行动画后不显示问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. z-index没有设置或者太小</span><br><span class="line">2. 没有设置animation-fill-mode: forwards</span><br></pre></td></tr></table></figure></p><p><strong>animation-play-state失效问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">添加父容器，在暂停的时候给父容器加transform</span><br><span class="line">let container = this.$refs.musicContainer</span><br><span class="line">let musicT = getComputedStyle(this.$refs.music).transform</span><br><span class="line">let containerT = getComputedStyle(container).transform</span><br><span class="line">let transform = containerT === &apos;none&apos; ? musicT : musicT.concat(&apos; &apos;, containerT)</span><br><span class="line">container.style.transform = transform</span><br><span class="line">container.style.webkitTransform = transform</span><br></pre></td></tr></table></figure></p><p><strong>使用-webkit-overflow-scrolling:touch问题</strong></p><p>如果触发了外层容器的弹性滚动，则该元素短时间内会无法滚动，可以使用better-scroll来实现滚动</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><strong>打开view时界面会有空白问题</strong></p><p>在mounted中使用setTimeout进行font-size的设置</p><p><strong>Android4.3中设置background的大小不生效</strong></p><p>通过background-size设置</p><p><strong>4.3版本的svg无法使用transform</strong></p><p>用div将svg包裹起来，设置div的transform</p><p><strong>兼容低版本css</strong></p><p>带webkit的css要放在后面</p><p><strong>Android4系统touchmove问题</strong></p><p>在touchmove的时候会执行touchcancel事件，导致touchmove只执行一次，需要使用e.preventDefault阻止默认事件才可以执行多次，但是会导致一些默认行为不触发，如scroll</p><p><strong>click事件失效问题</strong></p><p>父元素的touch事件加了preventDefault导致子元素的click事件不触发，修改子元素的click事件为touch事件</p><p><strong>动画由大变小闪动问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给动画元素的父容器加</span><br><span class="line">position: relative;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><strong>new Swiper的问题</strong></p><blockquote><p>在元素隐藏的时候new Swiper，Swiper会有错位问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 设置obserVer和observParents为true</span><br><span class="line">   new Swiper(this.$refs.swiperContainer, &#123;</span><br><span class="line">     observer: true,//修改swiper自己或子元素时，自动初始化swiper</span><br><span class="line">     observeParents: false,//修改swiper的父元素时，自动初始化swiper</span><br><span class="line">   &#125;);</span><br><span class="line">2. 显示的时候手动调用update方法</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>better-scroll内的子元素无法通过overflow滚动</strong></p><blockquote><p>better-scroll的bug</p></blockquote><h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><p><strong>使用animate时，animate动画不运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 获取animate的DOM，调用beginElement方法执行动画</span><br><span class="line">2. animate的dur设置的时间太小(小于25ms)，动画不会执行</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><strong>canvas绘制问题</strong></p><p>绘制前需要设置canvas的宽高</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>使用webstorm时无法自动编译问题</strong></p><p>取消webstorm的自动保存功能</p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><strong>401状态码</strong></p><p>登录token有问题</p><h2 id="好车主APP"><a href="#好车主APP" class="headerlink" title="好车主APP"></a>好车主APP</h2><p><strong>某些机型打开健步行时白屏问题</strong></p><p>绘制圆环canvas的时候没有获取到DOM导致webview奔溃，在$nextTick的时候绘制canvas，后面改成了SVG</p><p><strong>aopsId获取失败</strong></p><p>连续调用了相同的客户端方法，导致前面的被覆盖</p><p><strong>安卓手机音频无法自动播放</strong></p><p>通过touch事件手动触发播放</p><p><strong>监听APP前后台切换</strong></p><p>通过postEvent方法监听webview的切换</p><p><strong>因为手机设置字体大小导致样式错位问题</strong></p><p>安卓客户端通过webview配置webview.getSettings().setTextZoom(100)就可以禁止缩放，按照百分百显示。</p><h2 id="微信-企业微信"><a href="#微信-企业微信" class="headerlink" title="微信/企业微信"></a>微信/企业微信</h2><p><strong>微信端无法自动播放音频问题</strong></p><blockquote><p>方法一 使用微信提供的js-sdk，在ready中调用播放的API<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//首先引用js: </span><br><span class="line">&lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">//然后写方法: </span><br><span class="line">function autoPlayAudio1()&#123;</span><br><span class="line">  wx.config(&#123;</span><br><span class="line">    //配置信息, 即使不正确也能使用 wx.ready</span><br><span class="line">    debug: false,</span><br><span class="line">    appId: &apos;&apos;,</span><br><span class="line">    timestamp: 1,</span><br><span class="line">    nonceStr: &apos;&apos;,</span><br><span class="line">    signature: &apos;&apos;,</span><br><span class="line">    jsApiList: []</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.ready(function() &#123;</span><br><span class="line">    document.getElementById(&apos;audio&apos;).play();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var audio=document.querySelector(&quot;#audio&quot;);</span><br><span class="line">  document.addEventListener(&quot;WeixinJSBridgeReady&quot;,function()&#123;</span><br><span class="line">  audio.play();</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>隐藏分享栏</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeixinJSBridge.call(&apos;hideOptionMenu&apos;)</span><br></pre></td></tr></table></figure><p><strong>企业微信注册报invalid signture</strong></p><ul><li>在home界面调用注册方法会报错，修改调用的位置至需要使用新建表单页面</li><li>后台返回的时间戳单位需要为<strong>秒</strong>，注册的url需要encodeURIComponent再传给后台，由后台decode</li><li>项目用的是history模式，每个页面使用sdk都需要重新调用注册方法<blockquote><p>url不调用encodeURIComponent的话链接上通过&amp;字符连接起来的参数会不被加入签名中</p></blockquote></li></ul><p><strong>安卓手机无法预览图片</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">调用接口时，urls必须传</span><br><span class="line">wx.previewImage(&#123;</span><br><span class="line">  current: imgUrl, // 当前显示图片的http链接</span><br><span class="line">  urls: [imgUrl] // 需要预览的图片http链接列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;界面渲染时出现花括号{}&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日常小记-JS</title>
    <link href="https://tragiclife.github.io/2018/12/12/front-end/js/daily-notes/"/>
    <id>https://tragiclife.github.io/2018/12/12/front-end/js/daily-notes/</id>
    <published>2018-12-11T23:59:39.000Z</published>
    <updated>2018-12-11T16:00:21.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><strong>生成语法</strong></p><p>emmet</p><p><strong>渲染机制</strong></p><ol><li>处理 HTML 并构建 DOM 树。</li><li>处理 CSS 构建 CSSOM 树。</li><li>将 DOM 与 CSSOM 合并成一个渲染树。</li><li>根据渲染树来布局，计算每个节点的位置。</li><li>调用 GPU 绘制，合成图层，显示在屏幕上。</li></ol><p><strong>视频播放自动全屏问题</strong></p><p>设置playsinline=”true”、webkit-playsinline=”true”、x5-playsinline=”true”、x-webkit-airplay=”allow”</p><p><strong>修改浏览器页签图标</strong></p><link rel="shortcut icon" href=""><p><strong>dns获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://a.alipayobjects.com&quot; rel=&quot;dns-prefetch&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p><strong>position</strong></p><ul><li>static不拖出文档流</li><li>relative不拖出文档流</li><li>absolute拖出文档流</li><li>fixed拖出文档流</li></ul><blockquote><p>伪对象after和before相当于内联元素</p></blockquote><p><strong>display和visibility</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">display: none; // 隐藏DOM，不占据空间</span><br><span class="line">visibility: hidden; // 隐藏DOM，占据空间</span><br></pre></td></tr></table></figure></p><p><strong>GPU硬件加速</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 设置will-change: transform，还需要设置transform: translateZ(0)进行hack</span><br><span class="line">2. transform: traslate3d(0, 0, 0)</span><br></pre></td></tr></table></figure></p><p><strong>硬件加速优化</strong></p><ul><li>设置动画元素的z-index高于其他元素</li><li>使用3D硬件加速提升动画性能时，最好给元素增加一个z-index属性，人为干扰复合层的排序，可以有效减少chrome创建不必要的复合层，提升渲染性能，移动端优化效果尤为明显</li></ul><p><strong>元素容器宽度固定，当元素超出容器时整个元素换行处理</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;123&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;123&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">方法一</span><br><span class="line">.item &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line">.container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><strong>$(“p”).empty与$(“p”).remove</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).empty</span><br><span class="line">移除p标签中的文本及其子节点，留下p标签</span><br><span class="line">$(&quot;p&quot;).remove</span><br><span class="line">移除p标签及其文本内容还有其子节点</span><br></pre></td></tr></table></figure></p><p><strong>事件绑定</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DOM2级事件</span><br><span class="line">addEventListener(type, listener, useCapture/options);</span><br><span class="line">removeEventListener(type, listener, useCapture/options);</span><br><span class="line">useCapture: 默认为false，监听冒泡阶段</span><br><span class="line">options: &#123;</span><br><span class="line">  capture: Boolean, // 是否在捕获阶段触发事件</span><br><span class="line">  passive: Boolean, // 使preventDefault调用无效，可优化界面滚动效果</span><br><span class="line">  once: Boolean, // 是否执行一次</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IE</span><br><span class="line">attachEvent(&apos;on&apos; + type, listener);</span><br><span class="line">detachEvent(&apos;on&apos; + type, listener);</span><br></pre></td></tr></table></figure></p><p><strong>消除事件处理器的影响</strong></p><blockquote><p><a href="https://mp.weixin.qq.com/s/YJficujNG3kX45ZwfFQoqA" target="_blank" rel="noopener">图解浏览器的工作原理</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">让浏览器即监听相关事件，又让组合器线程在等等主线程响应前构建新的组合帧</span><br><span class="line">document.body.addEventListener(&apos;touchstart&apos;, event =&gt; &#123;</span><br><span class="line">  if (event.target === area) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;passive: true&#125;);</span><br><span class="line"></span><br><span class="line">垂直方向的滚动可能会先于event.preventDefault()发生，此时可以通过 event.cancelable 来防止这种情况</span><br><span class="line">document.body.addEventListener(&apos;pointermove&apos;, event =&gt; &#123;</span><br><span class="line">  if (event.cancelable) &#123;</span><br><span class="line">    event.preventDefault(); // block the native scroll</span><br><span class="line">  &#125; </span><br><span class="line">&#125;, &#123;passive: true&#125;);</span><br><span class="line"></span><br><span class="line">也可以使用 css 属性 touch-action 来完全消除事件处理器的影响，如：</span><br><span class="line">#area &#123; </span><br><span class="line">  touch-action: pan-x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表示false的值</strong></p><p>false, 0, 空字符串(‘’), null, undefined</p><p><strong>Number,Boolean,String,Undefined比较问题</strong> </p><p>会先将复合对象转换成基本类型（依次调用valueOf和toString方法）再进行比较，undefined被当成基本类型，undefined转换成数字是NaN，因此undefined与除null之外的其它类型值进行比较时始终返回false（注意NaN==NaN返回false）null被当成复合对象，由于null没有valueOf和toStribg方法，因此除了和undefined之外的其它类型值进行比较时始终返回false</p><p><strong>设置prototype的值为对象时，首先要还原构造器</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let Person = function()&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>复制内容到粘贴板(仅支持IE)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let text = document.querySelector(&apos;.text&apos;).innerText;</span><br><span class="line">window.clipboardData.setData(&apos;text&apos;, text);</span><br></pre></td></tr></table></figure></p><p><strong>[]和new Array</strong></p><p>[]的运行速度比new Array快，后者需要调用构造器</p><p><strong>mouseout、mouseleave</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mouseout: 无论鼠标离开被选元素(绑定事件的元素)还是其子元素都会触发</span><br><span class="line">mouseleave: 当鼠标离开被选元素时触发</span><br></pre></td></tr></table></figure></p><p><strong>获取选中select标签的文本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// value和选择文本不同时，sel为select标签的dom元素</span><br><span class="line">sel.options[sel.selectedIndex].text</span><br></pre></td></tr></table></figure></p><p><strong>hover事件</strong></p><p>相当于mouseenter+mouseleave，不相当于mouseover+mouseout，mouseover(mouseout)鼠标进入(离开)某个元素或其子元素时触发。</p><p><strong>javascript:void(0)</strong></p><p>javascript是伪协议，表示url的内容通过javascript执行。void(0)表示不做任何操作，这样会防止链接跳转到其他界面。这么做可以保存链接的样式，但不让链接执行实际操作，具体的操作交给链接的onclick事件处理</p><p><strong>函数声明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数声明：function fn()&#123;&#125;</span><br><span class="line">函数表达式：var fn = function()&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>将伪数组转换成数组</strong></p><p>Array.prototype.slice.call(arguments, 0);</p><p><strong>操作class</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">classList.value  获取所有类名</span><br><span class="line">classList.add()  添加类</span><br><span class="line">classList.remove()  移除类</span><br><span class="line">classList.contains()  查看是否存在某个类</span><br><span class="line">classList.toggle()  切换是否显示某个类</span><br></pre></td></tr></table></figure></p><p><strong>获取对象类型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.toString.call(xx); // 结果为[object Type]</span><br><span class="line"></span><br><span class="line">// 判断是否为数组</span><br><span class="line">if(typeof Array.isArray===&apos;undefined&apos;)&#123;</span><br><span class="line">  Array.isArray = function(arg)&#123;</span><br><span class="line">    return Object.prototype.toString.call(arg)===&apos;[object Array]&apos;</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>判断是否为undefined</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a;</span><br><span class="line">undefined = 1; // 这样判断就会出错</span><br><span class="line">a === undefined; // undefined不是保留字，能被赋值</span><br><span class="line"></span><br><span class="line">a === void 0; // void后面随便跟上一个组成表达式，返回就是undefined</span><br></pre></td></tr></table></figure></p><p><strong>bind、call、apply的区别</strong></p><ul><li>bind只改变上下文环境，不执行</li><li>call第二个参数开始是参数列表</li><li>allpy第二个参数是数组</li></ul><p><strong>获取元素样式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getComputedStyle(dom, 伪类); // 可以获取伪类样式</span><br></pre></td></tr></table></figure></p><p><strong>判断图片是否加载完成</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. onload</span><br><span class="line">2. 通过img.complete属性判断</span><br><span class="line">3. onreadystatechange，img.readyState为complete或者loaded为加载完成</span><br></pre></td></tr></table></figure></p><p><strong>setTimeout(fn, time, param)</strong></p><ul><li>fn: 回调函数</li><li>time: 延迟调用时间</li><li>param: 传入回调的参数</li></ul><p><strong>获取transform后元素的宽高</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dom.getBoundingClientRect()</span><br></pre></td></tr></table></figure></p><p><strong>语法简写</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//取整</span><br><span class="line">parseInt(a,10); //Before</span><br><span class="line">Math.floor(a); //Before</span><br><span class="line">a&gt;&gt;0; //Before</span><br><span class="line">~~a; //After</span><br><span class="line">a|0; //After</span><br><span class="line"></span><br><span class="line">//四舍五入</span><br><span class="line">Math.round(a); //Before</span><br><span class="line">a+.5|0; //After</span><br><span class="line"></span><br><span class="line">//内置值</span><br><span class="line">undefined; //Before</span><br><span class="line">void 0; //After, 快</span><br><span class="line">0[0]; //After, 略慢</span><br><span class="line"></span><br><span class="line">//内置值</span><br><span class="line">Infinity;</span><br><span class="line">1/0;</span><br><span class="line"></span><br><span class="line">//布尔值短写法</span><br><span class="line">true; //Before</span><br><span class="line">!0; //After</span><br><span class="line"></span><br><span class="line">//布尔值短写法</span><br><span class="line">false; //Before</span><br><span class="line">!1; //After</span><br></pre></td></tr></table></figure></p><p><strong>base64图片前缀</strong></p><blockquote><p>data:image/png;base64,</p></blockquote><p><strong>拷贝</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象拷贝</span><br><span class="line">let obj = Object.defineProperties(&#123;&#125;, Object.getOwnPropertyDescriptors(copyObj))</span><br><span class="line"></span><br><span class="line">数组拷贝</span><br><span class="line">let arr = [].concat(copyArr);</span><br></pre></td></tr></table></figure></p><p><strong>第二次var定义变量如果不赋值，该值为原来定义的值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 100;</span><br><span class="line">var a;</span><br><span class="line">console.log(a); // 100</span><br></pre></td></tr></table></figure></p><p><strong>函数声明会比变量声明先</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(a); // function</span><br><span class="line">var a = &apos;123&apos;;</span><br><span class="line">function a ()&#123;&#125;;</span><br><span class="line">console.log(a); // 123</span><br></pre></td></tr></table></figure></p><p><strong>new的过程</strong></p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋值给新对象</li><li>执行构造函数的代码</li><li>返回新的对象</li></ol><p><strong>原型链的顶层</strong></p><p>null</p><p><strong>自定义事件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let evt = document.createEvent(&quot;HTMLEvents&quot;);</span><br><span class="line">// 初始化</span><br><span class="line">evt.initEvent(&quot;alert&quot;, false, false);</span><br><span class="line">// 触发</span><br><span class="line">week.dispatchEvent(evt);</span><br></pre></td></tr></table></figure></p><p><strong>查看元素事件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.getEventListeners(window); // 返回事件对象，如&#123;click:[], mousedown:[]&#125;</span><br><span class="line">window.getEventListeners(window).click[0].listener; // 获取第一个绑定的click事件函数</span><br></pre></td></tr></table></figure></p><p><strong>生成任意长度，且值为undefined的数组</strong></p><p>Array.apply(null, {length: 2}); // [undefined, undefined]</p><p><strong>移动端将键盘回车变为搜索</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将input的type改为search</span><br><span class="line">在input外包一层form, form标签设置action属性, 设置autocomplete=&quot;off&quot;去掉弹出的下拉框</span><br><span class="line">设置input[type=&quot;search&quot;]::-webkit-search-cancel-button&#123;display: none;&#125;将默认的X隐藏掉</span><br><span class="line">设置-webkit-appearance: none;去掉默认样式</span><br><span class="line">使用ajax提交时需要preventDefault阻止默认行为</span><br></pre></td></tr></table></figure></p><p><strong>监听APP返回键</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var hiddenProperty = &apos;hidden&apos; in document ? &apos;hidden&apos; : &apos;webkitHidden&apos; in document ? &apos;webkitHidden&apos; : &apos;mozHidden&apos; in document ? &apos;mozHidden&apos; : null;</span><br><span class="line">var visibilityChangeEvent = hiddenProperty.replace(/hidden/i, &apos;visibilitychange&apos;);</span><br><span class="line">var onVisibilityChange = function()&#123;</span><br><span class="line">  if (document[hiddenProperty]) &#123;    </span><br><span class="line">    console.log(&apos;页面非激活&apos;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    console.log(&apos;页面激活&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">document.addEventListener(visibilityChangeEvent, onVisibilityChange);</span><br></pre></td></tr></table></figure></p><p><strong>parseInt</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;12abc&apos;); // 12</span><br></pre></td></tr></table></figure></p><p><strong>触发鼠标右键事件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on(&quot;contextmenu&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>window.open</strong></p><p>window.open打开的子窗口可以使用opener访问父窗口的方法和变量</p><p><strong>onInput</strong></p><p>谷歌控制台使用Ctrl+p可以输入要打开的文件；onInput 是 HTML5 的标准事件，对于检测 textarea, input(text), input(password) 和 input(search) 这几个元素通过用户界面发生的内容变化非常有用，在内容修改后立即被触发，不像 onchange 事件需要失去焦点才触发。oninput 事件在 IE9 以下版本不支持，需要使用 IE 特有的onpropertychange 事件替代。</p><p><strong>try、catch、finally</strong></p><p>Js如果在try中return则不会进入finally</p><p><strong>调用颜色盘</strong></p><p>设置input的type为color</p><p><strong>改变当前链接</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.replace(url)</span><br></pre></td></tr></table></figure></p><p><strong>IOS日期转换问题</strong></p><p>IOS的Safari在new Date()的时候不支持’2017-3-6’的格式，支持’2017/3/6’，也不支持date为2018/09/19 00.00.00.0，后缀带.0的</p><p><strong>http</strong></p><p>get请求默认会在浏览器中缓存，可以通过添加时间戳来避免缓存</p><p><strong>NodeJS Event loop</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;script start&apos;);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(&apos;Promise&apos;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">  console.log(&apos;promise1&apos;);</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">  console.log(&apos;promise2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;script end&apos;);</span><br><span class="line">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span><br><span class="line"></span><br><span class="line">微任务: process.nextTick, promise, Object.observe, MutationObserver</span><br><span class="line">宏任务: script, setTimeout, setInterval, setImmediate, I/O, UI rendering</span><br><span class="line"></span><br><span class="line">&gt; setImmediate会比setTimeout先执行</span><br><span class="line"></span><br><span class="line">Event loop执行顺序</span><br><span class="line">1. 执行同步代码，这属于宏任务</span><br><span class="line">2. 执行栈为空，查询是否有微任务需要执行</span><br><span class="line">3. 执行所有微任务</span><br><span class="line">4. 必要的话渲染 UI</span><br><span class="line">5. 然后开始下一轮 Event loop，执行宏任务中的异步代码</span><br></pre></td></tr></table></figure></p><p><strong>存储</strong><br>特性 | cookie | localStorage | sessionStorage | indexDB<br>—|—|—|—|—<br>数据生命周期 | 一般由服务器生成，可以设置过期时间 |     除非被清理，否则一直存在 | 页面关闭就清理 |     除非被清理，否则一直存在<br>数据存储大小 | 4K | 5M | 5M | 无限<br>与服务端通信 | 每次都会携带在 header 中，对于请求性能影响 | 不参与 | 不参与 | 不参与</p><p><strong>cookie安全性</strong><br>属性 | 作用<br>—|—<br>value | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识<br>http-only | 不能通过 JS 访问 Cookie，减少 XSS 攻击<br>secure | 只能在协议为 HTTPS 的请求中携带<br>same-site | 规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击</p><p><strong>Service Worker</strong></p><blockquote><p>Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">if (navigator.serviceWorker) &#123;</span><br><span class="line">  navigator.serviceWorker.register(&apos;sw.js&apos;).then(registration =&gt; &#123;</span><br><span class="line">    console.log(&apos;service worker 注册成功&apos;);</span><br><span class="line">  &#125;).catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&apos;service worker 注册失败&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// sw.js</span><br><span class="line">// 监听install事件，回调缓存所需文件</span><br><span class="line">self.addEventListener(&apos;install&apos;, e =&gt; &#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    // 设置缓存的名称为my-cache</span><br><span class="line">    caches.open(&apos;my-cache&apos;).then(cache =&gt; &#123;</span><br><span class="line">      return cache.addAll([&apos;./index.html&apos;, &apos;./index.js&apos;]);</span><br><span class="line">    &#125;);</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 拦截所有请求事件</span><br><span class="line">// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span><br><span class="line">self.addEventListener(&apos;fetch&apos;, e =&gt; &#123;</span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(response =&gt; &#123;</span><br><span class="line">      if (response) &#123;</span><br><span class="line">        return response</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(&apos;fetch source&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">  );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Load和DOMContentLoaded区别</strong></p><ul><li>Load 事件触发代表页面中的 DOM，CSS，JS，图片已经全部加载完毕</li><li>DOMContentLoaded 事件触发代表初始的 HTML 被完全加载和解析，不需要等待 CSS，JS，图片加载</li></ul><p><strong>生成新图层</strong></p><ul><li>3D变换: translate3d、translateZ</li><li>will-change</li><li>video、iframe标签</li><li>通过动画实现的opacity动画转换</li><li>position: fixed</li></ul><blockquote><p>对于频繁渲染的建议生成一个新的图层，提高性能。但不能生成过多图层，会引起反作用。</p></blockquote><p><strong>重绘(Repaint)和回流(Reflow)</strong></p><ul><li>重绘是当节点需要更改外观而不会影响布局的，比如改变 color 就叫称为重绘</li><li>回流是布局或者几何属性需要改变就称为回流。</li></ul><blockquote><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>并行、并发</strong></p><ul><li>并行：宏观和微观上都是同时进行</li><li>并发：宏观上同时，微观上不同时</li></ul><p><strong>工具库</strong></p><p>loadash、date-fns(日期格式化)、accounting.js(货币格式化)</p><p><strong>jsencrypt</strong></p><p>用于请求参数加密处理，加密方式为RSA</p><p><strong>vue框架核心方法defineProperty(defineProperties)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">writable、value和set、get不能同时存在</span><br><span class="line">Object.defineProperty(obj, prop, &#123;</span><br><span class="line">  configurable: false, //是否可以通过delete删除，能否修改属性的特性。直白点：是否可配置</span><br><span class="line">  enumerable: false, //枚举性，表示是否可以通过for-in循环返回</span><br><span class="line">  writable: false, //可写性：是否可以修改属性的值</span><br><span class="line">  value: undefined, //包含属性的值，也就是对应的可读性。</span><br><span class="line">  set: undefined,</span><br><span class="line">  get: undefined</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>获取github用户信息</strong></p><p><a href="https://api.github.com/users/{id}" target="_blank" rel="noopener">https://api.github.com/users/{id}</a></p><p><strong>复制功能</strong></p><ul><li><a href="https://clipboardjs.com/" target="_blank" rel="noopener">https://clipboardjs.com/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4</a></li></ul><p><strong>安装nvm后无法使用问题</strong></p><p>先nvm install node，然后再nvm use [version]</p><p><strong>nvm安装最新nodejs包</strong></p><p>nvm install latest</p><p><strong>判断点击元素是否为某个元素的后代元素</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class="line">  if (el.contains(e.target)) &#123;</span><br><span class="line">    console.log(&apos;包含&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;生成语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;emmet&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;渲染机制&lt;/strong
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>meta标签</title>
    <link href="https://tragiclife.github.io/2018/12/11/front-end/html/tag-meta/"/>
    <id>https://tragiclife.github.io/2018/12/11/front-end/html/tag-meta/</id>
    <published>2018-12-11T00:43:10.000Z</published>
    <updated>2018-12-12T14:01:51.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt; &lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 声明文档使用的字符编码 --&gt;</span><br><span class="line">&lt;meta charset=&apos;utf-8&apos;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;wap-font-scale&quot; content=&quot;no&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 页面描述 --&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 页面关键词 --&gt;</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 网页作者 --&gt;</span><br><span class="line">&lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 搜索引擎抓取 --&gt;</span><br><span class="line">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 为移动设备添加 viewport --&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;&gt;</span><br><span class="line">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- iOS 设备 begin --&gt;</span><br><span class="line">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置苹果工具栏颜色 --&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 不让百度转码 --&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 微软的老式浏览器 --&gt;</span><br><span class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- uc强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- QQ强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- UC强制全屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- QQ强制全屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- UC应用模式 --&gt;</span><br><span class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- QQ应用模式 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- windows phone 点击无高光 --&gt;</span><br><span class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iOS 图标 begin --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;</span><br><span class="line">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span><br><span class="line">&lt;!-- iOS 图标 end --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- iOS 启动画面 begin --&gt;</span><br><span class="line">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;</span><br><span class="line">&lt;!-- iOS 启动画面 end --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- iOS 设备 end --&gt;</span><br><span class="line">&lt;!-- Windows 8 磁贴颜色 --&gt;</span><br><span class="line">&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Windows 8 磁贴图标 --&gt;</span><br><span class="line">&lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加 RSS 订阅 --&gt;</span><br><span class="line">&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;/rss.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加 favicon icon --&gt;</span><br><span class="line">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- sns 社交标签 begin --&gt;</span><br><span class="line">&lt;!-- 参考微博API --&gt;</span><br><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;类型&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:url&quot; content=&quot;URL地址&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;标题&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;图片&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;描述&quot; /&gt;</span><br><span class="line">&lt;!-- sns 社交标签 end --&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;meta标签&quot;&gt;&lt;a href=&quot;#meta标签&quot; class=&quot;headerlink&quot; title=&quot;meta标签&quot;&gt;&lt;/a&gt;meta标签&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="html" scheme="https://tragiclife.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css实现居中</title>
    <link href="https://tragiclife.github.io/2018/12/11/front-end/css/css-centered/"/>
    <id>https://tragiclife.github.io/2018/12/11/front-end/css/css-centered/</id>
    <published>2018-12-11T00:03:53.000Z</published>
    <updated>2018-12-10T16:44:17.671Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css揭秘</title>
    <link href="https://tragiclife.github.io/2018/12/10/front-end/css/css-reveal-secrets/"/>
    <id>https://tragiclife.github.io/2018/12/10/front-end/css/css-reveal-secrets/</id>
    <published>2018-12-10T00:04:00.000Z</published>
    <updated>2018-12-18T15:54:11.999Z</updated>
    
    <content type="html"><![CDATA[<h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p><strong>使用box-shadow制作假边框，第四个值为增大或者减小投影面积(box-shadow范围内不会触发事件)</strong><br>box-shadow 是层层叠加的，第一层投影位于最顶层，依次类推。因此，你需要按此规律调整扩张半径。比如说，在前面的代码中，我们想在外圈再加一道 5px 的外框，那就需要指定扩张半径的值为15px （ 10px+5px ），会随着border-radius贴合border</p><p><style>.box-shadow{display: inline-block;margin: 20px;width: 10px;height: 10px;-webkit-box-shadow: 0 0 0 10px red, 0 0 0 15px blue;box-shadow: 0 0 0 10px red, 0 0 0 15px blue;font-size: 12px;}</style></p><div class="box-shadow"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-shadow&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box-shadow&#123;</span><br><span class="line">  width: 10px;</span><br><span class="line">  height: 10px;</span><br><span class="line">  box-shadow: 0 0 0 10px red, 0 0 0 15px blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>outline</strong><br>不触发事件，不随border-radius而贴合border</p><p><style>.outline {margin: 10px;width: 10px;height: 10px;border: 5px solid red;outline: 5px solid blue;box-sizing: content-box;}</style></p><div class="outline"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outline&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.outline &#123;</span><br><span class="line">  width: 10px;</span><br><span class="line">  height: 10px;</span><br><span class="line">  border: 5px solid red;</span><br><span class="line">  outline: 5px solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background-origin<br>通过backgroun-origin改变background-position的基准位置</p><p>reapting-linear-gradient<br>linear-gradient的扩展</p><p><strong>利用linear-gradient实现网格</strong></p><p><style>.linear-gradient {margin: 10px;width: 100px;height: 100px;background: white;background-image: linear-gradient(90deg, rgba(200,0,0,.5) 50%,transparent 0), linear-gradient( rgba(200,0,0,.5) 50%, transparent 0);background-size: 30px 30px;}</style></p><div class="linear-gradient"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;linear-gradient&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.linear-gradient &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: white;</span><br><span class="line">  background-image: linear-gradient(90deg, rgba(200,0,0,.5) 50%, transparent 0), linear-gradient( rgba(200,0,0,.5) 50%, transparent 0);</span><br><span class="line">  background-size: 30px 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h4><p>自适应的椭圆(元素为正方形时展示圆形)<br>border-radius: 50% / 50%;可简写为border-radius: 50%;</p><p><style>.circle {display: inline-block;margin: 10px;width: 50px;height: 50px;border-radius: 50%;background: blue;}.circle2 {width: 100px;}</style></p><div class="circle"></div><div class="circle circle2"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;circle circle2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.circle &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line">.circle2 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>切角效果</strong></p><p><style>.corner-cutting{display: inline-block;margin: 10px;width:100px; height: 100px;line-height: 100px;background: linear-gradient(135deg, transparent 15px, #58a 0) top left, linear-gradient(-135deg, transparent 15px, #58a 0) top right, linear-gradient(-45deg, transparent 15px, #58a 0) bottom right,linear-gradient(45deg, transparent 15px, #58a 0) bottom left;background-size: 50% 50%;background-repeat: no-repeat;text-align: center;}.clip-path{clip-path:polygon(20px 0, calc(100% - 20px) 0, 100% 20px,100% calc(100% - 20px), calc(100% - 20px) 100%,20px 100%, 0 calc(100% - 20px), 0 20px);}</style></p><div class="corner-cutting">background</div>    <div class="corner-cutting clip-path">clip-path</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.corner-cutting &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: linear-gradient(135deg, transparent 15px, #58a 0) top left, </span><br><span class="line">    linear-gradient(-135deg, transparent 15px, #58a 0) top right, </span><br><span class="line">    linear-gradient(-45deg, transparent 15px, #58a 0) bottom right,</span><br><span class="line">    linear-gradient(45deg, transparent 15px, #58a 0) bottom left;</span><br><span class="line">  background-size: 50% 50%;</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 或者使用clip-path</span><br><span class="line">clip-path:polygon(20px 0, calc(100% - 20px) 0, 100% 20px,100% calc(100% - 20px), calc(100% - 20px) 100%,20px 100%, 0 calc(100% - 20px), 0 20px);</span><br></pre></td></tr></table></figure><p><strong>制作单边倾斜的梯形</strong></p><p><style>.trapezoid {margin: 10px;width: 50px;height: 50px;background: blue;transform: perspective(.5em) rotateX(5deg);transform-origin: bottom left;}</style></p><div class="trapezoid"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;trapezoid&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.trapezoid &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  transform: perspective(.5em) rotateX(5deg);</span><br><span class="line">  transform-origin: bottom left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>投影</strong></p><p><style>.box-shadow {width: 50px;height: 50px;line-height: 50px;}.box-shadow1 {box-shadow: 0 5px 4px -4px black;}.box-shadow2 {box-shadow: 3px 3px 6px -3px black;}.box-shadow3 {box-shadow: 5px 0 5px -5px black, -5px 0 5px -5px black;}</style></p><div class="box-shadow box-shadow1">单边投影</div><div class="box-shadow box-shadow2">邻边投影</div><div class="box-shadow box-shadow3">两侧投影</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-shadow box-shadow1&quot;&gt;单边投影&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box-shadow box-shadow2&quot;&gt;邻边投影&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box-shadow box-shadow3&quot;&gt;两侧投影&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box-shadow &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">// 单边投影</span><br><span class="line">.box-shadow1 &#123;</span><br><span class="line">  box-shadow: 0 5px 4px -4px black;</span><br><span class="line">&#125;</span><br><span class="line">// 邻边投影</span><br><span class="line">.box-shadow2 &#123;</span><br><span class="line">  box-shadow: 3px 3px 6px -3px black;</span><br><span class="line">&#125;</span><br><span class="line">// 两侧投影</span><br><span class="line">.box-shadow3 &#123;</span><br><span class="line">  box-shadow: 5px 0 5px -5px black, -5px 0 5px -5px black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>滤镜</strong></p><p><style>.filter {display: inline-block;margin: 10px;width: 50px;height: 50px;background: blue;}.filter-blur {filter: blur(5px);}.filter-grayscale {filter: grayscale();}.filter-drop-shadow {filter: drop-shadow(3px 3px 6px black)}</style></p><div class="filter filter-blur"></div><div class="filter filter-grayscale"></div><div class="filter filter-drop-shadow"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;filter&quot;&gt;&lt;/div&gt;</span><br><span class="line">.filter-blur &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line">.filter-blur &#123;</span><br><span class="line">  filter: blur(5px);</span><br><span class="line">&#125;</span><br><span class="line">.filter-grayscale &#123;</span><br><span class="line">  filter: grayscale();</span><br><span class="line">&#125;</span><br><span class="line">.filter-drop-shadow &#123;</span><br><span class="line">  filter: drop-shadow(3px 3px 6px black)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter: blur(5px) grayscale() drop-shadow(3px 3px 6px black)</span><br><span class="line">blur 元素模糊</span><br><span class="line">drop-shadow 类似于box-shadow</span><br></pre></td></tr></table></figure><p><strong>设置缩进</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tab-size: 2;</span><br></pre></td></tr></table></figure></p><p><strong>空心字效果</strong></p><p><style>.hollow-text {display: inline-block;margin-right: 10px;text-shadow: 1px 1px black, -1px -1px black, 1px -1px black, -1px 1px black;}.hollow-text2 {text-shadow: 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black;}</style></p><div class="hollow-text">空心字</div><div class="hollow-text hollow-text2">空心字</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;hollow-text&quot;&gt;空心字&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;hollow-text hollow-text2&quot;&gt;空心字&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.hollow-text &#123;</span><br><span class="line">  text-shadow: 1px 1px black, -1px -1px black, 1px -1px black, -1px 1px black;</span><br><span class="line">&#125;</span><br><span class="line">.hollow-text2 &#123;</span><br><span class="line">  text-shadow: 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用text-shadow实现文字模糊效果</strong></p><p><style>.filter-text {color: black;text-shadow: 0 0 .1em black, 0 0 .3em black;}</style></p><div class="filter-text">文字模糊</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;filter-text&quot;&gt;文字模糊&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.filter-text &#123;</span><br><span class="line">  color: black;</span><br><span class="line">  text-shadow: 0 0 .1em black, 0 0 .3em black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用svg实现环形文字效果</strong></p><p><style>.circular{width: 50px;}</style></p><div class="circular"><svg viewbox="0 0 100 100"><path d="M 0,50 a 50,50 0 1,1 0,1 z" id="circle"/><text><textpath xlink:href="#circle">circular reasoning works because</textpath></text></svg></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;circular&quot;&gt;</span><br><span class="line">  &lt;svg viewBox=&quot;0 0 100 100&quot;&gt;</span><br><span class="line">  &lt;path d=&quot;M 0,50 a 50,50 0 1,1 0,1 z&quot; id=&quot;circle&quot; /&gt;</span><br><span class="line">  &lt;text&gt;</span><br><span class="line">    &lt;textPath xlink:href=&quot;#circle&quot;&gt;circular reasoning works because&lt;/textPath&gt;</span><br><span class="line">  &lt;/text&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h4><ul><li>使用合适的cursor</li><li>增大可点击范围<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border: 10px solid transparent;</span><br><span class="line">background-clip: padding-box;</span><br><span class="line">需要边框时增加box-shadow: 0 0 0 1px rgba(0,0,0,.3) inset;</span><br></pre></td></tr></table></figure></li></ul><p><strong>水平居中</strong><br>行内元素：对其父元素设置text-align:center;<br>块级元素：对其自身设置margin:0 auto;</p><p><strong>实现水平垂直居中</strong></p><ol><li>通过position定位<br><style>.position-container {position: relative;margin: 10px;width: 50px;height: 50px;background: red;}.position {position: absolute;top: 50%;left: 50%;width: 30px;height: 30px;background: blue;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);}</style><div class="position-container"><div class="position"></div></div></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;position-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;position&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.position-container &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">.position &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 30px;</span><br><span class="line">  background: blue;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">margin: 50% auto 0;transform: translateY(-50%);(只适用于全屏居中)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用flex<br><style>.flex-container {display: flex;margin: 10px;width: 50px;height: 50px;background: red;}.margin-item {margin: auto;width: 30px;height: 30px;background: blue;}.flex-container2 {justify-content: center;align-items: center;}.flex-item {width: 30px;height: 30px;background: blue;}</style><div>margin</div><div class="flex-container"><div class="margin-item"></div></div><div>flex</div><div class="flex-container flex-container2"><div class="flex-item"></div></div></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 使用margin</span><br><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;margin-item&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.flex-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">.margin-item &#123;</span><br><span class="line">  margin: auto;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 30px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用伸缩盒属性</span><br><span class="line">.flex-container2 &#123;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.flex-item &#123;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 30px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小球回弹动画</strong><br><style>@keyframes bounce {60%, 80%, to {transform: translateX(400px);animation-timing-function: ease;}70% { transform: translateX(300px); }90% { transform: translateX(360px); }}.ball {margin: 10px;width: 50px;height: 50px;background: blue;animation: bounce 3s cubic-bezier(.1,.25,1,.25) infinite;animation-direction: alternate;}</style></p><div class="ball"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">@keyframes bounce &#123;</span><br><span class="line">  60%, 80%, to &#123;</span><br><span class="line">    transform: translateX(400px);</span><br><span class="line">    animation-timing-function: ease;</span><br><span class="line">  &#125;</span><br><span class="line">  70% &#123; transform: translateX(300px); &#125;</span><br><span class="line">  90% &#123; transform: translateX(360px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.ball &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  animation: bounce 3s cubic-bezier(.1,.25,1,.25) infinite;</span><br><span class="line">  animation-direction: alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用steps对png背景做切换</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation: loader 1s infinite steps(8);</span><br><span class="line">@keyframes loader &#123;to &#123; background-position: -800px 0; &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>实现闪烁效果</strong><br><style>@keyframes twinkle {0% {backgroud: blue;}100% {background: transparent;}}.twinkle {margin: 10px;width: 50px;height: 50px;background: blue;animation: twinkle .5s linear infinite alternate;}</style></p><div class="twinkle"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;twinkle&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">@keyframes twinkle &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    backgroud: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.twinkle &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  animation: twinkle .5s linear infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>背景图片来回播放</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@keyframes panoramic &#123;to &#123; background-position: 100% 0; &#125;&#125;</span><br><span class="line">.panoramic &#123;</span><br><span class="line">  width: 150px; height: 150px;</span><br><span class="line">  background: url(&quot;img/naxos-greece.jpg&quot;);</span><br><span class="line">  background-size: auto 100%;</span><br><span class="line">  animation: panoramic 10s linear infinite alternate;</span><br><span class="line">  animation-play-state: paused;</span><br><span class="line">&#125;</span><br><span class="line">.panoramic:hover, .panoramic:focus &#123;</span><br><span class="line">  animation-play-state: running;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>利用translate实现transform-origin的效果</strong></p><p><style>.transform-container {margin: 50px;}.transform {width: 50px;height: 50px;background: blue;transform: rotate(30deg);transform-origin: 50px 100px;}.transform2 {transform: translate(50px, 100px) rotate(30deg) translate(-50px, -100px);transform-origin: 0 0;}</style></p><div class="transform-container"><div class="transform"></div><div class="transform transform2"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;transform-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;transform&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;transform2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.transform-container &#123;</span><br><span class="line">  margin: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.transform &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  transform: rotate(30deg);</span><br><span class="line">  transform-origin: 50px 100px;</span><br><span class="line">&#125;</span><br><span class="line">// 效果同上</span><br><span class="line">.transform2 &#123;</span><br><span class="line">  transform: translate(50px, 100px) rotate(30deg) translate(-50px, -100px);</span><br><span class="line">  transform-origin: 0 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;边框&quot;&gt;&lt;a href=&quot;#边框&quot; class=&quot;headerlink&quot; title=&quot;边框&quot;&gt;&lt;/a&gt;边框&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;使用box-shadow制作假边框，第四个值为增大或者减小投影面积(box-shadow范围内不会触发事件)&lt;/strong
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>日常小记-样式</title>
    <link href="https://tragiclife.github.io/2018/12/09/front-end/css/daily-notes/"/>
    <id>https://tragiclife.github.io/2018/12/09/front-end/css/daily-notes/</id>
    <published>2018-12-09T00:12:08.000Z</published>
    <updated>2018-12-08T16:28:27.303Z</updated>
    
    <content type="html"><![CDATA[<h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><p>BEM(block element modifier)</p><h4 id="记录的知识点"><a href="#记录的知识点" class="headerlink" title="记录的知识点"></a>记录的知识点</h4><p>浏览器html默认字体大小为16px，设置font-size为62.5%后可换算为10px</p><p><strong>常用的屏幕大小</strong><br>手机屏：&lt;768<br>pad屏：≥768<br>显示器：≥992<br>大屏显示器：≥1200</p><p>word-break：break-all<br>设置后火狐下的文字会比较对齐</p><p>50vh表示50%的设备高度，50vw表示50%的设备宽度</p><p><strong>禁止文本选中</strong><br>user-select:none</p><p><strong>链接的伪类</strong><br>:link :visited :hover :active(点击时)</p><p>ie浏览器的option标签不可改变样式、不触发事件(由select触发)</p><p>子元素都为float，则父元素需要设置float才能被撑开</p><p>bsckground:url() repeat attachment position/size origin clip</p><p>使用inline-block边距会多出4个像素，可通过font-size:0去除</p><p>文字要超过一行text-align:justify才会生效</p><p>textarea添加spellcheck＝”false”去除检查</p><p>display:inline-block的元素可以通过vertical-align:middle实现居中</p><p>resize属性可以设置文本框的拖动，其overflow需要设置为overflow/auto/scroll</p><p>制作梯形<br>transform: perspective(20px) rotateX(-1deg ) rotateY(-2deg) translateZ(0)</p><p>实现模糊效果(支持IOS)<br>backdrop-filter:blur(10px);</p><p>matrix(a,b,c,d,e,f)<br>e和f相当于translate<br>a和d相当于scale<br>b和c相当于rotate</p><p>使滚动变流畅<br>-webkit-overflow-scrolling: touch; </p><p>-webkit-overflow-scrolling产生的问题<br>滚动中scrollTop不会变化、不触发scroll事件，只在停下来的时候触发<br>手势可穿过其它元素触发元素滚动<br>滚动时暂停其它transition<br>有时会卡住不动，浏览器容器回弹停止后才可滑动</p><p>文本渐变<br>h2[data-text] {<br>  position: relative;<br>}<br>h2[data-text]::after {<br>  content: attr(data-text);<br>  z-index: 10;<br>  color: #e3e3e3;<br>  position: absolute;<br>  top: 0;<br>  left: 0;<br>  -webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,0)), color-stop(50%, rgba(0,0,0,1)), to(rgba(0,0,0,0)));<br>}</p><p>黑白图片<br>img {<br>  filter: grayscale(100%);<br>}</p><p>优化文本显示<br>.text {<br>  -moz-osx-font-smoothing: grayscale;<br>  -webkit-font-smoothing: antialiased;<br>  text-rendering: optimizeLegibility;<br>}</p><p>文本模糊<br>.text{<br>  text-shadow: 0 0 5px rgba(0, 0, 0, .5)<br>}</p><p>表格单元格等宽<br>.table {<br>  table-layout: fixed;<br>}</p><p>多行省略号<br>display: -webkit-box;<br>-webkit-box-orient: vertical;<br>-webkit-line-clamp: 2; // 显示的行数<br>overflow: hidden;<br>text-overflow: ellipsis;</p><p>伸缩盒<br>子元素的宽度没有超过父元素宽度或没有设置flex-wrap: wrap时，align-content不生效</p><p>GPU硬件加速<br>1、设置will-change:transform进行硬件加速，还需要设置trsnsform:translateZ(0)进行hack<br>2、transform: translate3d(0, 0, 0)</p><p>避免隐式合成<br>保持动画的对象的z-index尽可能的高。理想的，这些元素应该是body元素的直接子元素。当然，这不是总可能的。所以你可以克隆一个元素，把它放在body元素下仅仅是为了做动画。<br>将元素上设置will-change CSS属性，元素上有了这个属性，浏览器会提升这个元素成为一个复合层（不是总是）。这样动画就可以平滑的开始和结束。但是不要滥用这个属性，否则会大大增加内存消耗。</p><p>动画优化<br>减少浏览器的重排和重绘的发生。<br>不要使用table布局。<br>css动画中尽量只使用transform和opacity，这不会发生重排和重绘。<br>尽可能地只使用css做动画。<br>避免浏览器的隐式合成。<br>改变复合层的尺寸。(使用小图片，通过scale放大)</p><p>只有块级元素或者行内块元素transform属性才回生效</p><p>scroll-behavior: smooth<br>使用锚点切换时平滑滚动</p><h4 id="实现左右300px，中间自适应布局"><a href="#实现左右300px，中间自适应布局" class="headerlink" title="实现左右300px，中间自适应布局"></a>实现左右300px，中间自适应布局</h4><p>1、float(优：兼容性好；缺：需要清除浮动)<br>2、position:absolute(优：布局快；缺：兄弟元素都需要脱离文档流处理，可使用性差)<br>3、flex(比较完美)<br>4、table、table-cell(易处理；其中一个单元格高度增长时，其余也会跟着增长)<br>5、grid</p><p>background的设置顺序<br>background:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;</p><p>:last-child<br>匹配父元素的最后一个元素</p><p>position:fixed宽高受父级元素影响问题<br>如果父级元素使用了transform，则其position为fixed的子元素设置的宽高受父元素影响</p><p>touch-action<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a><br><a href="https://www.zhangxinxu.com/wordpress/2018/07/chrome-safari-touchmove-preventdefault-treated-as-passive/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2018/07/chrome-safari-touchmove-preventdefault-treated-as-passive/</a></p><p>移动端设置cursor: pointer时，点击元素会有背景色<br>设置元素*{-webkit-tap-highlight-color: transparent; }</p><p>图片上下排列3px间隔的消除方法<br>给居上的图片加vertical-align: top<br>给居上的图片加display: block<br>设置font-size: 0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h4&gt;&lt;p&gt;BEM(block element modifier)&lt;/p&gt;
&lt;h4 id=&quot;记录的知识点&quot;&gt;&lt;a href=&quot;#记录的知
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>屏幕适配</title>
    <link href="https://tragiclife.github.io/2018/12/08/front-end/css/screen-adaptation/"/>
    <id>https://tragiclife.github.io/2018/12/08/front-end/css/screen-adaptation/</id>
    <published>2018-12-08T00:34:18.000Z</published>
    <updated>2018-12-07T17:12:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见移动web适配方法"><a href="#常见移动web适配方法" class="headerlink" title="常见移动web适配方法"></a>常见移动web适配方法</h4><h5 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h5><p>960px/1000px居中<br>盒子模型，定高，定宽<br>display:inline-block</p><h5 id="移动web"><a href="#移动web" class="headerlink" title="移动web:"></a>移动web:</h5><p>定高，宽度百分比<br>flex<br>Media Query(媒体查询)</p><h4 id="Media-Query"><a href="#Media-Query" class="headerlink" title="Media Query"></a>Media Query</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@media 媒体类型 and (媒体特性)</span><br><span class="line">如: @media screen and (max-width:320px)</span><br><span class="line">可在标签上引用</span><br><span class="line">&lt;link href=&quot;&quot; media=&quot;screen and (max-width:320px)&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="rem原理和简介"><a href="#rem原理和简介" class="headerlink" title="rem原理和简介"></a>rem原理和简介</h4><p>字体单位<br>值根据html根元素大小而定，同样可以作为宽度、高度等单位<br>适配原理<br>将px替换成rem，动态修改html的font-size适配<br>兼容性<br>IOS6以上、Android2.1以上</p><h4 id="js动态修改font-size"><a href="#js动态修改font-size" class="headerlink" title="js动态修改font-size"></a>js动态修改font-size</h4><p>let htmlWidth = document.docElement.clientWidth || document.body.clientWidth<br>let $html = document.querySelector(‘html’)<br>$html.style.fontSize = htmWidth / 3.75 + ‘px’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;常见移动web适配方法&quot;&gt;&lt;a href=&quot;#常见移动web适配方法&quot; class=&quot;headerlink&quot; title=&quot;常见移动web适配方法&quot;&gt;&lt;/a&gt;常见移动web适配方法&lt;/h4&gt;&lt;h5 id=&quot;PC&quot;&gt;&lt;a href=&quot;#PC&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
      <category term="rem" scheme="https://tragiclife.github.io/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>深入overflow</title>
    <link href="https://tragiclife.github.io/2018/12/08/front-end/css/deep-into-overflow/"/>
    <id>https://tragiclife.github.io/2018/12/08/front-end/css/deep-into-overflow/</id>
    <published>2018-12-07T22:28:51.000Z</published>
    <updated>2018-12-07T17:15:17.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><ol><li>overfloe-x、overflow-y(IE8+)<br>如果overflow-x与overflow-y相同，则等同于overflow；如果两个设置不同，切其中一个设置为visible则visible会被重置为auto</li><li>表格元素无效，需要先设置table-layout:fixed</li><li>overflow:auto时，chrome下能显示padding-bottom，而其他浏览器都不显示padding-bottom</li></ol><p>无论什么浏览器，默认滚动条都来自html标签，而不是body标签</p><p><strong>获取滚动高度</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chrome:document.body.scrollTop</span><br><span class="line">其他浏览器:document.documentElement.scrollTop</span><br></pre></td></tr></table></figure></p><p>滚动条的宽度等于外部容器减去内部元素的clientWidth</p><p>出现滚动条时，修复水平居中的元素跳动问题</p><ol><li>设置html{overflow-y:scroll}</li><li>container{padding-left:calc(100vw - 100%)}，既设置滚动条的宽度，适用于IE9+及其他浏览器</li></ol><p>格式化上下文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow:auto/scroll/hidden</span><br></pre></td></tr></table></figure></p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>清除浮动影响overflow:hidden;_zoom:1;</li><li>避免margin穿透问题</li><li>两栏自适应布局</li></ol><h4 id="BFC属性"><a href="#BFC属性" class="headerlink" title="BFC属性"></a>BFC属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 自适应，但溢出不可见，限制了应用场景</span><br><span class="line">overflow:hidden</span><br><span class="line"></span><br><span class="line">// 包裹性+破坏性，无法自适应，块状浮动布局</span><br><span class="line">float+float</span><br><span class="line"></span><br><span class="line">position:absolute  </span><br><span class="line"></span><br><span class="line">// 包裹性，无法自适应，IE6、7不识别</span><br><span class="line">display:inline-block</span><br><span class="line"></span><br><span class="line">// 包裹性，无溢出特性，绝对宽度也能自适应</span><br><span class="line">display:table-cell</span><br></pre></td></tr></table></figure><p>两栏自适应布局<br>display:table-cell;width:2000px;//IE8+ BFC特性<br><em>display:inline-block;</em>width:auto;//IE7- 伪BFC特性</p><p><strong>元素的父元素没有设置position:absolute/relative/fixed时，父元素的overflow无法包裹住position:absolute的子元素</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">让overflow起作用例子：</span><br><span class="line">// 父元素设置</span><br><span class="line">overflow:hidden;</span><br><span class="line">position:relative</span><br><span class="line">// 子元素设置</span><br><span class="line">position:absolute</span><br><span class="line"></span><br><span class="line">div  overflow:hidden</span><br><span class="line">  div  display:relative</span><br><span class="line">    div  position:absolute</span><br><span class="line"></span><br><span class="line">div  overflow:hidden</span><br><span class="line">  div  transform:translate(0)</span><br></pre></td></tr></table></figure></p><p><strong>overflow失效妙用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 父元素</span><br><span class="line">height:0;</span><br><span class="line">overflow:hidden;</span><br><span class="line">text-align:right;</span><br><span class="line">// 子元素</span><br><span class="line">position:absolute</span><br></pre></td></tr></table></figure></p><p>resize拉伸(horizontal、vertical、both)<br>元素的overflow不能是visible</p><h4 id="文字溢出出省略号"><a href="#文字溢出出省略号" class="headerlink" title="文字溢出出省略号"></a>文字溢出出省略号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 单行省略</span><br><span class="line">width:100px;</span><br><span class="line">white-space:nowrap;</span><br><span class="line">text-overflow:ellipisis;</span><br><span class="line">overflow:hidden;</span><br><span class="line"></span><br><span class="line">// 多行省略号</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 2; // 显示的行数</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><p>IE7下，当宽度或高度设置为100%时，会出现滚动条<br>IE7解决文字越多，padding越大问题，设置overflow:visible</p><p>锚点定位<br>锚点定位的触发<br>url地址中的锚链与锚点元素<br>可focus的锚点元素处于focus态</p><p>作用<br>快速定位<br>选项卡技术</p><p>应用场景<br>单页应用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;相关问题&quot;&gt;&lt;a href=&quot;#相关问题&quot; class=&quot;headerlink&quot; title=&quot;相关问题&quot;&gt;&lt;/a&gt;相关问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;overfloe-x、overflow-y(IE8+)&lt;br&gt;如果overflow-x与overflow-y相同
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入float</title>
    <link href="https://tragiclife.github.io/2018/12/07/front-end/css/deep-into-float/"/>
    <id>https://tragiclife.github.io/2018/12/07/front-end/css/deep-into-float/</id>
    <published>2018-12-06T21:39:30.000Z</published>
    <updated>2018-12-06T14:59:32.900Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设置初衷"><a href="#设置初衷" class="headerlink" title="设置初衷"></a>设置初衷</h4><p>为了文字的环绕<br>float元素会产生BFC(块级格式化上下文，block formatting context)</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ol><li><p>包裹具有包裹性的相关属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display:inline-block/table-cell</span><br><span class="line">position:absolute/fixed/sticky</span><br><span class="line">overflow:hidden/scroll</span><br></pre></td></tr></table></figure></li><li><p>破坏(父元素塌陷)<br>具有破坏性的相关属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">display:none</span><br><span class="line">position:absolute/fixed/sticky</span><br></pre></td></tr></table></figure></li></ol><h4 id="能形成BFC的样式"><a href="#能形成BFC的样式" class="headerlink" title="能形成BFC的样式"></a>能形成BFC的样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">float:left/right</span><br><span class="line">position:absolute/fixed</span><br><span class="line">overflow:hidden/scroll(IE7+)</span><br><span class="line">display:inline-block/table-cell(IE8+)</span><br><span class="line">width/height/zoom:1...(IE6/IE7)</span><br></pre></td></tr></table></figure><h4 id="清除浮动-较佳使用"><a href="#清除浮动-较佳使用" class="headerlink" title="清除浮动(较佳使用)"></a>清除浮动(较佳使用)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after&#123;content:&apos;&apos;;display:table;clear:both;&#125;</span><br><span class="line">.clesrfix&#123;*zoom:1;&#125;  //IE6、7</span><br><span class="line">应用于包含浮动元素的父元素上</span><br></pre></td></tr></table></figure><p>浮动与两侧皆适应的流体布局<br>display:table-cell;<em>display:inline-block;<br>width:2000px;</em>width:auto</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;设置初衷&quot;&gt;&lt;a href=&quot;#设置初衷&quot; class=&quot;headerlink&quot; title=&quot;设置初衷&quot;&gt;&lt;/a&gt;设置初衷&lt;/h4&gt;&lt;p&gt;为了文字的环绕&lt;br&gt;float元素会产生BFC(块级格式化上下文，block formatting context)&lt;/p
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入border</title>
    <link href="https://tragiclife.github.io/2018/12/06/front-end/css/deep-into-border/"/>
    <id>https://tragiclife.github.io/2018/12/06/front-end/css/deep-into-border/</id>
    <published>2018-12-05T23:16:00.000Z</published>
    <updated>2018-12-06T13:13:36.670Z</updated>
    
    <content type="html"><![CDATA[<p>border-style为dashed时，不同浏览器下实线和空白区域的比例不同</p><p>dotted<br>形状不同</p><p>当border-color没有指定颜色时，默认使用color作为边框颜色，类似的还有box-shadow,text-shadow ，outline</p><p>让背景图固定距离右侧50px<br>border-right:50px solid transparent<br>background-position:100% 40px </p><p>投影(元素不可见时该属性也是不可见的)<br>filter:drop-shadow(20px 0 #ff8040)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;border-style为dashed时，不同浏览器下实线和空白区域的比例不同&lt;/p&gt;
&lt;p&gt;dotted&lt;br&gt;形状不同&lt;/p&gt;
&lt;p&gt;当border-color没有指定颜色时，默认使用color作为边框颜色，类似的还有box-shadow,text-shadow ，ou
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入padding</title>
    <link href="https://tragiclife.github.io/2018/12/05/front-end/css/deep-into-padding/"/>
    <id>https://tragiclife.github.io/2018/12/05/front-end/css/deep-into-padding/</id>
    <published>2018-12-04T21:37:28.000Z</published>
    <updated>2018-12-05T16:28:53.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="padding是否生效"><a href="#padding是否生效" class="headerlink" title="padding是否生效"></a>padding是否生效</h4><h5 id="对于block水平元素"><a href="#对于block水平元素" class="headerlink" title="对于block水平元素"></a>对于block水平元素</h5><ol><li>padding值过大，一定会影响尺寸</li><li>width非auto，padding一定影响尺寸</li><li>width为auto或box-sizing为border-box，同时padding值没有过大，不影响尺寸</li></ol><h5 id="对于inline水平元素"><a href="#对于inline水平元素" class="headerlink" title="对于inline水平元素"></a>对于inline水平元素</h5><p>水平padding影响尺寸，垂直padding不影响尺寸，但是会影响背景色(占据空间)</p><h4 id="支持的属性值"><a href="#支持的属性值" class="headerlink" title="支持的属性值"></a>支持的属性值</h4><ol><li>不支持负值</li><li>百分比根据宽度计算(如果设置50%则为一个正方形)</li><li>inline元素的padding：同样相对于宽度计算，默认的宽度高度细节有差异，padding会断行</li></ol><blockquote><p>inline元素的垂直padding会让让空白节点显现，既规范中的strut，可以通过font-size:0去除</p></blockquote><p>ol/ul标签内置padding-left是以px为单位的，如果字号很小，间距就会很开；如果字号很大，就会跑到容器外面<br>input、textarea、button都有内置padding<br>在firefox下设置button的padding为0时依然有padding值，通过设置button::-moz-focus-inner{padding:0}。<br>IE7下文字越多，button的padding值越大，通过设置button{overflow:visiable;}去除。<br>可访问性隐藏：将元素设置absolute，定位到看不见的地方，或者设置z-index为-1隐藏在背景之下。<br>可通过使用label来代替button<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id＝&quot;btn&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;label for＝&quot;btn&quot;&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure></p><p>通过background-clip:content-box与padding结合，实现border与内容区域之间空白的效果</p><h4 id="如何得到一个正方形"><a href="#如何得到一个正方形" class="headerlink" title="如何得到一个正方形"></a>如何得到一个正方形</h4><p><style>.square-container{width: 50px;height: 50px;}.square {width: 100%;padding-top: 100%;background-color: blue;}</style></p><p><div class="square-container"><div class="square"></div></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.square-container&#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.square &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  padding-top: 100%;</span><br><span class="line">  background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;square-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;square&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;padding是否生效&quot;&gt;&lt;a href=&quot;#padding是否生效&quot; class=&quot;headerlink&quot; title=&quot;padding是否生效&quot;&gt;&lt;/a&gt;padding是否生效&lt;/h4&gt;&lt;h5 id=&quot;对于block水平元素&quot;&gt;&lt;a href=&quot;#对于bloc
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入margin</title>
    <link href="https://tragiclife.github.io/2018/12/04/front-end/css/deep-into-margin/"/>
    <id>https://tragiclife.github.io/2018/12/04/front-end/css/deep-into-margin/</id>
    <published>2018-12-03T22:42:01.000Z</published>
    <updated>2018-12-05T15:14:35.578Z</updated>
    
    <content type="html"><![CDATA[<p>设置元素的外边距，允许使用负值，适用于没有设置宽高的普通block元素，既非float、absolute/fixed、inline、table-cell元素。</p><h4 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 设置一个值，相当于四个方向的外边距都为10px</span><br><span class="line">margin: 10px;</span><br><span class="line"></span><br><span class="line">// 设置两个值，相当于设置上下、左右的外边距，即上下为10px，左右为5px</span><br><span class="line">margin: 10px 5px;</span><br><span class="line"></span><br><span class="line">// 设置三个值，相当于设置上、左右、下的外边距，即上为10px，左右为5px，下为1px</span><br><span class="line">margin: 10px 5px 1px;</span><br><span class="line"></span><br><span class="line">// 设置四个值，相当于设置上、右、下、左的外边距，即上为10px，右为5px，下为2px，左为1px</span><br><span class="line">margin: 10px 5px 2px 1px;</span><br></pre></td></tr></table></figure><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>可以改变元素尺寸</li><li>适用于没有设置宽高的普通block元素，既非float、absolute/fixed、inline、table-cell元素。</li></ul><h4 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h4><p>普通元素的百分比margin都是相对于容器的宽度计算的<br>绝对定位元素的百分比margin是相对于第一个定位祖先元素（relative、absolute、fixed）的宽度计算的。</p><h4 id="margin重叠"><a href="#margin重叠" class="headerlink" title="margin重叠"></a>margin重叠</h4><p>margin重叠特性只对block元素(除float和absolute)起作用，只发生在垂直方向上(writing-mode设置可变为水平方向)</p><h4 id="重叠的三种情境"><a href="#重叠的三种情境" class="headerlink" title="重叠的三种情境"></a>重叠的三种情境</h4><ol><li>相邻的兄弟元素</li><li>父级元素和第一个或最后一个子元素</li><li>空的block元素正正取大值，正负值相加，负负最负值</li></ol><h4 id="实现水平垂直居中"><a href="#实现水平垂直居中" class="headerlink" title="实现水平垂直居中"></a>实现水平垂直居中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 元素宽高固定</span><br><span class="line">position:absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">margin-top: -50px;</span><br><span class="line">margin-left: -100px;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 200px;</span><br></pre></td></tr></table></figure><h4 id="负值的应用场景"><a href="#负值的应用场景" class="headerlink" title="负值的应用场景"></a>负值的应用场景</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// margin负值下的两端对齐</span><br><span class="line">ul &#123;</span><br><span class="line">  margin-right:-20px;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  margin-right:20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// margin负值下的等高布局</span><br><span class="line">div &#123;</span><br><span class="line">  margin-bottom:-600px;</span><br><span class="line">  padding-bottom:600px;</span><br><span class="line">&#125;</span><br><span class="line">// margin负值下的两栏自适应布局</span><br></pre></td></tr></table></figure><h4 id="margin失效情形"><a href="#margin失效情形" class="headerlink" title="margin失效情形"></a>margin失效情形</h4><ol><li>inline水平元素的垂直margin无效</li><li>margin重叠</li><li>display:table-cell等</li><li>position:absolute;当其父元素设置为relative时会生效</li><li>前一个元素float以后，后一个元素的margin-left要大于前一个元素的宽度时才会生效</li><li>内联特性导致无效</li></ol><h4 id="新属性值"><a href="#新属性值" class="headerlink" title="新属性值"></a>新属性值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// (一开始相当于margin-left):文档流开始的方向left</span><br><span class="line">margin-start</span><br><span class="line"></span><br><span class="line">// 相当于margin-top</span><br><span class="line">margin-before</span><br><span class="line"></span><br><span class="line">// 相当于margin-bottom</span><br><span class="line">margin-after</span><br><span class="line"></span><br><span class="line">// 重叠效果</span><br><span class="line">margin-collapse</span><br><span class="line">可选值：collapse(默认重叠) | discard(取消margin效果) | separate(不重叠)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设置元素的外边距，允许使用负值，适用于没有设置宽高的普通block元素，既非float、absolute/fixed、inline、table-cell元素。&lt;/p&gt;
&lt;h4 id=&quot;设置方式&quot;&gt;&lt;a href=&quot;#设置方式&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
</feed>
