<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薛鸿杰的博客</title>
  <icon>https://www.gravatar.com/avatar/4f853191bd7c2a6954041f3c64c97642</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tragiclife.github.io/"/>
  <updated>2019-01-31T14:00:12.016Z</updated>
  <id>https://tragiclife.github.io/</id>
  
  <author>
    <name>薛鸿杰</name>
    <email>xuehongjiej@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux</title>
    <link href="https://tragiclife.github.io/back-end/linux/linux/"/>
    <id>https://tragiclife.github.io/back-end/linux/linux/</id>
    <published>2019-01-31T21:58:39.000Z</published>
    <updated>2019-01-31T14:00:12.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li></ul><p><strong>rm(移除文件或目录)</strong></p><ul><li>f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>i ：互动模式，在删除前会询问使用者是否动作</li><li>r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p><strong>查看文件的安装版本</strong></p><p>rpm -qa 文件名 </p><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p><strong>检查文件系统的磁盘空间占用情况</strong></p><p>df [-ahikHTm] [目录或文件名]</p><ul><li>a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>k ：以 KBytes 的容量显示各文件系统；</li><li>m ：以 MBytes 的容量显示各文件系统；</li><li>h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；<br>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p><strong>查看文件安装所在路径</strong></p><p>whereis node</p><p><strong>查看运行文件所在路径</strong></p><p>which node</p><h2 id="Centos7安装nginx"><a href="#Centos7安装nginx" class="headerlink" title="Centos7安装nginx"></a>Centos7安装nginx</h2><p><strong>安装nginx环境</strong></p><ol><li>yum install -y gcc-c++</li><li>yum install -y pcre pcre-devel</li><li>yum install -y zlib zlib-devel</li><li>yum install -y openssl openssl-devel</li></ol><blockquote><p>安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc</p></blockquote><blockquote><p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括perl兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。pcre-devel是使用pcre开发的一个二次开发库。nginx也需要此库。</p></blockquote><blockquote><p>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p></blockquote><blockquote><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</p></blockquote><p><strong>编译安装(路径可根据个人需求进行修改)</strong></p><ol><li>cd /usr/local</li><li>下载nginx: wget <a href="http://nginx.org/download/nginx-1.14.1.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.14.1.tar.gz</a></li><li>解压nginx: tar zxvf nginx-1.14.1.tar.gz</li><li>进入解压目录: cd nginx-1.14.1</li><li>设置安装目录和ssl配置: ./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module</li><li>安装nginx: make &amp;&amp; make install</li><li>进入nginx目录: cd /usr/local/nginx/sbin</li><li>启动服务: ./nginx</li></ol><blockquote><p>ssl证书文件需要放在nginx/conf下面</p></blockquote><p><a href="https://www.cnblogs.com/zhanghaoyong/p/7737536.html" target="_blank" rel="noopener">例子</a><br><a href="https://blog.csdn.net/u013144287/article/details/78408001" target="_blank" rel="noopener">例子2</a></p><p><strong>nginx常用命令</strong></p><ul><li>nginx 启动</li><li>nginx -s reload 重启</li><li>nginx -s quit 关闭</li></ul><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><p><strong>nginx: [emerg] the “ssl” parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;处理目录的常用命令&quot;&gt;&lt;a href=&quot;#处理目录的常用命令&quot; class=&quot;headerlink&quot; title=&quot;处理目录的常用命令&quot;&gt;&lt;/a&gt;处理目录的常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ls: 列出目录&lt;/li&gt;
&lt;li&gt;cd：切换目录&lt;/li&gt;
&lt;li&gt;p
      
    
    </summary>
    
    
      <category term="linux" scheme="https://tragiclife.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://tragiclife.github.io/front-end/tools/webpack/"/>
    <id>https://tragiclife.github.io/front-end/tools/webpack/</id>
    <published>2019-01-24T23:21:54.000Z</published>
    <updated>2019-02-04T15:46:53.553Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noopener">api</a></p><h2 id="webpack打包模块的源代码"><a href="#webpack打包模块的源代码" class="headerlink" title="webpack打包模块的源代码"></a>webpack打包模块的源代码</h2><ol><li>把所有模块的代码放入到函数中，用一个数组保存起来</li><li>根据require时传入的数组索引，能知道需要哪一段代码</li><li>从数组中，根据索引取出包含我们代码的函数</li><li>执行该函数，传入一个对象 module.exports</li><li>我们的代码，按照约定，正好是用module.exports = ‘’进行赋值</li><li>调用函数结束后，module.exports从原来的空对象，就有值了</li><li>最终return module.exports作为require函数的返回值</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口文件</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: &apos;./main.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 编译后文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    // 指定产出的目录</span><br><span class="line">    path: path.resolve(&apos;./dist&apos;),</span><br><span class="line">    // 指定文件名</span><br><span class="line">    filename: &apos;build.js&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: true, // 是否监听变动</span><br><span class="line">  module: &#123;</span><br><span class="line">    // webpack后面版本可以叫做rules</span><br><span class="line">    loaders: [</span><br><span class="line">      // 处理css</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/,</span><br><span class="line">        loader: &apos;style-loader!css-loader&apos;</span><br><span class="line">      &#125;, </span><br><span class="line">      // 小于限制范围则生成base64到build.js中，大于则生成图片</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.(jpg|jpeg|png|gif|svg)$/,</span><br><span class="line">        loader: &apos;url-loader?limit=1024&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 处理less文件</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.less$/,</span><br><span class="line">        loader: &apos;style-loader!css-loader!less-loader&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 处理ES6,7,8</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.js$/,</span><br><span class="line">        loader: &apos;babel-loader&apos;,</span><br><span class="line">        exclude: /node_modules/, // 不打包node_modules目录下的文件</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [&apos;env&apos;], // 指定处理关键字</span><br><span class="line">          plugins: [&apos;transform-runtime&apos;], // 处理函数</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 处理.vue文件</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.vue$/,</span><br><span class="line">        loader: &apos;vue-loader&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &apos;./src/index.html&apos;, // 参照物</span><br><span class="line">      inject: true, // 是否添加到html，默认为true</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    // 自动解析扩展，能够使用户在引入模块时不带扩展</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    // 别名</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;@&apos;: path.join(__dirname, &apos;..&apos;, dir)(&apos;src&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>图片转成base64时，大小会增加图片的三分之一，即如果图片为9K，打包后build.js增加12K的大小</p></blockquote><h3 id="webpack快捷命令"><a href="#webpack快捷命令" class="headerlink" title="webpack快捷命令"></a>webpack快捷命令</h3><ul><li><code>--config webpack.dev.config.js</code> 指定编译时要运行的配置文件</li><li><code>--watch</code> 监听文件改变</li><li><code>--process</code> 显示编译进度</li></ul><h3 id="webpack-dev-server快捷命令"><a href="#webpack-dev-server快捷命令" class="headerlink" title="webpack-dev-server快捷命令"></a>webpack-dev-server快捷命令</h3><ul><li><code>--open</code> 自动打开浏览器</li><li><code>--hot</code> 热替换，不刷新的情况下替换，主要用于css的变更</li><li><code>--inline</code> 自动刷新</li><li><code>--port 8888</code> 指定端口</li></ul><h3 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">  new webpack.ProvidePlugin(&#123;</span><br><span class="line">    $:&apos;jquery&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="scss文件提取到独立文件-loader中的配置"><a href="#scss文件提取到独立文件-loader中的配置" class="headerlink" title="scss文件提取到独立文件(loader中的配置)"></a>scss文件提取到独立文件(loader中的配置)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExtractTextPlugin.extract(&#123;fallback:&apos;style-loader&apos;,use:&apos;css-loader!postcss-loader!sass-loader&apos;&#125;)</span><br><span class="line">ExtractTextPlugin.extract(&#123;fallback:&apos;style-loader&apos;,use:[&apos;css-loader&apos;, &#123;loader: &apos;postcss-loader&apos;, options: &#123;sourceMap: true&#125;&#125;, &apos;sass-loader&apos;]&#125;)</span><br></pre></td></tr></table></figure><h3 id="scss文件提取到独立文件-plugins中的配置"><a href="#scss文件提取到独立文件-plugins中的配置" class="headerlink" title="scss文件提取到独立文件(plugins中的配置)"></a>scss文件提取到独立文件(plugins中的配置)</h3><p>new ExtractTextPlugin(‘styles.[contentHash:8].css’)</p><h3 id="vue的scss样式提取到独立文件"><a href="#vue的scss样式提取到独立文件" class="headerlink" title="vue的scss样式提取到独立文件"></a>vue的scss样式提取到独立文件</h3><p>options:{loaders:{scss:ExtractTextPlugin.extract({fallback:’vue-style-loader’,use:’css-loader!postcss-loader!sass-loader})}}</p><p>使用sourcemap才可以在浏览器中调试</p><h3 id="使用全局变量"><a href="#使用全局变量" class="headerlink" title="使用全局变量"></a>使用全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;test: resolve(&apos;src/utils/index&apos;),</span><br><span class="line">use:[&#123;</span><br><span class="line">loader:&apos;expose-loader&apos;,</span><br><span class="line">options: &apos;Utils&apos; //全局变量名</span><br><span class="line">&#125;]&#125;</span><br></pre></td></tr></table></figure><p>设置路径~assets相当于src/assets</p><p>config/index.js文件中的assetsPublicPath属性需要根据服务器的路径来进行设置<br>如果后台服务器的路径不是 / ，需要设置build.assetsPublicPath属性，<br>如：后台路径为<a href="http://localhost:4100/pl-mls/car-run-activity.html，则设置该值为pl-mls/" target="_blank" rel="noopener">http://localhost:4100/pl-mls/car-run-activity.html，则设置该值为pl-mls/</a><br>如果mode为hash，则不需要修改vue-router的配置<br>如果mode为history，需要在vue-router中设置base为/pl-mls/，dev.assetsPublicPath为’/‘</p><h2 id="hash和chunkhash的区别"><a href="#hash和chunkhash的区别" class="headerlink" title="hash和chunkhash的区别"></a>hash和chunkhash的区别</h2><ul><li>hash:整个应用对应同一个hash；不利于缓存</li><li>chunkhash:根据内容计算所得，每个entry单独对应一个hash；上线后无改动的文件不会失去缓存</li></ul><h2 id="常用loader"><a href="#常用loader" class="headerlink" title="常用loader"></a>常用loader</h2><ul><li>css-loader，读取.css文件的内容</li><li>style-loader，将读取到的css内容插入到style标签</li><li>file-loader，将图片文件提取出来</li><li>url-loader(依赖file-loader)，将图片转为base64</li></ul><p>devtool<br>使用’#cheap-module-eval-source-map’</p><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">config.devServer:&#123;</span><br><span class="line">  port:8080, // 端口号</span><br><span class="line">  host: &apos;0.0.0.0&apos;, // 地址</span><br><span class="line">  overlay:&#123;</span><br><span class="line">    errors: true // 错误提示</span><br><span class="line">  &#125;,</span><br><span class="line">  open: true, // 自动打开浏览器</span><br><span class="line">  hot: true, // 热加载，局部修改内容</span><br><span class="line">  historyFallback: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">config.plugins.push(</span><br><span class="line">  new webpack.HotModuleReplacementPlugin() // 配合hot使用</span><br><span class="line">  new webpack.NoEmitOnErrorsPlugin() // 减少不必要的信息展示</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="提取第三方资源到单独文件"><a href="#提取第三方资源到单独文件" class="headerlink" title="提取第三方资源到单独文件"></a>提取第三方资源到单独文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  vendor: [&apos;vue&apos;]</span><br><span class="line">&#125;</span><br><span class="line">config.plugins.push(</span><br><span class="line">  new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: &apos;vendor&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h2><h3 id="查看项目打包-webpack-bundle-analyzer"><a href="#查看项目打包-webpack-bundle-analyzer" class="headerlink" title="查看项目打包(webpack-bundle-analyzer)"></a>查看项目打包(webpack-bundle-analyzer)</h3><p>webpack有个插件，可以查看项目一共打了多少包，每个包的体积，每个包里面的包情况。<br>首先下载插件<br><code>npm intall webpack-bundle-analyzer --save-dev</code><br>同时在webpack.config.js配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line">webpackConfig.plugins.push(new BundleAnalyzerPlugin());</span><br></pre></td></tr></table></figure></p><p>在package.json中添加命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;script&quot;: &#123;</span><br><span class="line">  &quot;analyz&quot;: &quot;NODE_ENV=production npm_config_report=true npm run deploy:prod&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="webpack外部扩展"><a href="#webpack外部扩展" class="headerlink" title="webpack外部扩展"></a>webpack外部扩展</h3><p>引入CDN资源<br>需要配置webpack，使其打包的时候不在将这些资源打包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const webpackConfig = &#123;</span><br><span class="line">  name: &apos;client&apos;,</span><br><span class="line">  target: &apos;web&apos;,</span><br><span class="line">  devtool: config.compiler_devtool,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    root: paths.client(),</span><br><span class="line">    extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;, &apos;.json&apos;],</span><br><span class="line">  &#125;,</span><br><span class="line">  externals: &#123;</span><br><span class="line">    &apos;react&apos;: &apos;React&apos;,</span><br><span class="line">    &apos;react-dom&apos;: &apos;ReactDOM&apos;,</span><br><span class="line">    &apos;react-router&apos;: &apos;ReactRouter&apos;,</span><br><span class="line">    &apos;redux&apos;: &apos;Redux&apos;,</span><br><span class="line">    &apos;history&apos;: &apos;History&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p>dll 全称是：dynamic link library（动态链接库）<br>dll方式也就是通过配置，告诉webpack指定库在项目中的位置，从而直接引入，不将其打包在内。<br>上面介绍的方式是将包放到cdn上，build的时候不在引入对应的包；<br>dll方式就是指定包在项目中，build的时候不在打包对应的包，使用的时候引入。<br>webpack通过webpack.DllPlugin与webpack.DllReferencePlugin两个内嵌插件实现此功能。<br>新建webpack.dll.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [&apos;vue&apos;, &apos;vue-router&apos;, &apos;vuex&apos;, &apos;axios&apos;, &apos;vuex-router-sync&apos;, &apos;mint-ui&apos;]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;../static&apos;),</span><br><span class="line">    filename: &apos;[name].dll.js&apos;,</span><br><span class="line">    library: &apos;[name]_library&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.resolve(__dirname, &apos;../[name]-manifest.json&apos;),</span><br><span class="line">      name: &apos;[name]_library&apos;,</span><br><span class="line">      context: __dirname</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>webpack.DllPlugin选项：<br>path：manifest.json文件的输出路径，这个文件会用于后续的业务代码打包；<br>name：dll暴露的对象名，要跟output.library保持一致;<br>context：解析包路径的上下文，这个要跟接下来配置的 webpack.config.js 一致。<br>运行文件<br>运行：webpack –progress –colors –config build/webpack.dll.config.js<br>生成两个文件，一个是打包好的vendor.dll.js，另外一个是vendor-mainifest.json<br>配置webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  new webpack.DllReferencePlugin(&#123;</span><br><span class="line">    context: __dirname,</span><br><span class="line">    manifest: require(&apos;../vendor-manifest.json&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>webpack.DllReferencePlugin的选项中：<br>context：需要跟之前保持一致，这个用来指导webpack匹配manifest.json中库的路径；<br>manifest：用来引入刚才输出的manifest.json文件。<br>生成vendor.dll.js文件后，在index.html中引入<code>&lt;script src=&quot;./static/dll/vendor.dll.js&quot;&gt;&lt;/script&gt;</code></p><p>设置vue-cli打开网址可以通过localhost、本地ip地址访问<br>使用devServer。设置host为0.0.0.0，或者在命令行中加入–host 0.0.0.0，修改open为false，通过opn模块打开网页地址<br>不使用devServer。删除webpack.dev.conf.js文件中的devServer，新建server.js文件，在通过express建立服务器，使用opn打开网页地址</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>zip-webpack-plugin压缩打包后的文件</li></ul><p><strong>安装babel</strong><br>babel-loader babel-core</p><p><strong>遍历获取文件名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function getEntries(dirName)&#123;</span><br><span class="line">  var jsDir＝path.join(srcDir,dirName),</span><br><span class="line">      entriesFiles＝glob.sync(jsDir+&apos;/*/*.js&apos;),</span><br><span class="line">      map＝&#123;&#125;</span><br><span class="line">  entriesFiles.forEach(function()&#123;</span><br><span class="line">    var fileName＝item.slice(item.lastIndexOf(&apos;\/&apos;)+1,item.lastIndexOf(&apos;.&apos;))</span><br><span class="line">    if(process.env.NODE_ENV===&apos;dev&apos;)&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      map[fieName]=item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>‘cross-env’ 不是内部或外部命令，也不是可运行的程序或批处理文件。<br>安装cross-env插件</p><p>cross-env NODE_ENV=test被 new webpack.DefinePlugin({‘process.env’: require(‘../config/dev.env’)}) 覆盖问题<br>使用cross-env NODE_ENV只在编译代码中生效，不在项目代码中生效<br>在config文件夹中新建test.env.js文件，定义其NODE_ENV为test，在调用webpack.DefinePlugin之前判断其process.env.NODE_ENV</p><p>使用node(8.x)版本运行npm install以后，如果切换到node(6.x)版本，build的时候会报错</p><p>使用vux框架，引用swiper插件打包时，ERROR in static/js/vendor.ca6b94cef1413d8d46f1.js from UglifyJs<br>修改引用方式，将swiper改为swiper/dist/js/swiper</p><h2 id="webpack4"><a href="#webpack4" class="headerlink" title="webpack4"></a>webpack4</h2><p><a href="https://www.cnblogs.com/carrotWu/p/8665720.html" target="_blank" rel="noopener">https://www.cnblogs.com/carrotWu/p/8665720.html</a><br><a href="https://juejin.im/entry/5c302140f265da611b587f99" target="_blank" rel="noopener">https://juejin.im/entry/5c302140f265da611b587f99</a></p><p>config/index.js相关说明<br><a href="https://www.cnblogs.com/whkl-m/p/6627864.html" target="_blank" rel="noopener">https://www.cnblogs.com/whkl-m/p/6627864.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://webpack.docschina.org/concepts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;api&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;webpack打包模块的源代码&quot;&gt;&lt;a href=&quot;#webpack打包
      
    
    </summary>
    
    
      <category term="tool" scheme="https://tragiclife.github.io/tags/tool/"/>
    
      <category term="webpack" scheme="https://tragiclife.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://tragiclife.github.io/front-end/tools/git/"/>
    <id>https://tragiclife.github.io/front-end/tools/git/</id>
    <published>2019-01-23T22:08:19.000Z</published>
    <updated>2019-01-24T14:54:56.623Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5c2743f7e51d45673971ce6c" target="_blank" rel="noopener">参考资料</a></p><h2 id="查看、配置用户信息"><a href="#查看、配置用户信息" class="headerlink" title="查看、配置用户信息"></a>查看、配置用户信息</h2><h3 id="设置全局用户信息-用户名和邮件"><a href="#设置全局用户信息-用户名和邮件" class="headerlink" title="设置全局用户信息(用户名和邮件)"></a>设置全局用户信息(用户名和邮件)</h3><p><code>git config --global user.name &quot;xxx&quot;</code><br><code>git config --global user.email &quot;xxx@xx.com&quot;</code></p><h3 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h3><p><code>git config user.name</code><br><code>git config user.email</code></p><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p><code>git config --global alias.st status  用st代替status</code><br><code>git config --global alias.unstage &#39;reset HEAD&#39;</code></p><h3 id="查看配置目录"><a href="#查看配置目录" class="headerlink" title="查看配置目录"></a>查看配置目录</h3><p><code>git config --list --show-origin</code></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="生成git版本库"><a href="#生成git版本库" class="headerlink" title="生成git版本库"></a>生成git版本库</h3><p><code>git init</code></p><h3 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h3><p><code>git clone [url]</code></p><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><p><code>git add &lt;name&gt;</code>-f  强制添加</p><h3 id="提交暂存区文件到仓库区"><a href="#提交暂存区文件到仓库区" class="headerlink" title="提交暂存区文件到仓库区"></a>提交暂存区文件到仓库区</h3><p><code>git commit -m [message]</code>没有加-m时会进入vim，输入:wq回车即可退出</p><h3 id="修改注释-重新"><a href="#修改注释-重新" class="headerlink" title="修改注释(重新)"></a>修改注释(重新)</h3><p><code>git commit -amend</code></p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><p><code>git status</code></p><h3 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h3><p><code>git diff &lt;name&gt;</code></p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p><code>git log</code>加上–pretty=oneline展示一行，输入q退出log</p><h3 id="版本重置"><a href="#版本重置" class="headerlink" title="版本重置"></a>版本重置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^  回退到上一个版本</span><br><span class="line">git reset --hard HEAD^^  回退到上上一个版本</span><br><span class="line">git reset --hard HEAD~100  回退100个版本</span><br><span class="line">git reset --hard 版本号  回退到某个版本</span><br></pre></td></tr></table></figure><p>###查看之前执行的每一次命令<br><code>git reflog</code></p><h3 id="撤销修改-可用于还原本地删除的文件"><a href="#撤销修改-可用于还原本地删除的文件" class="headerlink" title="撤销修改(可用于还原本地删除的文件)"></a>撤销修改(可用于还原本地删除的文件)</h3><p><code>git checkout -- &lt;name&gt;</code></p><h3 id="把暂存区的修改撤销掉-unstage-重新放回工作区"><a href="#把暂存区的修改撤销掉-unstage-重新放回工作区" class="headerlink" title="把暂存区的修改撤销掉(unstage),重新放回工作区"></a>把暂存区的修改撤销掉(unstage),重新放回工作区</h3><p><code>git reset HEAD 文件名</code></p><h3 id="还原单个文件"><a href="#还原单个文件" class="headerlink" title="还原单个文件"></a>还原单个文件</h3><p><code>git reset 提交Id &lt;name&gt;</code><br><code>git checkout -- &lt;name&gt;</code></p><h3 id="删除版本库的文件"><a href="#删除版本库的文件" class="headerlink" title="删除版本库的文件"></a>删除版本库的文件</h3><p><code>git rm &lt;name&gt;</code><br><code>git commit -m &#39;message&#39;</code></p><h3 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h3><p><code>git remote add origin git@github.com:TragicLife/git-demo.git</code></p><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><p><code>git remote rm origin</code></p><h3 id="将本地文件推送到远程仓库"><a href="#将本地文件推送到远程仓库" class="headerlink" title="将本地文件推送到远程仓库"></a>将本地文件推送到远程仓库</h3><p><code>git push -u origin master</code>-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令，<code>git push</code>即可。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="创建dev分支，然后切换到dev分支："><a href="#创建dev分支，然后切换到dev分支：" class="headerlink" title="创建dev分支，然后切换到dev分支："></a>创建dev分支，然后切换到dev分支：</h3><p><code>git checkout -b &lt;name&gt;</code>相当于：<code>git branch &lt;name&gt;</code> <code>git checkout &lt;name&gt;</code></p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p><code>git branch &lt;name&gt;</code></p><h3 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h3><p><code>git checkout &lt;name&gt;</code></p><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><p><code>git branch</code></p><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><p><code>git branch -r</code> // origin/master</p><h3 id="查看本地和远程分支"><a href="#查看本地和远程分支" class="headerlink" title="查看本地和远程分支"></a>查看本地和远程分支</h3><p><code>git branch -a</code></p><h3 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h3><p><code>git merge &lt;name&gt;</code>–no-ff  表示禁用Fast forward，普通模式合并，合并后的历史有分支，能看出来曾经做过合并</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p><code>git branch -d &lt;name&gt;</code><br><code>git branch -D &lt;name&gt;</code>  在没有合并的情况下强制删除</p><h3 id="建立追踪关系，在现有分支和指定的远程分支之间"><a href="#建立追踪关系，在现有分支和指定的远程分支之间" class="headerlink" title="建立追踪关系，在现有分支和指定的远程分支之间"></a>建立追踪关系，在现有分支和指定的远程分支之间</h3><p><code>git branch --set-up-tream [branch] [remote-branc]</code></p><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p><code>git push origin --delete &lt;branchname&gt;</code><br><code>git push origin :&lt;branchname&gt;</code>(推送空分支，相当于删除分支)</p><h2 id="工作现场"><a href="#工作现场" class="headerlink" title="工作现场"></a>工作现场</h2><h3 id="把当前工作现场“储藏”起来"><a href="#把当前工作现场“储藏”起来" class="headerlink" title="把当前工作现场“储藏”起来"></a>把当前工作现场“储藏”起来</h3><p><code>git stash</code></p><h3 id="查看之前存储的工作现场"><a href="#查看之前存储的工作现场" class="headerlink" title="查看之前存储的工作现场"></a>查看之前存储的工作现场</h3><p><code>git stash list</code></p><h3 id="恢复工作现场，恢复后工作现场不会删除"><a href="#恢复工作现场，恢复后工作现场不会删除" class="headerlink" title="恢复工作现场，恢复后工作现场不会删除"></a>恢复工作现场，恢复后工作现场不会删除</h3><p><code>git stash apply</code></p><h3 id="删除工作现场"><a href="#删除工作现场" class="headerlink" title="删除工作现场"></a>删除工作现场</h3><p><code>git stash drop</code></p><h3 id="恢复的同时把stash内容也删了"><a href="#恢复的同时把stash内容也删了" class="headerlink" title="恢复的同时把stash内容也删了"></a>恢复的同时把stash内容也删了</h3><p><code>git stash pop</code></p><h3 id="恢复指定的stash"><a href="#恢复指定的stash" class="headerlink" title="恢复指定的stash"></a>恢复指定的stash</h3><p><code>git stash apply stash@{0}</code></p><h3 id="显示详细信息"><a href="#显示详细信息" class="headerlink" title="显示详细信息"></a>显示详细信息</h3><p><code>git remote -v</code></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p><code>git tag &lt;name&gt;</code><br><code>git tag &lt;name&gt; &lt;commit id&gt;</code>给对应的commit添加标签，-a指定标签名，-m指定说明文字，-s用私钥签名一个标签，签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错</p><h3 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h3><p><code>git tag</code></p><h3 id="查看标签信息"><a href="#查看标签信息" class="headerlink" title="查看标签信息"></a>查看标签信息</h3><p><code>git show &lt;tagname&gt;</code></p><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p><code>git tag -d &lt;tagname&gt;</code></p><h3 id="推送标签到远程"><a href="#推送标签到远程" class="headerlink" title="推送标签到远程"></a>推送标签到远程</h3><p><code>git push origin &lt;tagname&gt;</code></p><h3 id="一次性推送全部尚未推送到远程的本地标签"><a href="#一次性推送全部尚未推送到远程的本地标签" class="headerlink" title="一次性推送全部尚未推送到远程的本地标签"></a>一次性推送全部尚未推送到远程的本地标签</h3><p><code>git push origin -tags</code></p><h3 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h3><p>先删除本地标签<br><code>git tag -d &lt;tagname&gt;</code><br><code>git push origin :refs/tags/&lt;tagname&gt;</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h3><ol><li>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，<br>如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<br><code>ssh-keygen -t rsa -C &quot;用户名&quot;</code></li><li>登陆GitHub，打开“settings”，“SSH and GPG keys”页面：<br>然后，点“New SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub(C:\Users\电脑用户名.ssh)文件的内容</li></ol><h3 id="查看本地ssh文件"><a href="#查看本地ssh文件" class="headerlink" title="查看本地ssh文件"></a>查看本地ssh文件</h3><p><code>cat ~/.ssh/id_rsa.pub</code></p><h3 id="让git显示颜色"><a href="#让git显示颜色" class="headerlink" title="让git显示颜色"></a>让git显示颜色</h3><p><code>git config --global color.ui true</code></p><h3 id="检查-gitignore文件的规则是否写错"><a href="#检查-gitignore文件的规则是否写错" class="headerlink" title="检查.gitignore文件的规则是否写错"></a>检查.gitignore文件的规则是否写错</h3><p><code>git check-ignore</code></p><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><p><code>git config --global credential.helper store</code></p><h3 id="多人协作的工作模式"><a href="#多人协作的工作模式" class="headerlink" title="多人协作的工作模式"></a>多人协作的工作模式</h3><ol><li>首先，可以试图用git push origin branch-name推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</li></ol><h3 id="Linux安装git"><a href="#Linux安装git" class="headerlink" title="Linux安装git"></a>Linux安装git</h3><p><code>yum install git-core</code></p><p>提交若出现冲突，解决冲突后重新add和commit</p><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><p><strong>The authenticity of host ‘github.com (192.30.255.112)’ can’t be established.</strong><br>SSH警告,当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：输入yes回车即可</p><p><strong>failed to push some refs to <a href="mailto:&#39;git@github.com" target="_blank" rel="noopener">&#39;git@github.com</a>:TragicLife/git-demo.git’</strong><br>出现错误的主要原因是github中的README.md文件不在本地代码目录中,可以通过如下命令进行代码合并【注：pull=fetch+merge]<br><code>git pull --rebase origin master</code></p><p><strong>git pull提示“no tracking information”</strong><br>说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream &lt;branch-name&gt; origin/&lt;branch-name&gt;</code></p><p><strong>git pull提示fatal: refusing to merge unrelated histories</strong><br><code>git pull origin master --allow-unrelated-histories</code></p><p><strong>The remote end hung up unexpectedly</strong><br>提交文件过大，可以分批提交</p><p><strong>git both modified</strong><br>修改冲突文件后重新提交</p><p><strong>Updates were rejected because the tip of your current branch is behind</strong><br>更新代码，重新commit提交</p><p><strong>warning: LF will be replaced by CRLF in 文件名.The file will have its original line endings in your working directory.</strong><br><code>git rm -r --cache &lt;name&gt;</code><br><code>git config core.autocrlf false</code><br><code>git add .</code></p><p><strong>error: pathspec ‘Rose’ did not match any file(s) known to git.(分支切换失败)</strong><br><code>git fetch</code><br><code>git checkout &lt;branchname&gt;</code></p><p><strong>git reset –hard HEAD^后显示more?的解决方案</strong><br>这是因为cmd控制台中换行符默认是^，而不是\ ，所以它的more？的意思是问你下一行是否需要再输入，而^ 符号就被当做换行符而被git命令忽略掉了。<br>解决方法有如下几种：<br>加引号：<code>git reset --hard &quot;HEAD^&quot;</code><br>加一个^：<code>git reset --hard HEAD^^</code><br>换成~：<code>git reset --hard HEAD~</code> 或者 <code>git reset --hard HEAD~1</code><br>~ 后面的数字表示回退几次提交，默认是一次</p><p><strong>git pull时报错，Auto packing the repository in background for optimum performance. See “git help gc” for manual housekeeping.</strong><br>运行<code>git gc</code>，然后重新<code>git pull</code></p><p><strong>拉代码进行合并时，进入无法操作的界面</strong><br>输入:q进行退出</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5c2743f7e51d45673971ce6c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;查看、配置用户信息&quot;&gt;&lt;a href=&quot;#查看、配置用
      
    
    </summary>
    
    
      <category term="tool" scheme="https://tragiclife.github.io/tags/tool/"/>
    
      <category term="Git" scheme="https://tragiclife.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="https://tragiclife.github.io/front-end/tools/npm/"/>
    <id>https://tragiclife.github.io/front-end/tools/npm/</id>
    <published>2019-01-20T23:21:54.000Z</published>
    <updated>2019-02-06T14:34:15.169Z</updated>
    
    <content type="html"><![CDATA[<p>NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。</p><h2 id="仓库设置"><a href="#仓库设置" class="headerlink" title="仓库设置"></a>仓库设置</h2><h3 id="设置淘宝仓库"><a href="#设置淘宝仓库" class="headerlink" title="设置淘宝仓库"></a>设置淘宝仓库</h3><p><code>npm config set registry https://registry.npm.taobao.org</code><br><code>npm install --registry=https://registry.npm.taobao.org</code></p><h3 id="设置回默认仓库"><a href="#设置回默认仓库" class="headerlink" title="设置回默认仓库"></a>设置回默认仓库</h3><p><code>npm config set registry https://registry.npmjs.org</code></p><h3 id="解决npm下载慢问题"><a href="#解决npm下载慢问题" class="headerlink" title="解决npm下载慢问题"></a>解决npm下载慢问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm config set disturl https://npm.taobao.org/dist</span><br><span class="line">npm config set electron_mirror https://npm.taobao.org/mirrors/electron/</span><br><span class="line">npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line">npm config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/</span><br></pre></td></tr></table></figure><h2 id="npm-install安装模块"><a href="#npm-install安装模块" class="headerlink" title="npm install安装模块"></a>npm install安装模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install (with no args, in package dir)</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</span><br><span class="line">npm install &lt;tarball file&gt;</span><br><span class="line">npm install &lt;tarball url&gt;</span><br><span class="line">npm install &lt;folder&gt;</span><br></pre></td></tr></table></figure><h2 id="npm简写"><a href="#npm简写" class="headerlink" title="npm简写"></a>npm简写</h2><h3 id="npm-i"><a href="#npm-i" class="headerlink" title="npm i"></a>npm i</h3><p>默认会安装最新版本：<code>common options: [-S|--save|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [--dry-run]</code><br>安装指定版本：<code>npm install gulp@3.9.1</code></p><h3 id="S-–save"><a href="#S-–save" class="headerlink" title="-S, –save"></a>-S, –save</h3><p><code>npm install gulp --save</code> 或 <code>npm install gulp -S</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 生产阶段的依赖</span><br><span class="line">// 安装后会在package.json的dependencies属性中添加响应的文件名和版本</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;gulp&quot;: &quot;^3.9.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-–save-dev"><a href="#D-–save-dev" class="headerlink" title="-D, –save-dev"></a>-D, –save-dev</h3><p><code>npm install gulp --save-dev 或 npm install gulp -D</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 开发阶段的依赖</span><br><span class="line">// 安装包信息将加入到devDependencies，所以开发阶段一般使用它</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;gulp&quot;: &quot;^3.9.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="O-–save-optional"><a href="#O-–save-optional" class="headerlink" title="-O, –save-optional"></a>-O, –save-optional</h3><p><code>npm install gulp --save-optional 或 npm install gulp -O</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 可选阶段的依赖</span><br><span class="line">// 安装包信息将加入到optionalDependencies</span><br><span class="line">package.json 文件的optionalDependencies字段：</span><br><span class="line">&quot;optionalDependencies&quot;: &#123;</span><br><span class="line">  &quot;gulp&quot;: &quot;^3.9.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="E-–save-exact"><a href="#E-–save-exact" class="headerlink" title="-E, –save-exact"></a>-E, –save-exact</h3><p><code>npm install gulp --save-exact 或 npm install gulp -E</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 精确安装指定模块版本</span><br><span class="line">// 输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，可以看出版本号中的^消失了</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;gulp&quot;: &quot;3.9.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="本地安装（local）"><a href="#本地安装（local）" class="headerlink" title="本地安装（local）"></a>本地安装（local）</h3><p><code>npm install gulp</code>，alias: i</p><h3 id="全局安装（global）-使用-g-或-–global"><a href="#全局安装（global）-使用-g-或-–global" class="headerlink" title="全局安装（global）,使用 -g 或 –global"></a>全局安装（global）,使用 -g 或 –global</h3><p><code>npm install gulp -g</code></p><h3 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h3><p><code>npm uninstall</code>，aliases: remove, rm, r, un, unlink<br><code>npm uninstall [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]... [-S|--save|-D|--save-dev|-O|--save-optional]</code></p><p>卸载开发版本的模块<br><code>npm uninstall gulp --save-dev</code></p><h3 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h3><p><code>npm update</code><br><code>npm update [-g] [&lt;pkg&gt;...]</code></p><h3 id="检查模块是否已经过时"><a href="#检查模块是否已经过时" class="headerlink" title="检查模块是否已经过时"></a>检查模块是否已经过时</h3><p><code>npm outdated</code><br><code>npm outdated [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</code><br>此命令会列出所有已经过时的包，可以及时进行包的更新</p><h3 id="查看安装的模块"><a href="#查看安装的模块" class="headerlink" title="查看安装的模块"></a>查看安装的模块</h3><p><code>npm ls</code><br><code>npm ls [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</code></p><h3 id="查看全局安装的模块及依赖"><a href="#查看全局安装的模块及依赖" class="headerlink" title="查看全局安装的模块及依赖"></a>查看全局安装的模块及依赖</h3><p><code>npm ls -g</code></p><h3 id="在项目中引导创建一个package-json文件"><a href="#在项目中引导创建一个package-json文件" class="headerlink" title="在项目中引导创建一个package.json文件"></a>在项目中引导创建一个package.json文件</h3><p><code>npm init</code><br>安装包的信息可保持到项目的package.json文件中，以便后续的其它的项目开发或者他人合作使用。<br><code>npm init [-f|--force|-y|--yes]</code></p><h3 id="查看某条命令的详细帮助"><a href="#查看某条命令的详细帮助" class="headerlink" title="查看某条命令的详细帮助"></a>查看某条命令的详细帮助</h3><p><code>npm help</code><br><code>npm help &lt;term&gt; [&lt;terms..&gt;]</code><br>例如输入<code>npm help install</code>，系统在默认的浏览器或者默认的编辑器中打开本地nodejs安装包的文件/nodejs/node_modules/npm/html/doc/cli/npm-install.html</p><h3 id="查看包-node-modules-的安装路径"><a href="#查看包-node-modules-的安装路径" class="headerlink" title="查看包(node_modules)的安装路径"></a>查看包(node_modules)的安装路径</h3><p><code>npm root</code><br><code>npm root [-g]</code></p><h3 id="管理npm的配置路径"><a href="#管理npm的配置路径" class="headerlink" title="管理npm的配置路径"></a>管理npm的配置路径</h3><p><code>npm config</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm config set &lt;key&gt; &lt;value&gt; [-g|--global]</span><br><span class="line">npm config get &lt;key&gt;</span><br><span class="line">npm config delete &lt;key&gt;</span><br><span class="line">npm config list</span><br><span class="line">npm config edit</span><br><span class="line">npm get &lt;key&gt;</span><br><span class="line">npm set &lt;key&gt; &lt;value&gt; [-g|--global]</span><br></pre></td></tr></table></figure></p><p>对于config这块用得最多应该是设置代理，解决npm安装一些模块失败的问题<br>例如我在公司内网，因为公司的防火墙原因，无法完成任何模块的安装，这个时候设置代理可以解决<br><code>npm config set proxy=http://xxx.com:8080</code><br>又如国内的网络环境问题，某官方的IP可能被和谐了，幸好国内有好心人，搭建了镜像，此时我们简单设置镜像<br><code>npm config set registry=&quot;http://r.cnpmjs.org&quot;</code><br>也可以临时配置，如安装淘宝镜像<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><h3 id="管理模块的缓存"><a href="#管理模块的缓存" class="headerlink" title="管理模块的缓存"></a>管理模块的缓存</h3><p><code>npm cache</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm cache add &lt;tarball file&gt;</span><br><span class="line">npm cache add &lt;folder&gt;</span><br><span class="line">npm cache add &lt;tarball url&gt;</span><br><span class="line">npm cache add &lt;name&gt;@&lt;version&gt;</span><br><span class="line"></span><br><span class="line">npm cache ls [&lt;path&gt;]</span><br><span class="line"></span><br><span class="line">// 清除npm本地缓存</span><br><span class="line">npm cache clean [&lt;path&gt;]</span><br><span class="line">npm cache clean</span><br><span class="line">npm cache clean --force // 强制清除</span><br></pre></td></tr></table></figure></p><h3 id="启动模块"><a href="#启动模块" class="headerlink" title="启动模块"></a>启动模块</h3><p><code>npm start</code><br><code>npm start [-- &lt;args&gt;]</code><br>该命令写在package.json文件scripts的start字段中，可以自定义命令来配置一个服务器环境和安装一系列的必要程序，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;gulp -ws&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时在cmd中输入npm start命令相当于执行gulpfile.js文件自定义的watch和server命令。<br>如果package.json文件没有设置start，则将直接启动node server.js</p><h3 id="停止模块"><a href="#停止模块" class="headerlink" title="停止模块"></a>停止模块</h3><p><code>npm stop</code><br><code>npm stop [-- &lt;args&gt;]</code></p><h3 id="重新启动模块"><a href="#重新启动模块" class="headerlink" title="重新启动模块"></a>重新启动模块</h3><p><code>npm restart</code><br><code>npm restart [-- &lt;args&gt;]</code></p><h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><p><code>npm test</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm test [-- &lt;args&gt;]</span><br><span class="line">npm tst [-- &lt;args&gt;]</span><br><span class="line">该命令写在package.json文件scripts的test字段中，可以自定义该命令来执行一些操作，如</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;gulp release&quot;</span><br><span class="line">&#125;,</span><br><span class="line">此时在cmd中输入npm test命令相当于执行gulpfile.js文件自定义的release命令。</span><br></pre></td></tr></table></figure></p><h3 id="查看模块版本"><a href="#查看模块版本" class="headerlink" title="查看模块版本"></a>查看模块版本</h3><p><code>npm version</code><br><code>npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</code></p><p>‘npm [-v | –version]’ to print npm version<br>‘npm view <pkg> version’ to view a package’s published version<br>‘npm ls’ to inspect current package/dependency versions</pkg></p><h3 id="查看模块的注册信息"><a href="#查看模块的注册信息" class="headerlink" title="查看模块的注册信息"></a>查看模块的注册信息</h3><p><code>npm view</code><br><code>npm view [&lt;@scope&gt;/]&lt;name&gt;[@&lt;version&gt;] [&lt;field&gt;[.&lt;subfield&gt;]...]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看模块的依赖关系</span><br><span class="line">npm view gulp dependencies</span><br><span class="line">查看模块的源文件地址</span><br><span class="line">npm view gulp repository.url</span><br><span class="line">查看模块的贡献者，包含邮箱地址</span><br><span class="line">npm view npm contributors</span><br></pre></td></tr></table></figure></p><h3 id="查看最新版本"><a href="#查看最新版本" class="headerlink" title="查看最新版本"></a>查看最新版本</h3><p><code>npm info vue version</code></p><h3 id="查看所有版本"><a href="#查看所有版本" class="headerlink" title="查看所有版本"></a>查看所有版本</h3><p><code>npm info vue versions</code></p><h2 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h2><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><p><code>npm adduser</code><br><code>npm adduser [--registry=url] [--scope=@orgname] [--always-auth]</code></p><p>发布模板到npm社区前需要先登录，然后再进入发布的操作</p><h3 id="发布模块"><a href="#发布模块" class="headerlink" title="发布模块"></a>发布模块</h3><p><code>npm publish</code><br><code>npm publish [&lt;tarball&gt;|&lt;folder&gt;] [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;]</code></p><h3 id="撤销发布的模块"><a href="#撤销发布的模块" class="headerlink" title="撤销发布的模块"></a>撤销发布的模块</h3><p><code>npm unpublish</code><br><code>npm unpublish &lt;pkg&gt;</code><br>需要加上–force参数</p><h3 id="在发布的包上设置访问级别"><a href="#在发布的包上设置访问级别" class="headerlink" title="在发布的包上设置访问级别"></a>在发布的包上设置访问级别</h3><p><code>npm access</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm access public [&lt;package&gt;]</span><br><span class="line">npm access restricted [&lt;package&gt;]</span><br><span class="line"></span><br><span class="line">npm access grant &lt;read-only|read-write&gt; &lt;scope:team&gt; [&lt;package&gt;]</span><br><span class="line">npm access revoke &lt;scope:team&gt; [&lt;package&gt;]</span><br><span class="line"></span><br><span class="line">npm access ls-packages [&lt;user&gt;|&lt;scope&gt;|&lt;scope:team&gt;]</span><br><span class="line">npm access ls-collaborators [&lt;package&gt; [&lt;user&gt;]]</span><br><span class="line">npm access edit [&lt;package&gt;]</span><br></pre></td></tr></table></figure></p><h2 id="package-json的语法"><a href="#package-json的语法" class="headerlink" title="package.json的语法"></a>package.json的语法</h2><p><a href="http://www.cnblogs.com/PeunZhang/p/5553574.html" target="_blank" rel="noopener">参考链接</a><br><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">英文原版</a></p><p>npm会根据包内容设置一些默认值。</p><ul><li>“scripts”: {“start”: “node server.js”}<br>如果包的根目录有server.js文件，npm会默认将start命令设置为node server.js。</li><li>“scripts”:{“preinstall”: “node-waf clean || true; node-waf configure build”}<br>如果包的根目录有wscript文件，npm会默认将preinstall命令用node-waf进行编译。</li><li>“scripts”:{“preinstall”: “node-gyp rebuild”}<br>如果包的根目录有binding.gyp文件，npm会默认将preinstall命令用node-gyp进行编译。</li><li>“contributors”: […]<br>如果包的根目录有AUTHORS文件，npm会默认逐行按Name <email> (url)格式处理，邮箱和url是可选的。#号和空格开头的行会被忽略。</email></li></ul><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。<br>name是这个东西的名字。注意：<br>不要把node或者js放在名字中。因为你写了package.json它就被假定成为了js，不过你可以用”engine”字段指定一个引擎（见后文）。<br>这个名字会作为在URL的一部分、命令行的参数或者文件夹的名字。任何non-url-safe的字符都是不能用的。<br>这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰。<br>在你爱上你的名字之前，你可能要去npm registry查看一下这个名字是否已经被使用了。<a href="http://registry.npmjs.org/" target="_blank" rel="noopener">http://registry.npmjs.org/</a></p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>version必须能被<a href="https://github.com/isaacs/node-semver" target="_blank" rel="noopener">node-semver</a>解析，它被包在npm的依赖中。（要自己用可以执行npm install semver）<br>可用的“数字”或者“范围”.</p><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>放简介，字符串，方便在npm search中搜索</p><h3 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h3><p>关键字，数组、字符串，方便在npm search中搜索</p><h3 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h3><p>你项目的提交问题的url和（或）邮件地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;url&quot;: &quot;http://github.com/owner/project/issues&quot;, </span><br><span class="line">  &quot;email&quot;: &quot;project@hostname.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="license"><a href="#license" class="headerlink" title="license"></a>license</h3><p>你应该要指定一个许可证，让人知道使用的权利和限制的。<br>最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;license&quot;: &quot;BSD&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你又更复杂的许可条件，或者想要提供给更多地细节，可以这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;licenses&quot;: [&#123;</span><br><span class="line">  &quot;type&quot;: &quot;MyLicense&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://github.com/owner/project/path/to/license&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><p>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么npm docs命令能找到你。<br>这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;repository&quot;: &#123;</span><br><span class="line">  &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://github.com/isaacs/npm.git&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;repository&quot;: &#123;</span><br><span class="line">  &quot;type&quot;: &quot;svn&quot;, </span><br><span class="line">  &quot;url&quot; : &quot;http://v8.googlecode.com/svn/trunk/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>URL应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的url。不应该是一个html的项目页面。因为它是给计算机看的。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>“scripts”是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。<br>参考上面的npm start、npm test命令</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>“config” hash可以用来配置用于包脚本中的跨版本参数。在实例中，如果一个包有下面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;foo&quot;,</span><br><span class="line">  &quot;config&quot;: &#123; &quot;port&quot; : &quot;8080&quot; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后有一个“start”命令引用了npm_package_config_port环境变量，用户可以通过npm config set foo:port 8001来重写他。</p><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>依赖是给一组包名指定版本范围的一个hash。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用tarball或者git URL。<br>请不要将测试或过渡性的依赖放在dependencieshash中。见下文的devDependencies</p><ul><li>version 必须完全和version一致</li><li><blockquote><p>version 必须比version大</p></blockquote></li><li><blockquote><p>=version 同上</p></blockquote></li><li>&lt;version 同上</li><li>&lt;=version 同上</li><li>~version 大约一样</li><li>1.2.x 1.2.0, 1.2.1, 等，但不包括1.3.0</li><li>http://… 见下文’依赖URL’</li><li><ul><li>所有</li></ul></li><li>“” 空，同*</li><li>version1 - version2 同 &gt;=version1 &lt;=version2.</li><li>range1 || range2 二选一。</li><li>git… 见下文’依赖Git URL’</li><li>user/repo 见下文’GitHub URLs’</li></ul><p>比如下面都是合法的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;foo&quot;: &quot;1.0.0 - 2.9999.9999&quot;,</span><br><span class="line">    &quot;bar&quot;: &quot;&gt;=1.0.2 &lt;2.1.2&quot;,</span><br><span class="line">    &quot;baz&quot;: &quot;&gt;1.0.2 &lt;=2.3.4&quot;,</span><br><span class="line">    &quot;boo&quot;: &quot;2.0.1&quot;,</span><br><span class="line">    &quot;qux&quot;: &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;,</span><br><span class="line">    &quot;asd&quot;: &quot;http://asdf.com/asdf.tar.gz&quot;,</span><br><span class="line">    &quot;til&quot;: &quot;~1.2&quot;,</span><br><span class="line">    &quot;elf&quot;: &quot;~1.2.3&quot;,</span><br><span class="line">    &quot;two&quot;: &quot;2.x&quot;,</span><br><span class="line">    &quot;thr&quot;: &quot;3.3.x&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h3><p>如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。<br>在这种情况下，最好将这些附属的项目列在devDependencies中。<br>这些东西会在执行npm link或者npm install的时候初始化，并可以像其他npm配置参数一样管理。<br>对于非特定平台的构建步骤，比如需要编译CoffeeScript，可以用prepublish脚本去实现，并把它依赖的包放在devDependency中。（译者注：prepublish定义了在执行npm publish的时候先行执行的脚本）<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;name&quot;: &quot;ethopia-waza&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;a delightfully fruity coffee varietal&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.2.3&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;coffee-script&quot;: &quot;~1.6.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;prepublish&quot;: &quot;coffee -o lib/ -c src/waza.coffee&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;main&quot;: &quot;lib/waza.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>prepublish脚本会在publishing前运行，这样用户就不用自己去require来编译就能使用。并且在开发模式中（比如本地运行npm install）会运行这个脚本以便更好地测试。</p><p>npm list查看模块版本号<br>npm list <pkg></pkg></p><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。<br>语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。</p><ul><li>如果只是修复bug，需要更新Z位。</li><li>如果是新增了功能，但是向下兼容，需要更新Y位。</li><li>如果有大变动，向下不兼容，需要更新X位。</li></ul><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p><strong>Cannot publish over previously published version</strong><br>已撤销的版本无法发布相同的版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。&lt;/p&gt;
&lt;h2 id=&quot;仓库设置&quot;&gt;&lt;a href=&quot;#仓库设置&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="tool" scheme="https://tragiclife.github.io/tags/tool/"/>
    
      <category term="npm" scheme="https://tragiclife.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>HTML快捷生成</title>
    <link href="https://tragiclife.github.io/front-end/html/emmet/"/>
    <id>https://tragiclife.github.io/front-end/html/emmet/</id>
    <published>2019-01-20T23:16:41.000Z</published>
    <updated>2019-01-20T15:20:46.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>html:5 或!：用于HTML5文档类型<br>html:xt：用于XHTML过渡文档类型<br>html:4s：用于HTML4严格文档类型</p><h3 id="添加类、id、属性、文本"><a href="#添加类、id、属性、文本" class="headerlink" title="添加类、id、属性、文本"></a>添加类、id、属性、文本</h3><p>a.bar#foo[href=#]{foo}<br>类：.bar<br>id：#foo<br>属性：[href=#]<br>文本：{foo}</p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p><code>&gt;</code>：子元素符号，表示嵌套的元素<br><code>+</code>：同级标签符号<br><code>^</code>：可以使该符号前的标签提升一行(提升为上级节点)</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>(.foo&gt;h1)+(.bar&gt;h2)</p><h3 id="隐式标签-根据父标签判断子标签"><a href="#隐式标签-根据父标签判断子标签" class="headerlink" title="隐式标签(根据父标签判断子标签)"></a>隐式标签(根据父标签判断子标签)</h3><p>li：用于ul和ol中<br>tr：用于table、tbody、thead和tfoot中<br>td：用于tr中<br>option：用于select和optgroup中</p><h3 id="定义多个元素"><a href="#定义多个元素" class="headerlink" title="定义多个元素"></a>定义多个元素</h3><p>ul&gt;li*3    生成3个li标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;  </span><br><span class="line">  &lt;li&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li&gt;&lt;/li&gt;  </span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><h3 id="定义多个带属性的元素"><a href="#定义多个带属性的元素" class="headerlink" title="定义多个带属性的元素"></a>定义多个带属性的元素</h3><p>ul&gt;li.item$*3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;  </span><br><span class="line">  &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;  </span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>w100生成width:100px<br>p 表示%<br>e 表示 em<br>x 表示 ex</p><h3 id="附加属性"><a href="#附加属性" class="headerlink" title="附加属性"></a>附加属性</h3><p>@f+</p><h3 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h3><p>如果有些缩写你拿不准，Emmet会根据你的输入内容匹配最接近的语法，比如输入ov:h、ov-h、ovh和oh，生成的代码是相同的</p><h3 id="供应商前缀"><a href="#供应商前缀" class="headerlink" title="供应商前缀"></a>供应商前缀</h3><p>在属性前加-w-<br>w 表示 -webkit-<br>m 表示 -moz-<br>s 表示 -ms-<br>o 表示 -o-</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始
      
    
    </summary>
    
    
      <category term="html" scheme="https://tragiclife.github.io/tags/html/"/>
    
      <category term="emmet" scheme="https://tragiclife.github.io/tags/emmet/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler</title>
    <link href="https://tragiclife.github.io/front-end/tools/fiddler/"/>
    <id>https://tragiclife.github.io/front-end/tools/fiddler/</id>
    <published>2019-01-12T00:23:36.000Z</published>
    <updated>2019-01-24T14:55:23.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="界面按钮功能"><a href="#界面按钮功能" class="headerlink" title="界面按钮功能"></a>界面按钮功能</h2><p>Replay   重新发起请求，快捷键R<br>Go  用于断点调试<br>Stream  流切换(按下为流模式，弹起为缓存模式)<br>keep  保留回话数(电脑性能不好的情况下不要选择All sessions)<br>Any Process  限定捕捉的服务<br>Find  查找<br>Save  保存现在的请求，可通过File→Recent Archives选中刚才保存的文件进行还原</p><p>statistics  数据统计<br>inspectors  对请求解包<br>AutoResponder  文件代理<br>Composer  前后端接口联调<br>Log  记录日志<br>Timeline  网站性能分析<br>Willow  </p><h2 id="设置手机抓包"><a href="#设置手机抓包" class="headerlink" title="设置手机抓包"></a>设置手机抓包</h2><p>Tools → Options → HTTPS<br>选中”Decrpt HTTPS traffic”,    Fiddler就可以截获HTTPS请求，选中ignore server certificate errors<br>Tools → Options → Connections<br>选中”Allow remote computers to connect”.  是允许别的机器把HTTP/HTTPS请求发送到Fiddler上来<br>AutoResponder<br>勾选Enable rules和Unmatched requests passthrough<br>打开手机浏览器，输入电脑ip:8888(fiddler端口号)，点击FiddlerRoot certificate进行证书下载<br>IOS需要在通用 → 关于本机 → 证书信任设置，进行证书信任</p><h2 id="抓包时遇到的问题"><a href="#抓包时遇到的问题" class="headerlink" title="抓包时遇到的问题"></a>抓包时遇到的问题</h2><p>1、使用*redir进行服务重定向，需要把localhost改为电脑ip地址苹果手机才能重定向。<br>2、如果抓包时一直443或者1443，删除证书重新下载；如果还是不行，打开命令行输入certmgr.msc，删除个人文件夹里的证书。</p><h2 id="Fiddler命令"><a href="#Fiddler命令" class="headerlink" title="Fiddler命令"></a>Fiddler命令</h2><p>bpu url地址 对请求打断点，可在raw页签修改请求参数和响应结果，不加地址为清除断点<br>bpv 请求类型，对相应请求类型的请求打断点<br>dump 将请求存储到C:\Users\lenovo\Documents\Fiddler2\Captures中</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>Tools→HOSTS选中enable可以修改host</li><li>Alt+q可以切换到命令行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;界面按钮功能&quot;&gt;&lt;a href=&quot;#界面按钮功能&quot; class=&quot;headerlink&quot; title=&quot;界面按钮功能&quot;&gt;&lt;/a&gt;界面按钮功能&lt;/h2&gt;&lt;p&gt;Replay   重新发起请求，快捷键R&lt;br&gt;Go  用于断点调试&lt;br&gt;Stream  流切换(按下为流
      
    
    </summary>
    
    
      <category term="tool" scheme="https://tragiclife.github.io/tags/tool/"/>
    
      <category term="Fiddler" scheme="https://tragiclife.github.io/tags/Fiddler/"/>
    
  </entry>
  
  <entry>
    <title>scss</title>
    <link href="https://tragiclife.github.io/front-end/css/scss/"/>
    <id>https://tragiclife.github.io/front-end/css/scss/</id>
    <published>2019-01-10T22:06:53.000Z</published>
    <updated>2019-01-11T16:22:54.768Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.sass.hk/docs/" target="_blank" rel="noopener">官方文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要安装sass、sass-loader、node-sass、node-gyp<br>安装node-sass之前需要先安装npm-cli和node-gyp</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>使用$符定义变量，即$color</p><h3 id="定义用于继承的类"><a href="#定义用于继承的类" class="headerlink" title="定义用于继承的类"></a>定义用于继承的类</h3><p>使用%定义，定义的class不编译</p><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p>$list: first second third;</p><h3 id="定义混合样式"><a href="#定义混合样式" class="headerlink" title="定义混合样式"></a>定义混合样式</h3><p>通过@mixin定义，@include引入</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>使用@extend继承某个类的样式</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用@each、@for、@while来循环</span><br><span class="line">@for循环，through指包含该值，to不包含该值</span><br><span class="line">@for $i from 1 through 100 &#123;</span><br><span class="line">  .marginTop-#&#123;$i&#125; &#123;</span><br><span class="line">    margin-top: #&#123;$i&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在scss中使用原生import"><a href="#在scss中使用原生import" class="headerlink" title="在scss中使用原生import"></a>在scss中使用原生import</h2><ol><li>import的文件以.css结尾</li><li>引入的路径是以http://开头</li><li>使用url()函数引用时</li><li>import后面带有media queries的时候</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>文件名前面带_表示不编译成css文件，直接引入其他文件</li><li>使用#{$width}包裹变量，避免做除法运算</li><li>同一目录下，局部文件和和非局部文件不能重名</li><li><code>.error {&amp;.instrusion {}}  .serious {@extend .error}</code>该继承会生成.serious.instrusion的样式</li><li>extend不能继承嵌套选择器，如.A .B</li><li>使用@at-root将样式提取到最外层，用法@at-root {.main {}}</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.sass.hk/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
      <category term="scss" scheme="https://tragiclife.github.io/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>节流与防抖</title>
    <link href="https://tragiclife.github.io/front-end/js/throttle-and-debounce/"/>
    <id>https://tragiclife.github.io/front-end/js/throttle-and-debounce/</id>
    <published>2019-01-05T22:44:02.000Z</published>
    <updated>2019-01-08T14:54:59.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function throttle(method,delay,duration)&#123;</span><br><span class="line">  var timer=null, begin=new Date();</span><br><span class="line">  return function()&#123;</span><br><span class="line">    var context=this,             </span><br><span class="line">        args=arguments, </span><br><span class="line">        current=new Date();</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    if(current-begin&gt;=duration)&#123;</span><br><span class="line">      method.apply(context,args);</span><br><span class="line">      begin=current;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      timer=setTimeout(function()&#123;</span><br><span class="line">        method.apply(context,args);</span><br><span class="line">      &#125;,delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><h3 id="简单的防抖动函数"><a href="#简单的防抖动函数" class="headerlink" title="简单的防抖动函数"></a>简单的防抖动函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait, immediate) &#123;</span><br><span class="line">  // 定时器变量</span><br><span class="line">  var timeout;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    // 每次触发 scroll handler 时先清除定时器</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    // 指定 xx ms 后触发真正想进行的操作 handler</span><br><span class="line">    timeout = setTimeout(func, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="防抖动函数"><a href="#防抖动函数" class="headerlink" title="防抖动函数"></a>防抖动函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait, immediate) &#123;</span><br><span class="line">  var timeout;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    var context = this, args = arguments;</span><br><span class="line">    var later = function() &#123;</span><br><span class="line">      timeout = null;</span><br><span class="line">      if (!immediate) func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    var callNow = immediate &amp; !timeout;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(later, wait);</span><br><span class="line">    if (callNow) func.apply(context, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数节流&quot;&gt;&lt;a href=&quot;#函数节流&quot; class=&quot;headerlink&quot; title=&quot;函数节流&quot;&gt;&lt;/a&gt;函数节流&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="throttle" scheme="https://tragiclife.github.io/tags/throttle/"/>
    
      <category term="debounce" scheme="https://tragiclife.github.io/tags/debounce/"/>
    
  </entry>
  
  <entry>
    <title>微信</title>
    <link href="https://tragiclife.github.io/front-end/wx/wx/"/>
    <id>https://tragiclife.github.io/front-end/wx/wx/</id>
    <published>2019-01-02T22:56:52.000Z</published>
    <updated>2019-01-02T15:30:28.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ol><li><p>引入js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用后台接口获取签名(signature)、时间戳(timestamp)、随机串(nonceStr)，通过config接口注入权限验证配置</p></li></ol><h2 id="js-sdk调用"><a href="#js-sdk调用" class="headerlink" title="js-sdk调用"></a>js-sdk调用</h2><h3 id="隐藏分享栏"><a href="#隐藏分享栏" class="headerlink" title="隐藏分享栏"></a>隐藏分享栏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeixinJSBridge.call(&apos;hideOptionMenu&apos;)</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="微信端无法自动播放音频问题"><a href="#微信端无法自动播放音频问题" class="headerlink" title="微信端无法自动播放音频问题"></a>微信端无法自动播放音频问题</h3><ol><li><p>使用微信提供的js-sdk，在ready中调用播放的API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//首先引用js: </span><br><span class="line">&lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">//然后写方法: </span><br><span class="line">function autoPlayAudio1()&#123;</span><br><span class="line">  wx.config(&#123;</span><br><span class="line">    //配置信息, 即使不正确也能使用 wx.ready</span><br><span class="line">    debug: false,</span><br><span class="line">    appId: &apos;&apos;,</span><br><span class="line">    timestamp: 1,</span><br><span class="line">    nonceStr: &apos;&apos;,</span><br><span class="line">    signature: &apos;&apos;,</span><br><span class="line">    jsApiList: []</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.ready(function() &#123;</span><br><span class="line">    document.getElementById(&apos;audio&apos;).play();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听WeixinJSBridgeReady事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var audio=document.querySelector(&quot;#audio&quot;);</span><br><span class="line">  document.addEventListener(&quot;WeixinJSBridgeReady&quot;,function()&#123;</span><br><span class="line">  audio.play();</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注册&quot;&gt;&lt;a href=&quot;#注册&quot; class=&quot;headerlink&quot; title=&quot;注册&quot;&gt;&lt;/a&gt;注册&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入js文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="sdk" scheme="https://tragiclife.github.io/tags/sdk/"/>
    
      <category term="微信" scheme="https://tragiclife.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>企业微信</title>
    <link href="https://tragiclife.github.io/front-end/wx/qywx/"/>
    <id>https://tragiclife.github.io/front-end/wx/qywx/</id>
    <published>2019-01-02T22:56:35.000Z</published>
    <updated>2019-01-02T15:29:35.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ol><li><p>引入js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用后台接口获取签名(signature)、时间戳(timestamp)、随机串(nonceStr)，通过config接口注入权限验证配置</p></li></ol><p><a href="https://work.weixin.qq.com/api/doc#90000/90136/90514" target="_blank" rel="noopener">注册相关文档</a><br><a href="https://work.weixin.qq.com/api/jsapisign" target="_blank" rel="noopener">通过企业微信提供的网站校验</a></p><h2 id="js-sdk调用"><a href="#js-sdk调用" class="headerlink" title="js-sdk调用"></a>js-sdk调用</h2><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><ol><li>使用<code>wx.chooseImage</code>拍照或者从相册中获取，返回localIds本地ID列表</li><li>调用<code>wx.uploadImage</code>上传照片到临时素材，返回serverId，需要同步上传，上传一张成功才能接着上传下一张</li><li>调用后台接口，后台将临时素材中的图片拉取到服务器中</li></ol><blockquote><p>IOS可通过调用getLocalImgData使用localIds获得base64进行展示，Android可以通过img直接使用localIds<br>base64转file时name属性需要带后缀，否则上传后得到的文件为tmp文件</p></blockquote><p><a href="https://work.weixin.qq.com/api/doc#90000/90136/90495" target="_blank" rel="noopener">图片上传sdk</a><br><a href="http://note.youdao.com/noteshare?id=c72e245f64c04f7823356f7a2763eaef" target="_blank" rel="noopener">base64转File方法</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="企业微信注册报invalid-signture"><a href="#企业微信注册报invalid-signture" class="headerlink" title="企业微信注册报invalid signture"></a>企业微信注册报invalid signture</h3><ul><li>在home界面调用注册方法会报错，修改调用的位置至需要使用新建表单页面</li><li>后台返回的时间戳单位需要为<strong>秒</strong>，注册的url需要encodeURIComponent再传给后台，由后台decode</li><li>项目用的是history模式，每个页面使用sdk都需要重新调用注册方法<blockquote><p>url不调用encodeURIComponent的话链接上通过&amp;字符连接起来的参数会不被加入签名中</p></blockquote></li></ul><h3 id="安卓手机无法预览图片"><a href="#安卓手机无法预览图片" class="headerlink" title="安卓手机无法预览图片"></a>安卓手机无法预览图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">调用接口时，urls必须传</span><br><span class="line">wx.previewImage(&#123;</span><br><span class="line">  current: imgUrl, // 当前显示图片的http链接</span><br><span class="line">  urls: [imgUrl] // 需要预览的图片http链接列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注册&quot;&gt;&lt;a href=&quot;#注册&quot; class=&quot;headerlink&quot; title=&quot;注册&quot;&gt;&lt;/a&gt;注册&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入js文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="企业微信" scheme="https://tragiclife.github.io/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="sdk" scheme="https://tragiclife.github.io/tags/sdk/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="https://tragiclife.github.io/front-end/plugins/axios/"/>
    <id>https://tragiclife.github.io/front-end/plugins/axios/</id>
    <published>2018-12-27T22:50:20.000Z</published>
    <updated>2019-02-02T15:15:22.532Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">api</a></p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ul><li>浏览器端发起XMLHttpRequests请求</li><li>node端发起http请求</li><li>支持Promise API</li><li>拦截请求和返回</li><li>转化请求和返回(数据)</li><li>取消请求</li><li>自动转化jsonshuju </li><li>客户端支持抵御XSRF(跨站请求伪造)</li></ul><h2 id="合并请求"><a href="#合并请求" class="headerlink" title="合并请求"></a>合并请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.all([request1, request2]).then(axios.spread((res1, res2) =&gt; &#123;&#125;))</span><br></pre></td></tr></table></figure><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const CancelToken = axios.CancelTOken;</span><br><span class="line">const source = CancelToken.source(); // 创建标志请求的源对象</span><br><span class="line"></span><br><span class="line">axios.post(&apos;/&apos;, &#123;&#125;, &#123;</span><br><span class="line">  cancelToken: source.token,</span><br><span class="line">&#125;)</span><br><span class="line">source.cancel();</span><br></pre></td></tr></table></figure><h2 id="文件断点续传"><a href="#文件断点续传" class="headerlink" title="文件断点续传"></a>文件断点续传</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 裁剪文件</span><br><span class="line">let fileData = this.file.slice(this.loaded + 1, this.file.size);</span><br><span class="line">let formData = new FormData();</span><br><span class="line">formData.append(&apos;file&apos;, fileData);</span><br><span class="line"></span><br><span class="line">axios.post(&apos;/&apos;, formData, &#123;</span><br><span class="line">  onUploadProgress(progressEvent)&#123;</span><br><span class="line">    // 当前上传字节</span><br><span class="line">    this.loaded = progressEvent.loaded</span><br><span class="line"></span><br><span class="line">    // progressEvent.total 文件总字节</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li><p>请求拦截器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>响应拦截器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptor.response.use((res) =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li>单请求配置options: <code>axios.post(url, data, options)</code></li><li>全局配置defaults: axios.defaults</li><li>config: 请求拦截器中的参数</li><li>response.config响应拦截器中的参数</li><li>options<ul><li>baseURL 基础URL路径</li><li>params 查询字符串(对象)</li><li>transformRequest: function(req) {post请求传递的数据} 转换请求体数据</li><li>transformResponse: function(res) {自己转换响应的数据} 转换响应体数据</li><li>headers 请求头信息</li><li>data 请求体数据</li><li>timeout 请求超时时间(毫秒)</li></ul></li></ul><h2 id="实例创建"><a href="#实例创建" class="headerlink" title="实例创建"></a>实例创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let instance = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://127.0.0.1:8080&apos;,</span><br><span class="line">  headers: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.kancloud.cn/yunye/axios/234845&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;api&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;特色&quot;&gt;&lt;a href=&quot;#特色&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="ajax" scheme="https://tragiclife.github.io/tags/ajax/"/>
    
      <category term="axios" scheme="https://tragiclife.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vuex相关知识点记录</title>
    <link href="https://tragiclife.github.io/front-end/framework/Vuex/"/>
    <id>https://tragiclife.github.io/front-end/framework/Vuex/</id>
    <published>2018-12-26T22:30:20.000Z</published>
    <updated>2019-02-10T06:55:22.290Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://vuex.vuejs.org/zh/api/" target="_blank" rel="noopener">官网</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>引用vuex，<code>import Vuex from &#39;vuex&#39;</code></li><li>安装Vuex，<code>Vue.use(Vuex)</code></li><li><p>创建store对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const state = &#123;</span><br><span class="line">  num: 5</span><br><span class="line">&#125;;</span><br><span class="line">const mutations = &#123;</span><br><span class="line">  addNum(state, payload) &#123;</span><br><span class="line">    state.num += payload.num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在vue实例中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>获取/修改值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 获取值</span><br><span class="line">this.$store.state.num</span><br><span class="line"></span><br><span class="line">// 修改值</span><br><span class="line">this.$store.commit(&apos;addNum&apos;, &#123;num: 5&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  num: 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取值</span><br><span class="line">this.$store.state.num</span><br></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  getNum(state) &#123;</span><br><span class="line">    return state.num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取值</span><br><span class="line">this.$store.getters.getNum</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>必须是同步的，否则devtools中捕捉的状态会不正确，即丢失快照记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  addNum(state, payload) &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      state.num += payload.num;</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改值</span><br><span class="line">this.$store.commit(&apos;addNum&apos;, &#123;num: 5&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>可以进行异步操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  addNumByAct(store, payload) &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      store.commit(&apos;addNum&apos;, payload);</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改值</span><br><span class="line">this.$store.dispatch(&apos;addNumByAct&apos;, &#123;num: 5&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><h2 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h2><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><p>引入<code>import {mapState} from &#39;vuex&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState(&#123;</span><br><span class="line">  num: state =&gt; state.num,</span><br><span class="line"></span><br><span class="line">  // 使用aliasNum代替num来获取值</span><br><span class="line">  aliasNum: &apos;num&apos;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    num: state =&gt; state.num,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  // 映射 this.num 为 store.state.num</span><br><span class="line">  &apos;num&apos;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h3><p>引入<code>import {mapGetters} from &#39;vuex&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([</span><br><span class="line">    &apos;getNum&apos;,</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapGetters(&#123;</span><br><span class="line">  getNumByMap: &apos;getNum&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>Error in callback for watcher “function () { return this._data.$$state }”: “Error: [vuex] Do not mutate vuex store state outside mutation handlers.”<br>mutations的修改中不允许使用setTimeOut等异步操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://vuex.vuejs.org/zh/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用
      
    
    </summary>
    
    
      <category term="vue" scheme="https://tragiclife.github.io/tags/vue/"/>
    
      <category term="vuex" scheme="https://tragiclife.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>VueRouter相关知识点记录</title>
    <link href="https://tragiclife.github.io/front-end/framework/VueRouter/"/>
    <id>https://tragiclife.github.io/front-end/framework/VueRouter/</id>
    <published>2018-12-25T22:45:58.000Z</published>
    <updated>2019-02-12T16:40:38.332Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://router.vuejs.org/zh/api/" target="_blank" rel="noopener">官网</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>引用vue-router，<code>import VueRouter from &#39;vue-router&#39;</code></li><li>安装VueRouter，<code>Vue.use(VueRouter)</code></li><li><p>创建、配置路由对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const routes = [&#123;</span><br><span class="line">  name: &apos;login&apos;,</span><br><span class="line">  path: &apos;/login&apos;,</span><br><span class="line">  component: Login,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    isCheck: false</span><br><span class="line">  &#125;, // 路由元信息，可用来做登录权限的处理</span><br><span class="line">  children: [&#123;</span><br><span class="line">    name: &apos;child&apos;,</span><br><span class="line">    path: &apos;child&apos;, // 路径为/login/child</span><br><span class="line">    component: Child</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: &apos;child&apos;,</span><br><span class="line">    path: &apos;/child2&apos;, // 路径为/child2</span><br><span class="line">    component: Child</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: &apos;*&apos;,</span><br><span class="line">  redirect: &#123;name: &apos;login&apos;&#125;, // 重定向</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  base: &apos;/&apos;,</span><br><span class="line">  mode: &apos;hash&apos;, // 可选值，hash、history、abstract</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 若new VueRouter的时候没有传入routes属性，可通过addRoutes添加</span><br><span class="line">router.addRoutes(routes);</span><br></pre></td></tr></table></figure></li><li><p>在vue实例中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>html中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 跳转的按钮</span><br><span class="line">&lt;router-link to=&quot;/login&quot;&gt;跳转登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name: &apos;login&apos;&#125;&quot;&gt;跳转登录&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">// 用于展示视图</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        default: Foo,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Baz</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ol><li><p>路径字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &apos;*&apos;, redirect: &apos;/login&apos; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &apos;*/a*&apos;, redirect: &#123; name: &apos;login&apos; &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &apos;*&apos;, redirect: to =&gt; &#123;</span><br><span class="line">      // 方法接收 目标路由 作为参数</span><br><span class="line">      // return 重定向的 字符串路径/路径对象</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><ol><li><code>$route</code>，路由信息对象，只读</li><li><code>$router</code>，路由操作对象，只写</li></ol><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><ul><li><p>调到指定的路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">  name: &apos;login&apos;,</span><br><span class="line">  path: &apos;/login&apos;,</span><br><span class="line">  query: &#123;id: 1&#125;,</span><br><span class="line">  params: &#123;name: &apos;test&apos;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>根据历史记录前进或者后退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// n传入正值代表前进，负值代表后退</span><br><span class="line">this.$router.go(n);</span><br></pre></td></tr></table></figure></li></ul><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="通过router-link"><a href="#通过router-link" class="headerlink" title="通过router-link"></a>通过router-link</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login&quot;&gt;跳转登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name: &apos;login&apos;&#125;&quot;&gt;跳转登录&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="通过-router"><a href="#通过-router" class="headerlink" title="通过$router"></a>通过$router</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vue-router跳转(以/开头的嵌套路径会被当做根路径)</span><br><span class="line">跳转写法</span><br><span class="line">// 字符串</span><br><span class="line">this.$router.push(&apos;/home&apos;);</span><br><span class="line"></span><br><span class="line">// 对象</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  path:&apos;home&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 命名的路由</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  name:&apos;home&apos;,</span><br><span class="line">  params:&#123;userId: 1&#125;, </span><br><span class="line">  query: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><h3 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach"></a>beforeEach</h3><p>可以用来做登录拦截，通过next来控制页面是否跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // 是否需要校验登录，不校验则正常跳转</span><br><span class="line">  if (!to.meta.isCheck) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if (isLogin) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(&#123;name: &apos;login&apos;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">to: 目标路由，即要进入的路由</span><br><span class="line">from: 源路由，即跳转前的路由</span><br><span class="line">next: 是否允许跳转</span><br><span class="line"></span><br><span class="line">// next传值</span><br><span class="line">1. next()，正常跳转</span><br><span class="line">2. next(false)，停止跳转，效果等同于不调用next</span><br><span class="line">3. next(&#123;name: &apos;login&apos;&#125;)，路由重定向，跳转到login</span><br></pre></td></tr></table></figure></p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>利用hashchange监听url中hash部分(如#/home)的改变</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><ul><li>需要服务端配合，每次都重定向到index.html页面</li><li>需要设置config/index.js中assetsPublicPath为/</li></ul><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><ol><li><p>利用require.ensure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const routes = [&#123;</span><br><span class="line">  path: &apos;/home&apos;,</span><br><span class="line">  name: &apos;home&apos;,</span><br><span class="line">  component(resolve) &#123;</span><br><span class="line">    require.ensure([&apos;../views/home.vue&apos;], () =&gt; &#123;</span><br><span class="line">      resolve(require(&apos;../views/home.vue&apos;))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p>使用import和syntax-dynamic-import<br><a href="https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/" target="_blank" rel="noopener">https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-syntax-dynamic-import</span><br><span class="line"></span><br><span class="line">const Foo = () =&gt; import(&apos;./Foo.vue&apos;)</span><br><span class="line">const routes = [&#123;</span><br><span class="line">  path: &apos;/home&apos;,</span><br><span class="line">  name: &apos;home&apos;,</span><br><span class="line">  component: Foo,</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// .babelrc中配置</span><br><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;@babel/plugin-syntax-dynamic-import&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><ul><li>scrollBehavior只能在history中生效</li></ul><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="在history模式下使用子路由刷新报错问题"><a href="#在history模式下使用子路由刷新报错问题" class="headerlink" title="在history模式下使用子路由刷新报错问题"></a>在history模式下使用子路由刷新报错问题</h3><p>修改assetsPublicPath路径，使用绝对路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://router.vuejs.org/zh/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="vue" scheme="https://tragiclife.github.io/tags/vue/"/>
    
      <category term="vue-router" scheme="https://tragiclife.github.io/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue相关知识点记录</title>
    <link href="https://tragiclife.github.io/front-end/framework/Vue/"/>
    <id>https://tragiclife.github.io/front-end/framework/Vue/</id>
    <published>2018-12-24T23:45:58.000Z</published>
    <updated>2019-02-12T16:59:56.528Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">官网</a></p><h2 id="dist目录中的相关文件"><a href="#dist目录中的相关文件" class="headerlink" title="dist目录中的相关文件"></a>dist目录中的相关文件</h2><ul><li>vue.common.js 模块化代码</li><li>vue.esm.js ES6模块化代码</li><li>vue.min.js 压缩后的代码</li><li>vue.runtime.**.js 运行时，比vue小30%</li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="自带指令"><a href="#自带指令" class="headerlink" title="自带指令"></a>自带指令</h3><ul><li>v-if/v-show: v-if是插入或者移除，v-show是显示或者隐藏(控制display)</li><li>v-else-if/v-else: 需要和v-if搭配使用，且和v-if的元素相邻</li><li><p>v-bind/v-on: v-bind是给属性赋值(简写:)，v-on是绑定事件(简写@)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-bind:属性=&quot;变量&quot; ===&gt; :属性=&quot;变量&quot;</span><br><span class="line">v-on:事件名=&quot;函数&quot; ===&gt; @事件名=&quot;函数&quot;</span><br></pre></td></tr></table></figure></li><li><p>v-bind/v-model: v-bind是单向数据绑定，v-model是双向数据绑定</p></li></ul><h3 id="定义自定义指令"><a href="#定义自定义指令" class="headerlink" title="定义自定义指令"></a>定义自定义指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;test&apos;, &#123;</span><br><span class="line">  bind: function () &#123;&#125;,</span><br><span class="line">  inserted: function () &#123;&#125;,</span><br><span class="line">  update: function () &#123;&#125;,</span><br><span class="line">  componentUpdated: function () &#123;&#125;,</span><br><span class="line">  unbind: function () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;show&quot;&gt;</span><br><span class="line">  &lt;div v-test&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="组件component"><a href="#组件component" class="headerlink" title="组件component"></a>组件component</h2><h3 id="定义全局组件"><a href="#定义全局组件" class="headerlink" title="定义全局组件"></a>定义全局组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;MyButton&apos;, &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义局部组件"><a href="#定义局部组件" class="headerlink" title="定义局部组件"></a>定义局部组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 引入组件MyButton</span><br><span class="line">components: &#123;</span><br><span class="line">  MyButton: MyButton</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-button&gt;&lt;/my-button&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="定义全局过滤器"><a href="#定义全局过滤器" class="headerlink" title="定义全局过滤器"></a>定义全局过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(reverse, (val, arg) =&gt; &#123;</span><br><span class="line">  return val</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义局部过滤器"><a href="#定义局部过滤器" class="headerlink" title="定义局部过滤器"></a>定义局部过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  // 传入值和其他参数</span><br><span class="line">  reverse(val, arg) &#123;</span><br><span class="line">    return val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;test | reverse(&apos;test&apos;)&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="watch监听对象"><a href="#watch监听对象" class="headerlink" title="watch监听对象"></a>watch监听对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  obj: &#123;</span><br><span class="line">    handler:function(newVal,oldVal)&#123;&#125;, // 处理函数</span><br><span class="line">    deep:true, // 深度监听</span><br><span class="line">    immediate: true, // 是否立即执行</span><br><span class="line">  &#125;,</span><br><span class="line">  obj2(newVal, oldVal) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 当a、b的值发生改变时才会触发该函数，默认会缓存当前结果</span><br><span class="line">// 如果包含对象，则需要其引用地址发生改变才会触发</span><br><span class="line">computed: &#123;</span><br><span class="line">  result:function()&#123;</span><br><span class="line">    return this.a + this.b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// parent</span><br><span class="line">&lt;child&gt;</span><br><span class="line">  &lt;h1&gt;111&lt;/h1&gt;</span><br><span class="line">&lt;/child&gt;</span><br><span class="line"></span><br><span class="line">// child</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot&gt;</span><br><span class="line">    &lt;div&gt;默认值&lt;/div&gt;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// parent，通过slot属性找到对应的插槽</span><br><span class="line">&lt;child&gt;</span><br><span class="line">  &lt;h1 slot=&quot;first&quot;&gt;111&lt;/h1&gt;</span><br><span class="line">&lt;/child&gt;</span><br><span class="line"></span><br><span class="line">// child，name属性定义插槽的名称</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot name=&quot;first&quot;&gt;</span><br><span class="line">    &lt;div&gt;默认值&lt;/div&gt;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="插槽中可以使用插槽"><a href="#插槽中可以使用插槽" class="headerlink" title="插槽中可以使用插槽"></a>插槽中可以使用插槽</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=&quot;parentSlot&quot;&gt;</span><br><span class="line">  &lt;div&gt;默认值&lt;/div&gt;</span><br><span class="line">  &lt;slot name=&quot;childSlot&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/slot&gt;</span><br></pre></td></tr></table></figure><h2 id="作用域插槽slot-scope"><a href="#作用域插槽slot-scope" class="headerlink" title="作用域插槽slot-scope"></a>作用域插槽slot-scope</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// child</span><br><span class="line">&lt;div class=&apos;mater_other&apos;&gt;</span><br><span class="line">  &lt;slot name=&quot;other&quot; :item=&quot;item&quot; :name=&quot;&apos;123&apos;&quot;&gt;</span><br><span class="line">    &#123;&#123;item.price&#125;&#125;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// parent(2.5.0+可以在template元素上使用)</span><br><span class="line">&lt;div slot=&quot;other&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">  &lt;div class=&apos;mater_left&apos;&gt;</span><br><span class="line">    &#123;&#123;props.item.price&#125;&#125; &#123;&#123;props.name&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">// 支持解构赋值</span><br><span class="line">&lt;div slot=&quot;other&quot; slot-scope=&quot;&#123;item, name&#125;&quot;&gt;</span><br><span class="line">  &lt;div class=&apos;mater_left&apos;&gt;</span><br><span class="line">    &#123;&#123;item.price&#125;&#125; &#123;&#123;name&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>new Vue → 初始化事件 → beforeCreate → 初始化数据 → created</li><li>判断是否设置了el选项，若没有则等待vm.$mount(el)后才继续执行</li><li>判断是否有template，有则编译成render函数，没有则编译el为模板</li><li>beforeMount → 用$el替换el元素，进行渲染 → mounted</li><li>若数据发生改变，若改变则执行beforeUpdate然后重新render，再执行updated</li><li>当执行销毁时(自动销毁或者调用vm.$destory)，beforeDestory → 移除watch、子组件和事件 → destoryed</li></ul><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><ul><li>创建时<br><code>beforeCreate → created → beforeMount → mounted</code></li><li>离开页面时<br><code>beforeDestroy → destroyed</code></li><li>在mounted中改变data的值<br><code>beforeCreate → created → beforeMount → mounted → beforeUpdate → updated</code></li></ul><h3 id="使用keep-alive"><a href="#使用keep-alive" class="headerlink" title="使用keep-alive"></a>使用keep-alive</h3><ul><li>创建时<br><code>beforeCreate → created → beforeMount → mounted → activated</code></li><li>离开页面时<br><code>deactivated</code></li><li>在mounted中改变data的值<br><code>beforeCreate → created → beforeMount → mounted → activated → beforeUpdate → updated</code></li></ul><h3 id="在created钩子中的执行顺序"><a href="#在created钩子中的执行顺序" class="headerlink" title="在created钩子中的执行顺序"></a>在created钩子中的执行顺序</h3><p><code>mixin → 当前vue文件 → components</code></p><h3 id="父子组件、mixins之间的顺序"><a href="#父子组件、mixins之间的顺序" class="headerlink" title="父子组件、mixins之间的顺序"></a>父子组件、mixins之间的顺序</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/front-end/framework/Vue/./life-cycle.png" alt="父子组件、mixins的生命周期" title="">                </div>                <div class="image-caption">父子组件、mixins的生命周期</div>            </figure><h3 id="router组件异步加载时，App-vue的mounted会先执行"><a href="#router组件异步加载时，App-vue的mounted会先执行" class="headerlink" title="router组件异步加载时，App.vue的mounted会先执行"></a>router组件异步加载时，App.vue的mounted会先执行</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/front-end/framework/Vue/./life-cycle2.png" alt="异步加载页面时的声明周期" title="">                </div>                <div class="image-caption">异步加载页面时的声明周期</div>            </figure><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>便于获取DOM节点或者组件对象</p><h3 id="如何获取"><a href="#如何获取" class="headerlink" title="如何获取"></a>如何获取</h3><p>通过<code>this.$refs</code>获取设置<code>ref</code>属性的数据对象，如<code>this.$refs.test</code></p><blockquote><p>若为多个元素/组件设置相同的ref，获取的值为数组</p></blockquote><h3 id="在DOM渲染后获取"><a href="#在DOM渲染后获取" class="headerlink" title="在DOM渲染后获取"></a>在DOM渲染后获取</h3><p>通过<code>this.$nextTick()</code>传入回调，在回调中获取$refs</p><h3 id="组件对象的属性"><a href="#组件对象的属性" class="headerlink" title="组件对象的属性"></a>组件对象的属性</h3><ul><li><code>$data</code>，数据对象</li><li><code>$refs</code>，设置了ref属性的DOM元素/组件对象</li><li><code>$parent</code>，父组件</li><li><code>$children</code>，子组件(数组)</li><li><code>$root</code>，new Vue的实例，vm</li><li><code>$el</code>，DOM元素</li><li><code>$slots</code>，插槽对象</li><li><code>$scopedSlots</code>，作用域插槽对象</li><li><code>$listeners</code>，父作用域中不含.native修饰的事件</li></ul><h2 id="属性注册-触发视图更新"><a href="#属性注册-触发视图更新" class="headerlink" title="属性注册(触发视图更新)"></a>属性注册(触发视图更新)</h2><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给item注册checked属性，值为true</span><br><span class="line">Vue.set(item,&apos;checked&apos;,true)</span><br></pre></td></tr></table></figure><h3 id="局部"><a href="#局部" class="headerlink" title="局部"></a>局部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$set(item,&apos;checked&apos;,true)</span><br></pre></td></tr></table></figure><h2 id="Vue自定义插件"><a href="#Vue自定义插件" class="headerlink" title="Vue自定义插件"></a>Vue自定义插件</h2><h3 id="定义install方法"><a href="#定义install方法" class="headerlink" title="定义install方法"></a>定义install方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let MyPlugin = &#123;&#125;</span><br><span class="line">MyPlugin.install = function()&#123;</span><br><span class="line">  // 1. 添加全局方法或属性，通过Vue.myGlobalMethod 调用</span><br><span class="line">  Vue.myGlobalMethod = function () &#123;&#125;</span><br><span class="line">  // 2. 添加全局资源</span><br><span class="line">  Vue.directive(&apos;my-directive&apos;, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 3. 注入组件</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: function () &#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 4. 添加实例方法，通过this.$myMethod 调用</span><br><span class="line">  Vue.prototype.$myMethod = function (methodOptions) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册vue插件"><a href="#注册vue插件" class="headerlink" title="注册vue插件"></a>注册vue插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 调用vue的use方法</span><br><span class="line">Vue.use(MyPlugin)</span><br></pre></td></tr></table></figure><h3 id="使用vue插件"><a href="#使用vue插件" class="headerlink" title="使用vue插件"></a>使用vue插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">通过this.$xxx调用插件</span><br><span class="line">https://blog.csdn.net/qq_26522773/article/details/79358819</span><br><span class="line">import dialogfrom &apos;dialog.vue&apos;</span><br><span class="line">function install () &#123;</span><br><span class="line">  Object.defineProperty(Vue.prototype, &apos;$dialog&apos;, &#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">      let div = document.createElement(&apos;div&apos;);</span><br><span class="line">      document.body.appendChild(div);</span><br><span class="line">      return (message, modalBody) =&gt; &#123;</span><br><span class="line">        const Constructor = Vue.extend(dialog)</span><br><span class="line">        const Instance = new Constructor(&#123;</span><br><span class="line">          data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              message: message,</span><br><span class="line">              show: true,</span><br><span class="line">              modalBody: modalBody</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).$mount(div)</span><br><span class="line">        return Instance.setSubmit  //放回 一个方法用于 传递 自定义的数据和 submit 时方法  </span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">Vue.use(Dialog)</span><br></pre></td></tr></table></figure><h2 id="上传到npm"><a href="#上传到npm" class="headerlink" title="上传到npm"></a>上传到npm</h2><blockquote><p>每次上传npm需要修改版本号</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">修改package.json文件</span><br><span class="line">private:false, // 默认是true 私人的 需要改为false 不然发不上去 你可以试试..</span><br><span class="line">&quot;license&quot;: &quot;MIT&quot;, // 许可证</span><br><span class="line">&quot;main&quot;: &quot;dist/vue-pay-keyboard.js&quot;, // 这个超级重要 决定了你 import xxx from “vue-pay-keyboard” 它默认就会去找 dist下的vue-pay-keyboard 文件</span><br><span class="line">&quot;repository&quot;: &#123;</span><br><span class="line">  &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;https://github.com/yucccc/vue-pay-keyboard&quot;</span><br><span class="line">&#125;, // 配置这个地址存放你项目在github上的位置 也尤为重要</span><br><span class="line"></span><br><span class="line">npm adduser</span><br><span class="line">Username: your name </span><br><span class="line">Password: your password </span><br><span class="line">Email: yourmail[@gmail](/user/gmail).com</span><br><span class="line">npm whoami  查看用户</span><br><span class="line">npm login  登录</span><br><span class="line">npm publish  发布</span><br></pre></td></tr></table></figure><h2 id="组件通信的方法"><a href="#组件通信的方法" class="headerlink" title="组件通信的方法"></a>组件通信的方法</h2><p>props、事件、v-model</p><h3 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><p>props<br>$children<br>在组件上定义ref，然后通过$refs访问</p><h3 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h3><p>$emit<br>修改父组件传递的props(仅限引用变量，不推荐)<br>$parent<br>父组件定义回调传入子组件，子组件调用</p><h3 id="非父子组件、兄弟组件通信-A页面跳B页面"><a href="#非父子组件、兄弟组件通信-A页面跳B页面" class="headerlink" title="非父子组件、兄弟组件通信(A页面跳B页面)"></a>非父子组件、兄弟组件通信(A页面跳B页面)</h3><p>使用一个Vue实例作为中央事件总线<br>let event = new Vue() // 事件总线<br>event.$on(‘eventName’, (val) =&gt; {}) // 事件处理，在B的created中定义，在B的beforeDestory中销毁<br>event.$emit(‘eventName’, data) // 事件触发，在A的beforeDestory中触发</p><p>引用mui.js报callee错误时在rules中加入<br>{rest: resolve(‘src/plugin/mui’),<br>use:[{loader: ‘expose-loader’,<br>options: ‘mui’}]}</p><p>使用.ctrl等修饰符进行事件绑定时，可以绑定多个相同的事件，如：@click.ctrl=””和@click=””可以同时绑定</p><p><strong>transition和keep-alive联合使用问题</strong><br>需要用transition包裹keep-alive，使用keep-alive包裹transition时路由无法缓存</p><p><strong>使用字体图标以下错误</strong></p><ol><li>将目录(./font)修改为绝对路径</li><li>字体文件需要放到static目录下</li></ol><h2 id="assets目录和static目录存放文件的区别"><a href="#assets目录和static目录存放文件的区别" class="headerlink" title="assets目录和static目录存放文件的区别"></a>assets目录和static目录存放文件的区别</h2><p>在 *.vue 组件中，所有模板和CSS都会被 vue-html-loader 及 css-loader 解析，并查找资源URL。例如，在<code>&lt;img src=&quot;./logo.png&quot;&gt;</code><br>和 <code>background: url(./logo.png)</code> 中，<code>&quot;./logo.png&quot;</code> 是相对的资源路径，将由Webpack解析为模块依赖。<br>因为 logo.png 不是 JavaScript，当被视为模块依赖时，需要使用 url-loader 和 file-loader<br>处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对/模块路径。<br>由于这些资源可能在构建过程中被内联/复制/重命名，所以它们基本上是源代码的一部分。这就是为什么建议将<br>Webpack 处理的静态资源放在 /src 目录中和其它源文件放一起的原因。事实上，甚至不必把它们全部放在 /src/assets：可以用模块/组件的组织方式来使用它们。例如，可以在每个放置组件的目录中存放静态资源。<br>简单理解为：static存放第三方资源，assets存放自己的资源</p><h2 id="依赖注入-provide-inject"><a href="#依赖注入-provide-inject" class="headerlink" title="依赖注入(provide/inject)"></a>依赖注入(provide/inject)</h2><h3 id="provide"><a href="#provide" class="headerlink" title="provide"></a>provide</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以为其所有子组件传递一个方法或属性</span><br><span class="line">provide() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    test: this.test,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="inject"><a href="#inject" class="headerlink" title="inject"></a>inject</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">接收父组件provide传递的值</span><br><span class="line">// 写法一</span><br><span class="line">inject: [&apos;test&apos;]</span><br><span class="line">// 写法二</span><br><span class="line">inject: &#123;</span><br><span class="line">  test: &#123;</span><br><span class="line">    default()&#123;</span><br><span class="line">      console.log(&apos;child&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>style标签使用scoped的时候无法覆盖子组件样式</strong><br>解决方法:</p><ul><li>去掉scoped</li><li>混用本地和全局样式，即增加一个style标签，不写scoped，进行样式覆</li><li>使用深度选择器 /deep/或者&gt;&gt;&gt;，如.a /dep/ .b{}</li></ul><p>使用scoped导致的问题</p><ul><li>无法覆盖子组件样式</li><li>@media 不生效</li></ul><p>template的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用template包裹元素进行v-if判断</span><br><span class="line">最终的渲染结果不包含template元素，适用于包裹多个要用相同if条件判断的元素</span><br><span class="line">&lt;template&gt;&lt;h1&gt;123&lt;/h1&gt;&lt;/template&gt;编译后只展示&lt;h1&gt;123&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><h3 id="v-model生效的元素"><a href="#v-model生效的元素" class="headerlink" title="v-model生效的元素"></a>v-model生效的元素</h3><p>自带value属性的元素</p><h2 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h2><blockquote><p>2.2.0+可用, 2.4.0+支持自定义事件的捕获</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = (err, vm, info) =&gt; &#123;</span><br><span class="line">  let &#123;</span><br><span class="line">    message, // 异常信息</span><br><span class="line">    name, // 异常名称</span><br><span class="line">    script,  // 异常脚本url</span><br><span class="line">    line,  // 异常行号</span><br><span class="line">    column,  // 异常列号</span><br><span class="line">    stack  // 异常堆栈信息</span><br><span class="line">  &#125; = err;</span><br><span class="line">  // info 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改config/index.js中build的assetsPublicPath为 ‘./‘时，style标签background-image使用相对路径打包报错问题<br><a href="https://www.cnblogs.com/qiuyueding/p/8953396.html" target="_blank" rel="noopener">https://www.cnblogs.com/qiuyueding/p/8953396.html</a><br>修改util.js文件<br>ExtractTextPlugin.extract({<br>  use: loaders,<br>  fallback: ‘vue-style-loader’,<br>  publicPath: ‘../../‘ // 解决打包style标签图片路径问题<br>})</p><h2 id="SPA项目SEO"><a href="#SPA项目SEO" class="headerlink" title="SPA项目SEO"></a>SPA项目SEO</h2><p>预渲染，使用prerender-spa-plugin</p><ol><li>vue-router设置history模式</li><li>使用prerender-spa-plugin<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在webpack.prod.js的plugins中添加</span><br><span class="line">new PrerenderSpaPlugin(&#123;</span><br><span class="line">  staticDir: path.join(__dirname, &apos;..&apos;, &apos;dist&apos;), // 代码打包的目录</span><br><span class="line">  routes: [&apos;/&apos;, &apos;/user&apos;], // 根据路由找到预渲染页面</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><ul><li>在style标签中添加scoped属性可以定义样式的作用域</li><li>v-cloak属性保证Vue在new之前不展示{}</li><li>:class 和:style 使用{}绑定数据时，key代表样式名，使用[]绑定数据时，每个项代表的是data中的数据</li><li>给vue组件添加click等原生事件时需要.native</li><li>父组件的created会比子组件的created先执行</li><li>使用v-for时普通元素会自动计算一个key，组件需要手动设置key，建议普通元素也加上key，提升性能</li><li>SPA对SEO不友好</li></ul><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="vue过渡动画生硬"><a href="#vue过渡动画生硬" class="headerlink" title="vue过渡动画生硬"></a>vue过渡动画生硬</h3><p>可以使用position:absolute</p><blockquote><p>在android手机出现过渡时页面缩小的情况，可以给过渡元素设置position:absolute</p></blockquote><h3 id="在-vue文件中使用render不生效"><a href="#在-vue文件中使用render不生效" class="headerlink" title="在.vue文件中使用render不生效"></a>在.vue文件中使用render不生效</h3><p>需要将template去掉</p><h3 id="编译报错"><a href="#编译报错" class="headerlink" title="编译报错"></a>编译报错</h3><p><strong>You are using the runtime-only build of Vue where the template compiler is not available</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 声明</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  components: &#123;App,&#125;,</span><br><span class="line">  template: &apos;&lt;app/&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 处理</span><br><span class="line">修改引用的vue文件，import Vue from &apos;vue/dist/vue&apos;</span><br></pre></td></tr></table></figure><p><strong>Component template should contain exactly one root element</strong><br>模板只能有一个根标签</p><p><strong>Cannot use v-for on stateful component root element because it renders multiple elements</strong><br>根标签不能使用v-for</p><p><strong>在webstorm中使用scss报错</strong><br>设置style标签type=”text/scss”</p><p><strong>command failed: <code>npm install --loglevel error --registry=https://registry.npm.taobao.org --disturl=https://npm.taobao.org/dist</code></strong><br>执行上述的npm install</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;dist目录中的相关文件&quot;&gt;&lt;a href=&quot;#dist目录中的相关文件&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="vue" scheme="https://tragiclife.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>日常小记-HTML</title>
    <link href="https://tragiclife.github.io/front-end/html/daily-notes/"/>
    <id>https://tragiclife.github.io/front-end/html/daily-notes/</id>
    <published>2018-12-24T23:16:00.000Z</published>
    <updated>2019-01-23T15:59:12.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h2><ol><li>处理 HTML 并构建 DOM 树。</li><li>处理 CSS 构建 CSSOM 树。</li><li>将 DOM 与 CSSOM 合并成一个渲染树。</li><li>根据渲染树来布局，计算每个节点的位置。</li><li>调用 GPU 绘制，合成图层，显示在屏幕上。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>textarea添加spellcheck＝”false”去除检查</li></ul><p><strong>视频播放自动全屏问题</strong><br>设置playsinline=”true”、webkit-playsinline=”true”、x5-playsinline=”true”、x-webkit-airplay=”allow”</p><p><strong>修改浏览器页签图标</strong></p><link rel="shortcut icon" href=""><p><strong>dns获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://a.alipayobjects.com&quot; rel=&quot;dns-prefetch&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p><strong>调用颜色盘</strong><br>设置input的type为color</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渲染机制&quot;&gt;&lt;a href=&quot;#渲染机制&quot; class=&quot;headerlink&quot; title=&quot;渲染机制&quot;&gt;&lt;/a&gt;渲染机制&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;处理 HTML 并构建 DOM 树。&lt;/li&gt;
&lt;li&gt;处理 CSS 构建 CSSOM 树。&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="html" scheme="https://tragiclife.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>基础小记</title>
    <link href="https://tragiclife.github.io/front-end/other/front-end-basics/"/>
    <id>https://tragiclife.github.io/front-end/other/front-end-basics/</id>
    <published>2018-12-23T23:12:07.000Z</published>
    <updated>2019-02-09T10:47:58.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网页加载优化"><a href="#网页加载优化" class="headerlink" title="网页加载优化"></a>网页加载优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// DNS Prefetch 应该尽量的放在网页的前面，推荐放在 &lt;meta charset=&quot;UTF-8&quot;&gt; 后面。具体使用方法如下：</span><br><span class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//www.zhix.net&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//api.share.zhix.net&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//bdimg.share.zhix.net&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 需要注意的是，虽然使用 DNS Prefetch 能够加快页面的解析速度，但是也不能滥用，因为有开发者指出 禁用DNS 预读取能节省每月100亿的DNS查询 。</span><br><span class="line">// 如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：</span><br><span class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;off&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h2><h3 id="正常盒模型"><a href="#正常盒模型" class="headerlink" title="正常盒模型"></a>正常盒模型</h3><p><code>content-box: content</code></p><h3 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h3><p><code>border-box: content + padding + border</code></p><p><strong>获取盒模型的宽和高</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dom.style.width/height</span><br><span class="line">dom.currentStyle.width/height (IE)</span><br><span class="line">window.getComputedStyle(dom).width/height (兼容性较好，获取计算后的样式，可获取伪元素的)</span><br><span class="line">dom.getBoundingClientRect().width/height (可以获得transform后的宽高)</span><br><span class="line">dom.clientWidth/clientHeight(获取宽高)</span><br><span class="line">dom.offsetWidth/offsetHeight (获取宽高，包括padding和border)</span><br></pre></td></tr></table></figure></p><p><strong>margin重叠</strong></p><ul><li>父子元素</li><li>兄弟元素</li><li>空的block元素</li></ul><p><strong>解决margin重叠</strong><br>BFC(块级格式化上下文)</p><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><ul><li>DOM事件模型</li><li>事件捕获、冒泡</li></ul><h3 id="DOM事件类"><a href="#DOM事件类" class="headerlink" title="DOM事件类"></a>DOM事件类</h3><p>事件级别</p><ul><li>DOM0    element.onclick = function(){}</li><li>DOM2    element.addEventListener(‘click’, function(){}, false)    IE:attachEventListener</li><li>DOM3    element.addEventListener(‘keyup’, function(){}, false)</li></ul><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>捕获 → 目标阶段 → 冒泡</p><h3 id="描述DOM事件捕获的具体流程"><a href="#描述DOM事件捕获的具体流程" class="headerlink" title="描述DOM事件捕获的具体流程"></a>描述DOM事件捕获的具体流程</h3><p>如何获取html标签：document.documentElement<br>window → document → html → body → … → 目标元素 → … → body → html → document → window</p><h3 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 阻止默认事件</span><br><span class="line">event.preventDefault()</span><br><span class="line"></span><br><span class="line">// 阻止事件冒泡</span><br><span class="line">event.stopPropagation() </span><br><span class="line"></span><br><span class="line">// 阻止事件继续执行，即一个DOM绑定多个事件，执行该方法会阻止在当前回调后注册的回调函数的执行</span><br><span class="line">event.stopImmediatePropagation() </span><br><span class="line"></span><br><span class="line">// 绑定事件的元素</span><br><span class="line">event.currentTarget </span><br><span class="line"></span><br><span class="line">// 触发事件的元素</span><br><span class="line">event.target</span><br></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><ul><li><p>Event</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let evt  = new Event(&apos;custom&apos;);</span><br><span class="line">document.addEventListner(&apos;custom&apos;, function()&#123;</span><br><span class="line">  console.log(&apos;custom&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">document.dispatchEvent(evt);</span><br></pre></td></tr></table></figure></li><li><p>CustomEvent</p></li></ul><h2 id="HTTP协议类"><a href="#HTTP协议类" class="headerlink" title="HTTP协议类"></a>HTTP协议类</h2><hr><h3 id="HTTP协议的主要特点"><a href="#HTTP协议的主要特点" class="headerlink" title="HTTP协议的主要特点"></a>HTTP协议的主要特点</h3><ul><li>简单快速(每个资源都是固定的)</li><li>灵活(可以完成不同数据类型的传输)</li><li>无连接(只连接一次就会断掉)</li><li>无状态(不能区分两次连接的身份)</li></ul><h3 id="HTTP报文的组成部分"><a href="#HTTP报文的组成部分" class="headerlink" title="HTTP报文的组成部分"></a>HTTP报文的组成部分</h3><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><ul><li>请求行(包含http方法、页面地址、http协议、版本)</li><li>请求头(key、value值)</li><li>空行(分割请求头和请求体)</li><li>请求体</li></ul><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><ul><li>状态行</li><li>响应头</li><li>空行</li><li>响应体</li></ul><h4 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h4><ul><li>GET → 获取资源</li><li>POST → 传输资源</li><li>PUT → 更新资源</li><li>DELETE → 删除资源</li><li>HEAD → 获得报文首部</li></ul><h3 id="POST和GET的区别"><a href="#POST和GET的区别" class="headerlink" title="POST和GET的区别"></a>POST和GET的区别</h3><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求</li><li>GET产生的URL地址可以被收藏，而POST不可以</li><li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置</li><li>GET请求只能进行url编码，而POST支持多种编码方式</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留</li><li>GET请求在URL中传送的参数是有长度限制的(基本是2KB)，而POST没有限制</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制</li><li>GET比POST更不安全，因为参数直接暴露的URL上，所以不能用来传递敏感信息</li><li>GET参数通过URL传递，POST放在Request body中</li></ul><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><ul><li>1xx：指示信息 - 表示请求已接收，继续处理</li><li>2xx：成功 - 表示请求已被成功接收</li><li>3xx：重定向 - 要完成请求必须进行更进一步的操作</li><li>4xx：客户端错误 - 请求有语法错误或请求无法实现</li><li>5xx：服务器错误 - 服务器未能实现合法的请求</li><li>200 OK：客户端请求成功</li><li>206 Partial Content：客户发送了一个带有Range头的GET请求，服务器完成了它</li><li>301 Moved Permanently：所请求的页面已经转移至新的url</li><li>302 Found：所请求的页面已经临时转移至新的url</li><li>304 Not Modified：客户端有缓冲的文档并发出了一个条件性的请求，服务器告诉客户，原来缓冲的文档还可以继续使用</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解</li><li>401 Unauthorized：请求未经授权，这个状态代码必须和www-Authenticate报头域一起使用</li><li>403 Forbidden：对被请求页面的访问被禁止</li><li>404 Not Found：请求资源不存在</li><li>500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用</li><li>503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可能恢复正常</li></ul><h2 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h2><p>HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，<br>完成之后立即断开连接(HTTP协议为无连接的协议)<br>当使用Keep-Alive模式(又称持久连接、连接重用)时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，<br>Keep-Alive功能避免了建立或者重新建立连接</p><p>管线化<br>在使用持久连接的情况下，某个连接上消息的传递类似于<br>请求1 =》响应1 =》请求2  =》响应2 =》请求3 =》响应3</p><p>管线化是指某个连接上的消息变成了类似这样<br>请求1 =》请求2 =》请求3 =》响应1 =》响应2 =》响应3</p><p>管线化机制通过持久连接完成，仅HTTP/1.1支持此技术<br>只有GET和HEAD请求可以进行管线化，而POST则有所限制<br>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持HTTP/1.1版本的协议<br>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变<br>HTTP/1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可<br>由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，<br>因此现代浏览器如Chrome和Firefix默认并未开启管线化支持</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="创建对象有几种方法"><a href="#创建对象有几种方法" class="headerlink" title="创建对象有几种方法"></a>创建对象有几种方法</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>let o = {name: ‘o’};<br>let obj = new Object({name: ‘obj’});</p><h4 id="通过构造函数"><a href="#通过构造函数" class="headerlink" title="通过构造函数"></a>通过构造函数</h4><p>let M = function(){this.name = ‘o2’};<br>let obj2 = new M();<br>Object.create(prototype, descriptors)<br>let P = {name: ‘o3’};<br>let obj3 = Object.create(P);</p><h3 id="原型、构造函数、实例、原型链之间的关系"><a href="#原型、构造函数、实例、原型链之间的关系" class="headerlink" title="原型、构造函数、实例、原型链之间的关系"></a>原型、构造函数、实例、原型链之间的关系</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/front-end/other/front-end-basics/./prototype.png" alt="原型、构造函数、实例、原型链" title="">                </div>                <div class="image-caption">原型、构造函数、实例、原型链</div>            </figure><p>let M = function(){}<br>let o = new M();<br>构造函数：M；实例：o；原型对象：M.prototype/o.<strong>proto</strong>；原型链：通过<strong>proto</strong>一直向上查找<strong>proto</strong>的链<br>只有构造函数才有prototype属性，只有对象(实例也是对象)和函数才有<strong>proto</strong>属性<br>o.<strong>proto</strong> === M.prototype // true<br>M.prototype.<strong>proto</strong> === Object.prototype // true<br>o.<strong>proto</strong>.constructor === M // true 使用这个方法来判断是否为M的实例对象，instanceof不严谨</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/front-end/other/front-end-basics/./prototype2.png" alt="实例、构造函数、原型" title="">                </div>                <div class="image-caption">实例、构造函数、原型</div>            </figure><p>o instanceof M // true<br>o instanceof Object // true</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/front-end/other/front-end-basics/./prototype3.png" alt="new运算符" title="">                </div>                <div class="image-caption">new运算符</div>            </figure><h2 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h2><h3 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Animal()&#123;</span><br><span class="line">  this.name = &apos;name&apos;;</span><br><span class="line">&#125;</span><br><span class="line">// ES6</span><br><span class="line">class Animal()&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    this.name = &apos;name&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="借助构造函数实现继承"><a href="#借助构造函数实现继承" class="headerlink" title="借助构造函数实现继承"></a>借助构造函数实现继承</h3><blockquote><p>缺点：无法继承prototype的属性和方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Parent()&#123;</span><br><span class="line">  this.name = &apos;parent&apos;;</span><br><span class="line">&#125;</span><br><span class="line">function Child()&#123;</span><br><span class="line">  Parent.call(this);</span><br><span class="line">  this.type = &apos;child&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="借助原型链实现继承"><a href="#借助原型链实现继承" class="headerlink" title="借助原型链实现继承"></a>借助原型链实现继承</h3><blockquote><p>缺点：共用prototype属性和方法，修改一个影响全部</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Parent()&#123;</span><br><span class="line">  this.name = &apos;parent&apos;;</span><br><span class="line">&#125;</span><br><span class="line">function Child()&#123;</span><br><span class="line">  this.type = &apos;child&apos;;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = new Parent();</span><br></pre></td></tr></table></figure><h3 id="组合方式"><a href="#组合方式" class="headerlink" title="组合方式"></a>组合方式</h3><blockquote><p>使用instanceof的时候Child和Parent都为true</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Parent()&#123;</span><br><span class="line">  this.name = &apos;parent&apos;;</span><br><span class="line">  this.play = [1,2,3];</span><br><span class="line">&#125;</span><br><span class="line">function Child()&#123;</span><br><span class="line">  Parent.call(this);</span><br><span class="line">  this.type = &apos;child&apos;;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = new Parent();</span><br></pre></td></tr></table></figure><h4 id="优化一"><a href="#优化一" class="headerlink" title="优化一"></a>优化一</h4><blockquote><p>缺点：Child的实例对象使用constructor时，指向Parent</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Parent()&#123;</span><br><span class="line">  this.name = &apos;parent&apos;;</span><br><span class="line">  this.play = [1,2,3];</span><br><span class="line">&#125;</span><br><span class="line">function Child()&#123;</span><br><span class="line">  Parent.call(this);</span><br><span class="line">  this.type = &apos;child&apos;;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = Parent.prototype;</span><br></pre></td></tr></table></figure><h4 id="优化二"><a href="#优化二" class="headerlink" title="优化二"></a>优化二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Parent()&#123;</span><br><span class="line">  this.name = &apos;parent&apos;;</span><br><span class="line">  this.play = [1,2,3];</span><br><span class="line">&#125;</span><br><span class="line">function Child()&#123;</span><br><span class="line">  Parent.call(this);</span><br><span class="line">  this.type = &apos;child&apos;;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = Object.create(Parent.prototype);</span><br><span class="line">Child.prototype.construcor = Child;</span><br></pre></td></tr></table></figure><h2 id="通信类"><a href="#通信类" class="headerlink" title="通信类"></a>通信类</h2><h3 id="同源策略及限制"><a href="#同源策略及限制" class="headerlink" title="同源策略及限制"></a>同源策略及限制</h3><ul><li>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。</li><li>这是一个用于隔离潜在恶意文件的关键的安全机制。</li><li>Cookie、LocalStorage和IndexDB无法读取</li><li>DOM无法获得</li><li>Ajax请求不能发送</li></ul><h2 id="前后端如何通信"><a href="#前后端如何通信" class="headerlink" title="前后端如何通信"></a>前后端如何通信</h2><ul><li>Ajax</li><li>WebSocket</li><li>CORS</li></ul><h2 id="如何创建Ajax"><a href="#如何创建Ajax" class="headerlink" title="如何创建Ajax"></a>如何创建Ajax</h2><ul><li>XMLHttpRequest对象的工作流程(XMLHttpRequest、ActiveXObject(‘Microsoft.XMLHTTP’))</li><li>兼容性处理</li><li>事件的触发条件</li><li>事件的触发顺序</li></ul><h2 id="跨域通信的几种方式"><a href="#跨域通信的几种方式" class="headerlink" title="跨域通信的几种方式"></a>跨域通信的几种方式</h2><ul><li>JSONP</li><li>Hash</li><li>postMessage</li><li>WebSocket</li><li>CORS</li></ul><h3 id="postMessage使用"><a href="#postMessage使用" class="headerlink" title="postMessage使用"></a>postMessage使用</h3><h3 id="CORS使用"><a href="#CORS使用" class="headerlink" title="CORS使用"></a>CORS使用</h3><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h2 id="安全类"><a href="#安全类" class="headerlink" title="安全类"></a>安全类</h2><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>通常称为跨站请求伪造，英文名Cross-site request forgery</p><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><p>利用接口漏洞，多次执行接口</p><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><ul><li>Token验证</li><li>Referer验证</li><li>隐藏令牌</li></ul><h3 id="XSS-http-www-imooc-com-learn-812"><a href="#XSS-http-www-imooc-com-learn-812" class="headerlink" title="XSS(http://www.imooc.com/learn/812)"></a>XSS(<a href="http://www.imooc.com/learn/812" target="_blank" rel="noopener">http://www.imooc.com/learn/812</a>)</h3><p><a href="https://www.qdfuns.com/article/40048/bfb73a7b6b6495c8105dab76faa4dfff.html" target="_blank" rel="noopener">https://www.qdfuns.com/article/40048/bfb73a7b6b6495c8105dab76faa4dfff.html</a><br>跨域脚本攻击，cross-site scripting</p><h4 id="攻击原理-1"><a href="#攻击原理-1" class="headerlink" title="攻击原理"></a>攻击原理</h4><p>向页面注入js进行运行</p><h2 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><a href="https://segmentfault.com/a/1190000009426421" target="_blank" rel="noopener">快速排序</a><br><a href="https://segmentfault.com/a/1190000009366805" target="_blank" rel="noopener">选择排序</a><br><a href="https://segmentfault.com/a/1190000009461832" target="_blank" rel="noopener">希尔排序</a></p><h3 id="堆栈、队列、链表"><a href="#堆栈、队列、链表" class="headerlink" title="堆栈、队列、链表"></a>堆栈、队列、链表</h3><p><a href="https://juejin.im/entry/58759e79128fe1006b48cdfd" target="_blank" rel="noopener">https://juejin.im/entry/58759e79128fe1006b48cdfd</a></p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p><a href="https://segmentfault.com/a/1190000009857470" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009857470</a></p><h3 id="波兰式和逆波兰式"><a href="#波兰式和逆波兰式" class="headerlink" title="波兰式和逆波兰式"></a>波兰式和逆波兰式</h3><p>理论: <a href="https://www.cnblogs.com/chenying99/p/3675876.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenying99/p/3675876.html</a><br>源码: <a href="https://github.com/Tairraos/rpn.js/blob/master/rpn.js" target="_blank" rel="noopener">https://github.com/Tairraos/rpn.js/blob/master/rpn.js</a></p><h2 id="渲染机制类"><a href="#渲染机制类" class="headerlink" title="渲染机制类"></a>渲染机制类</h2><h3 id="什么是DOCTYPE及作用"><a href="#什么是DOCTYPE及作用" class="headerlink" title="什么是DOCTYPE及作用"></a>什么是DOCTYPE及作用</h3><p>DTD(document type definition, 文档类型定义) 是一系列的语法规则，用来定义XML或(X)HTML的文件类型。浏览器会用它来判断文档类型，决定用何种协议来解析，<br>以及切换浏览器模式<br>DOCTYPE是用来声明文档类型和DTD规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错</p><p>HTML5 的DOCTYPE头为<code>&lt;!DOCTYPE html&gt;</code><br>HTML4.0.1包含严格模式(strict)和宽松模式(loose)，不包括展示性和弃用元素</p><p>浏览器渲染过程</p><p>HTML通过解析生成DOM树，样式通过解析生成样式规则，DOM树和样式规则组合生成渲染树，渲染、绘制视图</p><h3 id="重排reflow"><a href="#重排reflow" class="headerlink" title="重排reflow"></a>重排reflow</h3><p>DOM结构中的各个元素都有自己的盒子(模型)，这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow</p><h3 id="触发reflow"><a href="#触发reflow" class="headerlink" title="触发reflow"></a>触发reflow</h3><ul><li>增加、修改、删除DOM节点时，会导致reflow或repaint</li><li>移动DOM的位置，或是写动画的时候</li><li>修改CSS样式的时候</li><li>resize窗口的时候(移动端没有这个问题)，或是滚动的时候</li><li>修改网页的默认字体时(不允许突然修改字体，会导致浏览器出现问题)</li></ul><h3 id="重绘repaint"><a href="#重绘repaint" class="headerlink" title="重绘repaint"></a>重绘repaint</h3><p>当各种盒子的位置、大小以及其他属性，如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照各自的特性绘制一遍，于是页面的内容出现了，<br>这个过程称之为repaint</p><h3 id="触发repaint-界面变动都会触发repaint"><a href="#触发repaint-界面变动都会触发repaint" class="headerlink" title="触发repaint(界面变动都会触发repaint)"></a>触发repaint(界面变动都会触发repaint)</h3><ul><li>DOM改动</li><li>CSS改动</li></ul><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>浏览器是单线程的，先执行同步操作，再执行异步队列</p><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><ul><li>setTimeout和setInterval</li><li>DOM事件</li><li>ES6中的Promise</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>理解JS的单线程的概念</li><li>理解任务队列</li><li>理解Event Loop</li><li>理解哪些语句会放入异步任务队列</li><li>理解语句放入异步任务队列的时机</li></ul><h2 id="页面性能类"><a href="#页面性能类" class="headerlink" title="页面性能类"></a>页面性能类</h2><h3 id="提升页面性能的方法"><a href="#提升页面性能的方法" class="headerlink" title="提升页面性能的方法"></a>提升页面性能的方法</h3><p>资源压缩合并，减少HTTP请求<br>非核心代码异步加载 → 异步加载的方式 → 异步加载的区别<br>利用浏览器缓存 → 缓存的分类 → 缓存的原理<br>使用CDN<br>预解析DNS，https协议开头的，很多浏览器默认关闭dns预解析，需要执行第一行代码，强制开启预解析</p><p><meta http-equiv="x-dns-prefetch-control" control="on"> // 强制打开a标签的预解析</p><link rel="dns-prefetch" href="//host_name_to_prefetch.com"><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>异步加载的方式<br>动态脚本加载<br>defer<br>async<br>异步加载的区别<br>defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行<br>async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><h4 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a>缓存分类</h4><p>强缓存(如果Expires和Cache-Contorl同时有，则以Cache-Control为优先)<br>Expires  Expires: Thu ,21 Jan 2018 23:59:23 GMT  以浏览器的时间作比较<br>Cache-Control  Cache-Control: max-age=3600  以服务器的时间作比较</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>Last-Modified(服务器下发的) If-Modified-Since(客户端请求时带的)  Last-Modified: Wed ,26 Jan 2018 00:34:23 GMT<br>Etag(服务器下发) If-None-Match(客户端发起)</p><h2 id="错误监控"><a href="#错误监控" class="headerlink" title="错误监控"></a>错误监控</h2><h3 id="前端错误的分类"><a href="#前端错误的分类" class="headerlink" title="前端错误的分类"></a>前端错误的分类</h3><ul><li>即时运行错误(代码错误)</li><li>资源加载错误</li></ul><h3 id="错误的捕获方式"><a href="#错误的捕获方式" class="headerlink" title="错误的捕获方式"></a>错误的捕获方式</h3><ul><li>即时运行错误的捕获方式<br>try…catch<br>window.onerror</li><li>资源加载错误(不会冒泡)<br>object.onerror<br>performance.getEntries()<br>Error事件捕获(window.addEventListener(‘error’,fn, true)，在捕获阶段获取，不在冒泡阶段获取冒泡)<br>延伸：跨域的js运行错误跨域捕获吗，错误提示什么，应该怎么处理？</li></ul><p>在script标签增加crossorigin属性<br>设置js资源响应头Access-Control-Allow-Origin:*</p><h3 id="上报错误的基本原理"><a href="#上报错误的基本原理" class="headerlink" title="上报错误的基本原理"></a>上报错误的基本原理</h3><p>采用Ajax通信的方式上报<br>利用Image对象上报((new Image()).src = ‘’，主要这个)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网页加载优化&quot;&gt;&lt;a href=&quot;#网页加载优化&quot; class=&quot;headerlink&quot; title=&quot;网页加载优化&quot;&gt;&lt;/a&gt;网页加载优化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
      <category term="html" scheme="https://tragiclife.github.io/tags/html/"/>
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>文件类型转换</title>
    <link href="https://tragiclife.github.io/front-end/js/file-type-conversion/"/>
    <id>https://tragiclife.github.io/front-end/js/file-type-conversion/</id>
    <published>2018-12-23T00:10:50.000Z</published>
    <updated>2019-01-20T14:45:30.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="canvas转dataURL：canvas对象、转换格式、图像品质"><a href="#canvas转dataURL：canvas对象、转换格式、图像品质" class="headerlink" title="canvas转dataURL：canvas对象、转换格式、图像品质"></a>canvas转dataURL：canvas对象、转换格式、图像品质</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function canvasToDataURL(canvas, format, quality) &#123;</span><br><span class="line">  return canvas.toDataURL(format || &apos;image/jpeg&apos;, quality || 1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataURL转canvas"><a href="#DataURL转canvas" class="headerlink" title="DataURL转canvas"></a>DataURL转canvas</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function dataURLToCanvas(dataurl, cb) &#123;</span><br><span class="line">  let canvas = document.createElement(&apos;canvas&apos;);</span><br><span class="line">  let ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">  let img = new Image();</span><br><span class="line">  img.onload = function () &#123;</span><br><span class="line">    canvas.width = img.width;</span><br><span class="line">    canvas.height = img.height;</span><br><span class="line">    ctx.drawImage(img, 0, 0);</span><br><span class="line">    cb(canvas);</span><br><span class="line">  &#125;;</span><br><span class="line">  img.src = dataurl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="image转canvas：图片地址"><a href="#image转canvas：图片地址" class="headerlink" title="image转canvas：图片地址"></a>image转canvas：图片地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function imageToCanvas(src, cb) &#123;</span><br><span class="line">  let canvas = document.createElement(&apos;canvas&apos;);</span><br><span class="line">  let ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">  let img = new Image();</span><br><span class="line">  img.src = src;</span><br><span class="line">  img.onload = function () &#123;</span><br><span class="line">    canvas.width = img.width;</span><br><span class="line">    canvas.height = img.height;</span><br><span class="line">    ctx.drawImage(img, 0, 0);</span><br><span class="line">    cb(canvas);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="canvas转image"><a href="#canvas转image" class="headerlink" title="canvas转image"></a>canvas转image</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function canvasToImage(canvas) &#123;</span><br><span class="line">  let img = new Image();</span><br><span class="line">  img.src = canvas.toDataURL(&apos;image/jpeg&apos;, 1.0);</span><br><span class="line">  return img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File-Blob对象转DataURL"><a href="#File-Blob对象转DataURL" class="headerlink" title="File/Blob对象转DataURL"></a>File/Blob对象转DataURL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function fileOrBlobToDataURL(obj, cb) &#123;</span><br><span class="line">  let a = new FileReader();</span><br><span class="line">  a.readAsDataURL(obj);</span><br><span class="line">  a.onload = function (e) &#123;</span><br><span class="line">    cb(e.target.result);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataURL转Blob对象"><a href="#DataURL转Blob对象" class="headerlink" title="DataURL转Blob对象"></a>DataURL转Blob对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function dataURLToBlob(dataurl) &#123;</span><br><span class="line">  let arr = dataurl.split(&apos;,&apos;);</span><br><span class="line">  let mime = arr[0].match(/:(.*?);/)[1];</span><br><span class="line">  let bstr = atob(arr[1]);</span><br><span class="line">  let n = bstr.length;</span><br><span class="line">  let u8arr = new Uint8Array(n);</span><br><span class="line">  while (n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">  &#125;</span><br><span class="line">  return new Blob([u8arr], &#123;type: mime&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Blob转image"><a href="#Blob转image" class="headerlink" title="Blob转image"></a>Blob转image</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function blobToImage(blob, cb) &#123;</span><br><span class="line">  fileOrBlobToDataURL(blob, function (dataurl) &#123;</span><br><span class="line">    let img = new Image();</span><br><span class="line">    img.src = dataurl;</span><br><span class="line">    cb(img);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="image转Blob"><a href="#image转Blob" class="headerlink" title="image转Blob"></a>image转Blob</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function imageToBlob(src, cb) &#123;</span><br><span class="line">  imageToCanvas(src, function (canvas) &#123;</span><br><span class="line">    cb(dataURLToBlob(canvasToDataURL(canvas)));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Blob转canvas"><a href="#Blob转canvas" class="headerlink" title="Blob转canvas"></a>Blob转canvas</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function BlobToCanvas(blob, cb) &#123;</span><br><span class="line">  fileOrBlobToDataURL(blob, function (dataurl) &#123;</span><br><span class="line">    dataURLToCanvas(dataurl, cb);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="canvas转Blob"><a href="#canvas转Blob" class="headerlink" title="canvas转Blob"></a>canvas转Blob</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function canvasToBlob(canvas, cb) &#123;</span><br><span class="line">  cb(dataURLToBlob(canvasToDataURL(canvas)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="image转dataURL"><a href="#image转dataURL" class="headerlink" title="image转dataURL"></a>image转dataURL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function imageToDataURL(src, cb) &#123;</span><br><span class="line">  imageToCanvas(src, function (canvas) &#123;</span><br><span class="line">    cb(canvasToDataURL(canvas));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dataURL转image，这个不需要转，直接给了src就能用"><a href="#dataURL转image，这个不需要转，直接给了src就能用" class="headerlink" title="dataURL转image，这个不需要转，直接给了src就能用"></a>dataURL转image，这个不需要转，直接给了src就能用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function dataURLToImage(dataurl) &#123;</span><br><span class="line">  let img = new Image();</span><br><span class="line">  img.src = d;</span><br><span class="line">  return img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将base64转换为文件"><a href="#将base64转换为文件" class="headerlink" title="将base64转换为文件"></a>将base64转换为文件</h2><blockquote><p>filename需要带后缀，否则会转成tmp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function dataURLToFile(dataurl, filename) &#123;</span><br><span class="line">  let arr = dataurl.split(&apos;,&apos;);</span><br><span class="line">  let bstr = window.atob(arr[1]);</span><br><span class="line">  let len = bstr.length;</span><br><span class="line">  let u8arr = new Uint8Array(len);</span><br><span class="line">  let mime = arr[0].match(/:(.*?);/)[1];</span><br><span class="line"></span><br><span class="line">  while (len--) &#123;</span><br><span class="line">    u8arr[len] = bstr.charCodeAt(len);</span><br><span class="line">  &#125;</span><br><span class="line">  return new File([u8arr], filename, &#123;type: mime&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;canvas转dataURL：canvas对象、转换格式、图像品质&quot;&gt;&lt;a href=&quot;#canvas转dataURL：canvas对象、转换格式、图像品质&quot; class=&quot;headerlink&quot; title=&quot;canvas转dataURL：canvas对象、转换
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则</title>
    <link href="https://tragiclife.github.io/front-end/js/regexp/"/>
    <id>https://tragiclife.github.io/front-end/js/regexp/</id>
    <published>2018-12-20T00:35:46.000Z</published>
    <updated>2019-01-20T14:44:55.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则应用场景"><a href="#正则应用场景" class="headerlink" title="正则应用场景"></a>正则应用场景</h2><h3 id="文件夹命名"><a href="#文件夹命名" class="headerlink" title="文件夹命名"></a>文件夹命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[\/\\:*?&quot;&lt;&gt;!]+/匹配特殊符号</span><br></pre></td></tr></table></figure><h3 id="去除字符串两端空白"><a href="#去除字符串两端空白" class="headerlink" title="去除字符串两端空白"></a>去除字符串两端空白</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.trim ＝ function()&#123;</span><br><span class="line">  return this.replace(/(∧\s*)|(\s*$)/g,&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配location-search中的请求参数"><a href="#匹配location-search中的请求参数" class="headerlink" title="匹配location.search中的请求参数"></a>匹配location.search中的请求参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;)</span><br><span class="line">let match = str.match(reg)</span><br><span class="line">match[2] // 参数的值</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.im/post/5bda4e6fe51d45681f245274" target="_blank" rel="noopener">一次性搞懂JavaScript正则表达式之语法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则应用场景&quot;&gt;&lt;a href=&quot;#正则应用场景&quot; class=&quot;headerlink&quot; title=&quot;正则应用场景&quot;&gt;&lt;/a&gt;正则应用场景&lt;/h2&gt;&lt;h3 id=&quot;文件夹命名&quot;&gt;&lt;a href=&quot;#文件夹命名&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>错误捕获</title>
    <link href="https://tragiclife.github.io/front-end/js/error-catch/"/>
    <id>https://tragiclife.github.io/front-end/js/error-catch/</id>
    <published>2018-12-18T23:37:38.000Z</published>
    <updated>2019-01-20T14:42:05.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue中的错误捕获"><a href="#Vue中的错误捕获" class="headerlink" title="Vue中的错误捕获"></a>Vue中的错误捕获</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 2.2.0+支持，2.4.0+支持自定义事件的捕获</span><br><span class="line">Vue.config.errorHandler = (err, vm, info) =&gt; &#123;</span><br><span class="line">  let &#123;</span><br><span class="line">    message, // 异常信息</span><br><span class="line">    name, // 异常名称</span><br><span class="line">    script,  // 异常脚本url</span><br><span class="line">    line,  // 异常行号</span><br><span class="line">    column,  // 异常列号</span><br><span class="line">    stack  // 异常堆栈信息</span><br><span class="line">  &#125; = err;</span><br><span class="line">  // info 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a>window.onerror</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">window.onerror = (errorMessage, scriptURI, lineNo, columnNo, error) =&gt; &#123;</span><br><span class="line">  console.log(&apos;errorMessage: &apos; + errorMessage); // 异常信息</span><br><span class="line">  console.log(&apos;scriptURI: &apos; + scriptURI); // 异常文件路径</span><br><span class="line">  console.log(&apos;lineNo: &apos; + lineNo); // 异常行号</span><br><span class="line">  console.log(&apos;columnNo: &apos; + columnNo); // 异常列号</span><br><span class="line">  console.log(&apos;error: &apos; + error); // 异常堆栈信息</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="window-addEventListener-‘error’"><a href="#window-addEventListener-‘error’" class="headerlink" title="window.addEventListener(‘error’)"></a>window.addEventListener(‘error’)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;error&apos;, (err) =&gt; &#123;</span><br><span class="line">  console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/luozhihao/p/8635507.html" target="_blank" rel="noopener">https://www.cnblogs.com/luozhihao/p/8635507.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue中的错误捕获&quot;&gt;&lt;a href=&quot;#Vue中的错误捕获&quot; class=&quot;headerlink&quot; title=&quot;Vue中的错误捕获&quot;&gt;&lt;/a&gt;Vue中的错误捕获&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="vue" scheme="https://tragiclife.github.io/tags/vue/"/>
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="error" scheme="https://tragiclife.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>Canvas</title>
    <link href="https://tragiclife.github.io/front-end/js/canvas/"/>
    <id>https://tragiclife.github.io/front-end/js/canvas/</id>
    <published>2018-12-16T23:39:44.000Z</published>
    <updated>2019-01-20T14:41:07.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 创建canvas对象</span><br><span class="line">var ctx = $(&quot;#canvas&quot;)[0].getContext(&apos;2d&apos;);</span><br><span class="line">var ctx2 = $(&quot;#canvas2&quot;)[0].getContext(&apos;2d&apos;);</span><br><span class="line"></span><br><span class="line">// 设置线条颜色</span><br><span class="line">ctx.strokeStyle = &apos;#00f&apos;;</span><br><span class="line"></span><br><span class="line">// 设置填充颜色</span><br><span class="line">ctx.fillStyle = &apos;#f00&apos;;</span><br><span class="line">//fillRect(x, y, width, height)</span><br><span class="line"></span><br><span class="line">// 绘制有颜色填充的矩形,参数：起始坐标</span><br><span class="line">ctx.fillRect(0,0,100,50);</span><br><span class="line">//strokeRect(x, y, width, height)</span><br><span class="line"></span><br><span class="line">// 绘制无填充色的矩形</span><br><span class="line">ctx.strokeRect(150,0,100,50);</span><br></pre></td></tr></table></figure><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 设置字体大小和字体</span><br><span class="line">ctx.font = &apos;30px Arial&apos;;</span><br><span class="line">ctx.cont = &apos;italic 30px serif&apos;; // 斜体</span><br><span class="line"></span><br><span class="line">// 绘制实心文字</span><br><span class="line">ctx.fillText(&apos;Canvas&apos;,150,25);</span><br><span class="line"></span><br><span class="line">// 绘制空心文字</span><br><span class="line">ctx.strokeText(&apos;Canvas&apos;,0,25);</span><br><span class="line"> </span><br><span class="line">// 设置颜色渐变</span><br><span class="line">var grd = ctx.createLinearGradient(0,0,100,0); //参数：起始坐标(x0,y0),终止坐标(x1,y1)</span><br><span class="line">grd.addColorStop(0,&apos;blue&apos;); //指定停止颜色,值为0-1</span><br><span class="line">grd.addColorStop(0.5,&apos;white&apos;);</span><br><span class="line">grd.addColorStop(1,&apos;red&apos;);</span><br><span class="line">ctx.fillStyle = grd;</span><br><span class="line">ctx.fillRect(0,50,100,50);</span><br><span class="line"> </span><br><span class="line">//clearRect(x, y, width, height)</span><br><span class="line">ctx.clearRect(0,30,10,10); //清空矩形区域的内容,参数：x坐标,y坐标,宽度,高度</span><br></pre></td></tr></table></figure><h2 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//moveTo(x, y)</span><br><span class="line">// 定义线条开始的坐标</span><br><span class="line">ctx2.moveTo(0,0);</span><br><span class="line">//lineTo(x, y)</span><br><span class="line"></span><br><span class="line">// 定义线条结束的坐标</span><br><span class="line">ctx2.lineTo(200,100);</span><br><span class="line"></span><br><span class="line">// 绘制线条，或者使用fill</span><br><span class="line">ctx2.stroke();</span><br></pre></td></tr></table></figure><h2 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 重新生成一条路径</span><br><span class="line">ctx2.beginPath();</span><br><span class="line">//arc(x, y, radius, startAngle, endAngle, anticlockwise)</span><br><span class="line"></span><br><span class="line">// 绘制圆形，参数：x坐标，y坐标，圆的半径，起始角度，终止角度;anticlockwise：false为顺时针，true为逆时针(默认为false)</span><br><span class="line">ctx2.arc(100,50,30,0,Math.PI * 2,false);</span><br><span class="line">ctx2.stroke();</span><br></pre></td></tr></table></figure><h2 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx2.beginPath();</span><br><span class="line">ctx2.moveTo(25,50);</span><br><span class="line">ctx2.arc(25,50,25,0,Math.PI * 0.5,false); //参数：x坐标，y坐标，半径，起始角度(圆的正右方开始)，终止角度，是否逆时针(false为顺时针，true为逆时针)</span><br><span class="line">ctx2.lineTo(25,50)</span><br><span class="line">ctx2.stroke();</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/charmingyj/p/5527223.html" target="_blank" rel="noopener">https://www.cnblogs.com/charmingyj/p/5527223.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="canvas" scheme="https://tragiclife.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>对象</title>
    <link href="https://tragiclife.github.io/front-end/js/object/"/>
    <id>https://tragiclife.github.io/front-end/js/object/</id>
    <published>2018-12-16T23:28:19.000Z</published>
    <updated>2019-01-19T15:48:10.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断是不是数组-对象"><a href="#判断是不是数组-对象" class="headerlink" title="判断是不是数组/对象"></a>判断是不是数组/对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 是否为数组</span><br><span class="line">if(typeof Array.isArray===&quot;undefined&quot;)&#123;</span><br><span class="line">  Array.isArray = function(arg)&#123;</span><br><span class="line">    return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 是否为对象</span><br><span class="line">Object.prototype.toString.call(arg) === &apos;[object Object]&apos;</span><br></pre></td></tr></table></figure><h2 id="defineProperty-defineProperties"><a href="#defineProperty-defineProperties" class="headerlink" title="defineProperty/defineProperties"></a>defineProperty/defineProperties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">writable、value和set、get不能同时存在</span><br><span class="line">Object.defineProperty(obj, prop, &#123;</span><br><span class="line">  configurable: false, //是否可以通过delete删除，能否修改属性的特性。直白点：是否可配置</span><br><span class="line">  enumerable: false, //枚举性，表示是否可以通过for-in循环返回</span><br><span class="line">  writable: false, //可写性：是否可以修改属性的值</span><br><span class="line">  value: undefined, //包含属性的值，也就是对应的可读性。</span><br><span class="line">  set: undefined,</span><br><span class="line">  get: undefined</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ol><li><code>Object.assign(obj)</code></li><li>扩展运算符(…) <code>{...obj}</code></li><li><code>let obj = Object.defineProperties({}, Object.getOwnPropertyDescriptors(copyObj))</code></li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol><li><code>JSON.parse(JSON.stringify(obj))</code><br><strong>局限性</strong><ol><li>会忽略 undefined</li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ol></li><li><code>MessageChannel</code>，不支持包含函数的对象，异步，支持Android4.4+<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function deepCopy(obj) &#123;</span><br><span class="line">  return new Promise(resolve =&gt; &#123;</span><br><span class="line">    const &#123;port1, port2&#125; = new MessageChannel();</span><br><span class="line">    port2.onmessage = ev =&gt; resolve(ev.data);</span><br><span class="line">    port1.postMessage(obj);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="new的过程"><a href="#new的过程" class="headerlink" title="new的过程"></a>new的过程</h2><ol><li>创建一个新对象</li><li>将构造函数的作用域赋值给新对象</li><li>执行构造函数的代码</li><li>返回新的对象</li></ol><h2 id="禁止扩展方法"><a href="#禁止扩展方法" class="headerlink" title="禁止扩展方法"></a>禁止扩展方法</h2><h3 id="preventExtensions"><a href="#preventExtensions" class="headerlink" title="preventExtensions"></a>preventExtensions</h3><p>禁止对象扩展，可修改已有的值，可以通过defineProperty重新定义已有属性，<code>Object.preventExtensions(obj)</code></p><h3 id="isExtensible"><a href="#isExtensible" class="headerlink" title="isExtensible"></a>isExtensible</h3><p>判断对象是否可扩展，<code>Object.isExtensible(obj)</code></p><h3 id="seal"><a href="#seal" class="headerlink" title="seal"></a>seal</h3><p>禁止对象扩展，可修改已有的值，不可以通过defineProperty重新定义已有属性，<code>Object.seal(obj)</code></p><h3 id="isSealed"><a href="#isSealed" class="headerlink" title="isSealed"></a>isSealed</h3><p>判断对象是否密封，<code>Objct.isSealed(obj)</code></p><h3 id="freeze"><a href="#freeze" class="headerlink" title="freeze"></a>freeze</h3><p>冻结对象，返回冻结的对象，不能做任何操作，只能读取，<code>Object.freeze(obj)</code></p><h3 id="isFrozen"><a href="#isFrozen" class="headerlink" title="isFrozen"></a>isFrozen</h3><p>判断对象是否冻结，<code>Object.isFrozen(obj)</code></p><h3 id="汇总表格"><a href="#汇总表格" class="headerlink" title="汇总表格"></a>汇总表格</h3><table><thead><tr><th>函数</th><th>对象已设置为不可扩展的</th><th>为每个属性将configurable设置为false</th><th>为每个属性将writable设置为false</th></tr></thead><tbody><tr><td>Object.preventExtensions</td><td>是</td><td>否</td><td>否</td></tr><tr><td>Object.seal</td><td>是</td><td>是</td><td>否</td></tr><tr><td>Object.freeze</td><td>是</td><td>是</td><td>是</td></tr></tbody></table><table><thead><tr><th>函数</th><th>对象是否可扩展</th><th>为每个属性将configurable设置为false</th><th>为每个属性将writable设置为false</th></tr></thead><tbody><tr><td>Object.isExtensible</td><td>是</td><td>否</td><td>否</td></tr><tr><td>Object.isSealed</td><td>否</td><td>是</td><td>是</td></tr><tr><td>Object.isFrozen</td><td>否</td><td>是</td><td>是</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>原型链的顶层是什么</strong><br><code>Object.prototype.__proto__</code> // null</p><p><strong>Object.create(null)、new Object()、{}的区别</strong><br>Object.create(null)创建的对象没有继承Object的属性和方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;判断是不是数组-对象&quot;&gt;&lt;a href=&quot;#判断是不是数组-对象&quot; class=&quot;headerlink&quot; title=&quot;判断是不是数组/对象&quot;&gt;&lt;/a&gt;判断是不是数组/对象&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="Object" scheme="https://tragiclife.github.io/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>事件</title>
    <link href="https://tragiclife.github.io/front-end/js/event/"/>
    <id>https://tragiclife.github.io/front-end/js/event/</id>
    <published>2018-12-15T23:17:49.000Z</published>
    <updated>2019-01-22T14:12:28.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件级别"><a href="#事件级别" class="headerlink" title="事件级别"></a>事件级别</h2><ul><li>DOM0    element.onclick = function(){}</li><li>DOM2    element.addEventListener(‘click’, function(){}, false)    IE:attachEventListener</li><li>DOM3    element.addEventListener(‘keyup’, function(){}, false)</li></ul><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>捕获 → 目标阶段 → 冒泡<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/front-end/js/event/./event-flow.png" alt="事件流" title="">                </div>                <div class="image-caption">事件流</div>            </figure></p><p><strong>DOM事件捕获的具体流程</strong><br>如何获取html标签：document.documentElement<br>window → document → html → body → … → 目标元素 → … → body → html → document → window</p><h2 id="事件的绑定与解绑"><a href="#事件的绑定与解绑" class="headerlink" title="事件的绑定与解绑"></a>事件的绑定与解绑</h2><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(type, fn, useCapture/options)</span><br><span class="line">useCapture: 默认为false，监听冒泡阶段</span><br><span class="line">options可传值：</span><br><span class="line"> - passive: false 是否阻止默认事件；如果设置为true，则即使在触发的函数中使用e.preventDefault也不会生效</span><br><span class="line"> - capture: false 触发阶段；true为捕获时触发，false为冒泡时触发</span><br><span class="line"> - once: 只执行一次</span><br><span class="line"></span><br><span class="line">IE</span><br><span class="line">attachEvent(&apos;on&apos; + type, listener);</span><br></pre></td></tr></table></figure><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 传值与绑定相同</span><br><span class="line">removeEventListener(type, fn, useCapture/options)</span><br><span class="line"></span><br><span class="line">IE</span><br><span class="line">detachEvent(&apos;on&apos; + type, listener);</span><br></pre></td></tr></table></figure><h2 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h2><ul><li>event.preventDefault() // 阻止默认事件</li><li>event.stopPropagation() // 阻止事件冒泡</li><li>event.stopImmediatePropagation() // 阻止事件继续执行，即一个DOM绑定多个事件，执行该方法会阻止在该回调后注册的回调函数的执行</li><li>event.currentTarget // 绑定事件的元素</li><li>event.target // 触发事件的元素</li></ul><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><ol><li><code>Event()</code>构造函数, 创建一个新的事件对象 Event</li><li>利用<code>addEventListener</code>中的<code>handleEvent</code></li><li><code>CustomEvent()</code>创建一个自定义事件</li><li><code>document.createEvent()</code>创建一个新的事件（Event），随之必须调用自身的<code>init</code>方法进行初始化。</li></ol><h3 id="使用Event"><a href="#使用Event" class="headerlink" title="使用Event"></a>使用Event</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let evt  = new Event(&apos;custom&apos;);</span><br><span class="line">document.addEventListner(&apos;custom&apos;, function()&#123;</span><br><span class="line">  console.log(&apos;custom&apos;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">document.dispatchEvent(evt);</span><br><span class="line"></span><br><span class="line">// 使用new Event(不能使用自定义参数detail)</span><br><span class="line">var ev = new Event(&apos;test&apos;, &#123;</span><br><span class="line">    bubbles: &apos;true&apos;,</span><br><span class="line">    cancelable: &apos;true&apos;,</span><br><span class="line">    detail: &#123;&#125;, // 细节参数、自定义参数</span><br><span class="line">    test: &apos;test&apos;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.addEventListener(&apos;test&apos;, function (event) &#123;</span><br><span class="line">    console.log(event.bubbles); // true 返回布尔值</span><br><span class="line">    console.log(event.cancelable); // true 返回布尔值</span><br><span class="line">    console.log(event.detail); // undefined</span><br><span class="line">    console.log(event.test); // undefined</span><br><span class="line">&#125;, false);</span><br><span class="line"></span><br><span class="line">document.dispatchEvent(ev);</span><br></pre></td></tr></table></figure><h3 id="使用handleEvent"><a href="#使用handleEvent" class="headerlink" title="使用handleEvent"></a>使用handleEvent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var tap = &#123;</span><br><span class="line">  handleEvent: function(e) &#123;</span><br><span class="line">    console.log(this.name); // tap</span><br><span class="line">  &#125;,</span><br><span class="line">  name:&apos;tap&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">document.addEventListener(&apos;click&apos;, tap, false);</span><br></pre></td></tr></table></figure><h3 id="使用CustomEvent"><a href="#使用CustomEvent" class="headerlink" title="使用CustomEvent"></a>使用CustomEvent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&apos;tap&apos;, function(e)&#123;</span><br><span class="line">  console.log(&apos;custom &apos; + e.detail.test); // custom test</span><br><span class="line">&#125;, false);</span><br><span class="line"></span><br><span class="line">var evt = new window.CustomEvent(&apos;tap&apos;, &#123;</span><br><span class="line">  bubbles: true, // 如果为 true，事件将冒泡到触发事件的元素的祖先</span><br><span class="line">  cancelable: true, // 如果为 true，可以使用事件对象的 stopPropagation() 方法取消事件传播。</span><br><span class="line">  detail: &#123;</span><br><span class="line">    test: &apos;test&apos;,</span><br><span class="line">  &#125; // 细节参数、自定义参数</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 触发自定义事件，返回一个布尔值，判断是否阻止默认事件，false为阻止默认事件</span><br><span class="line">document.dispatchEvent(evt);</span><br></pre></td></tr></table></figure><h3 id="使用createEvent"><a href="#使用createEvent" class="headerlink" title="使用createEvent"></a>使用createEvent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let evt = document.createEvent(&quot;HTMLEvents&quot;); // 可传值HTMLEvents、MouseEvents、UIEvents以及CustomEvent(自定义事件)</span><br><span class="line">// 初始化</span><br><span class="line">evt.initEvent(&quot;alert&quot;, false, false); // eventType,canBubble,cancelable</span><br><span class="line">// 触发</span><br><span class="line">week.dispatchEvent(evt);</span><br></pre></td></tr></table></figure><h2 id="监听storage事件"><a href="#监听storage事件" class="headerlink" title="监听storage事件"></a>监听storage事件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let setStorage = (key, newVal) =&gt; &#123;</span><br><span class="line">  let newStorageEvent = document.createEvent(&apos;StorageEvent&apos;);</span><br><span class="line">  const storage = &#123;</span><br><span class="line">    setItem(key, val) &#123;</span><br><span class="line">      localStorage.setItem(key, val);</span><br><span class="line">      // 初始化创建的事件</span><br><span class="line">      newStorageEvent.initStorageEvent(&apos;setItem&apos;, false, false, key, null, val, null, null);</span><br><span class="line">      // 派发对象</span><br><span class="line">      window.dispatchEvent(newStorageEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return storage.setItem(key, newVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h2><p>移动web页面上的click事件响应都要慢上<strong>300ms</strong><br>使用自定义tap事件代替click事件</p><h3 id="自定义tap事件原理"><a href="#自定义tap事件原理" class="headerlink" title="自定义tap事件原理"></a>自定义tap事件原理</h3><p>在<code>touchstart、touchend</code>时记录时间、手指位置，在<code>touchend</code>时进行比较，如果手指位置为同一位置(或允许移动一个非常小的位移值)且时间间隔较短(一般认为是200ms)，且过程中未曾触发过<code>touchmove</code>，即可认为出发了手持设备上的”click”，一般称它为”tap”</p><h3 id="tap穿透的解决方案"><a href="#tap穿透的解决方案" class="headerlink" title="tap穿透的解决方案"></a>tap穿透的解决方案</h3><ul><li>使用缓动动画，过渡300ms的延迟</li><li>中间层dom元素的加入，让中间层接受这个“穿透”事件，稍后隐藏</li><li>“上下”都使用tap事件，原理上解决tap穿透事件(但不可避免原生标签的click事件)</li><li>改用Fastclick的库</li></ul><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><p><code>touchstart</code>: 手指触摸屏幕触发(已经有手指放屏幕上不会触发)<br><code>touchmove</code>: 手指在屏幕华东，连续触发<br><code>touchend</code>: 手指离开屏幕时触发<br><code>touchcancel</code>: 系统取消touch时候触发(不常用)</p><h3 id="触摸属性"><a href="#触摸属性" class="headerlink" title="触摸属性"></a>触摸属性</h3><p><code>touches</code>: 跟踪触摸操作的touch对象数组<br><code>targetTouches</code>: 特定事件目标的touch对象数组<br><code>changeTouches</code>: 上次触摸改变的touch对象数组</p><h3 id="每个touch对象包含属性"><a href="#每个touch对象包含属性" class="headerlink" title="每个touch对象包含属性"></a>每个touch对象包含属性</h3><p><code>clientX</code>: 触摸目标在视口中的x坐标<br><code>clientY</code>: 触摸目标在视口中的y坐标<br><code>identifier</code>: 标识触摸的唯一ID<br><code>pageX</code>: 触摸目标在页面中的x坐标(包含滚动)<br><code>pageY</code>: 触摸目标在页面中的y坐标(包含滚动)<br><code>screenX</code>: 触摸目标在屏幕中的x坐标<br><code>screenY</code>: 触摸目标在屏幕中的y坐标<br><code>target</code>: 触摸目标的DOM节点</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/diligenceday/p/4175721.html" target="_blank" rel="noopener">https://www.cnblogs.com/diligenceday/p/4175721.html</a><br><a href="https://www.imooc.com/article/71101" target="_blank" rel="noopener">https://www.imooc.com/article/71101</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事件级别&quot;&gt;&lt;a href=&quot;#事件级别&quot; class=&quot;headerlink&quot; title=&quot;事件级别&quot;&gt;&lt;/a&gt;事件级别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DOM0    element.onclick = function(){}&lt;/li&gt;
&lt;li&gt;DOM2    
      
    
    </summary>
    
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="Event" scheme="https://tragiclife.github.io/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>移动端屏幕像素</title>
    <link href="https://tragiclife.github.io/front-end/other/mobile-screen-pixels/"/>
    <id>https://tragiclife.github.io/front-end/other/mobile-screen-pixels/</id>
    <published>2018-12-14T22:12:06.000Z</published>
    <updated>2019-01-11T15:59:11.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pixel-移动开发像素知识"><a href="#Pixel-移动开发像素知识" class="headerlink" title="Pixel 移动开发像素知识"></a>Pixel 移动开发像素知识</h2><p>px: css pixels 逻辑像素，浏览器使用的抽象单位<br>dp,pt: device independent pixels 设备无关像素<br>dpr: devicePixelRatio 设备像素缩放比</p><p>计算公式：1px = (dpr)² * dp</p><p>DPI: 打印机每英寸可以喷的墨汁点(印刷行业)<br>PPI: 屏幕每英寸的像素数量，即单位英寸内的像素密度</p><p>计算公式：以iPhone5为例子<br>ppi = √ (1136² + 640²) / 4 = 326ppi (视网膜Retina屏)</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">ldpi</th><th style="text-align:center">mdpi</th><th style="text-align:center">hdpi</th><th style="text-align:center">xhdpi</th></tr></thead><tbody><tr><td style="text-align:center">ppi</td><td style="text-align:center">120</td><td style="text-align:center">160</td><td style="text-align:center">240</td><td style="text-align:center">320</td></tr><tr><td style="text-align:center">默认缩放比</td><td style="text-align:center">0.75</td><td style="text-align:center">1.0</td><td style="text-align:center">1.5</td><td style="text-align:center">2.0</td></tr></tbody></table><blockquote><p>Retina屏(高清屏): dpr都是大于等于2</p></blockquote><p>PPI越高，像素数越高，图像越清晰<br>但可视度越低(小)，系统默认设置缩放比越大</p><h2 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h2><h3 id="手机浏览器默认为我们做两件事"><a href="#手机浏览器默认为我们做两件事" class="headerlink" title="手机浏览器默认为我们做两件事"></a>手机浏览器默认为我们做两件事</h3><ol><li>页面渲染在980px(ios)的viewport(为了排版正确)</li><li>缩放(排版正确后，再缩放到手机屏幕大小) //这就是网页在手机上，会全屏显示的原因</li></ol><p>visual viewport：度量/视口viewport宽高<br>visual viewport是页面当前显示在屏幕上的部分。用户可以通过滚动来改变他所看到的页面的部分，或者通过缩放来改变visual viewport的大小。<br>// 无法改变，通过缩放scale控制<br>layout viewport: 布局viewport 如图，ios的默认layout viewport为980px<br>// 可以理解为就是body的宽度，在此之上渲染页面</p><h3 id="为什么不适用默认的980px的布局viewport-layout-viewport"><a href="#为什么不适用默认的980px的布局viewport-layout-viewport" class="headerlink" title="为什么不适用默认的980px的布局viewport(layout viewport)"></a>为什么不适用默认的980px的布局viewport(layout viewport)</h3><ul><li>宽度不可控制，不同系统不同设备的默认值都可能不同</li><li>页面先在layout viewport全屏渲染css,再通过缩放由visual viewport展示，交互不友好</li><li>链接不可点</li><li>有缩放，缩放后又有滚动</li><li>font-size:40px=PC的12px,不规范，字体设置是另外一门学问了。</li></ul><h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;name=value,name=value&quot;&gt;</span><br><span class="line">width: 设置布局viewport的特定值(device-width)</span><br><span class="line">initial-scale: 设置页面的初始缩放</span><br><span class="line">minimum-scale: 最小缩放</span><br><span class="line">maximum-scale: 最大缩放</span><br><span class="line">user-scalable: 用户能否缩放</span><br></pre></td></tr></table></figure><p>最常用写法<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot;&gt;</code></p><p>方案一：根据设备的实际宽度来设计(常用)<br>手机宽320px，拿320px设计<br>方案二：1px=1dp<br>缩放0.5。根据设备的物理像素dp等于抽象像素px来设计。1像素边框和高清图片都不需要额外处理。</p><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><h3 id="媒体类型："><a href="#媒体类型：" class="headerlink" title="媒体类型："></a>媒体类型：</h3><p>screen // 屏幕<br>print // 打印机<br>handheld // 手持设备<br>all // 通用</p><h3 id="常用媒体查询参数："><a href="#常用媒体查询参数：" class="headerlink" title="常用媒体查询参数："></a>常用媒体查询参数：</h3><p>width // 视口宽度<br>height // 视口高度<br>device-width // 设备宽度<br>device-height // 设备高度<br>orientation // 定义输出设备中的页面可见区域高度是否大于或等于宽度。大于或等于为portrait(竖屏)，其余为landscape(横屏)</p><blockquote><p>@media screen and (max-width: 300px) {}</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Pixel-移动开发像素知识&quot;&gt;&lt;a href=&quot;#Pixel-移动开发像素知识&quot; class=&quot;headerlink&quot; title=&quot;Pixel 移动开发像素知识&quot;&gt;&lt;/a&gt;Pixel 移动开发像素知识&lt;/h2&gt;&lt;p&gt;px: css pixels 逻辑像素，浏览
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试记录</title>
    <link href="https://tragiclife.github.io/front-end/other/interview-record/"/>
    <id>https://tragiclife.github.io/front-end/other/interview-record/</id>
    <published>2018-12-13T22:23:55.000Z</published>
    <updated>2019-02-11T15:46:49.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p><strong>一个页面上两个div左右铺满整个浏览器，要保证左边的div一直为100px，右边的div跟随浏览器大小变化（比如浏览器为500，右边div为400，浏览器为900，右边div为800），请写出大概的css代码。</strong></p><ol><li><p>使用flex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line">&lt;div class=&apos;box&apos;&gt;&lt;div class=&apos;left&apos;&gt;&lt;/div&gt; &lt;div class=&apos;right&apos;&gt;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">//css</span><br><span class="line">.box &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    align-items: center;</span><br><span class="line">    border: 1px solid #c3c3c3;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    flex-basis：100px;</span><br><span class="line">    -webkit-flex-basis: 100px;</span><br><span class="line">    /* Safari 6.1+ */</span><br><span class="line">    background-color: red;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>浮动布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;left&quot;&gt;Left sidebar&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;Main Content&lt;/div&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">* &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 220px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">#content &#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">    margin-left: 220px;</span><br><span class="line">    /*==等于左边栏宽度==*/</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>请写出一些前端性能优化的方式，越多越好</strong></p><ol><li>减少dom操作</li><li>部署前，图片压缩，代码压缩</li><li>优化js代码结构，减少冗余代码</li><li>减少http请求，合理设置 HTTP缓存</li><li>使用内容分发cdn加速</li><li>静态资源缓存</li><li>图片延迟加载</li></ol><p><strong>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</strong></p><ol><li>浏览器查找域名的 IP 地址</li><li>这一步包括 DNS具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…</li><li>浏览器向 web 服务器发送一个 HTTP 请求</li><li>服务器的永久重定向响应（从<a href="http://example.com到http://www.example.com）" target="_blank" rel="noopener">http://example.com到http://www.example.com）</a></li><li>浏览器跟踪重定向地址</li><li>服务器处理请求</li><li>服务器返回一个 HTTP 响应</li><li>浏览器显示 HTML</li><li>浏览器发送请求获取嵌入在HTML中的资源（如图片、音频、视频、CSS、JS等等）</li><li>浏览器发送异步请求</li></ol><p><strong>请大概描述下页面访问cookie的限制条件</strong></p><ol><li>跨域问题</li><li>设置了HttpOnly</li></ol><p><strong>描述浏览器重绘和回流，哪些方法能够改善由于dom操作产生的回流</strong></p><ol><li><p>直接改变className，如果动态改变样式，则使用cssText</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 不好的写法</span><br><span class="line">var left = 1;</span><br><span class="line">var top = 1;</span><br><span class="line">el.style.left = left + &quot;px&quot;;</span><br><span class="line">el.style.top = top + &quot;px&quot;; // 比较好的写法</span><br><span class="line">el.className += &quot; className1&quot;;</span><br><span class="line"></span><br><span class="line">// 比较好的写法</span><br><span class="line">el.style.cssText += &quot;;</span><br><span class="line">left: &quot; + left + &quot;px;</span><br><span class="line">top: &quot; + top + &quot;px;&quot;;</span><br></pre></td></tr></table></figure></li><li><p>让要操作的元素进行”离线处理”，处理完后一起更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a) 使用DocumentFragment进行缓存操作,引发一次回流和重绘；</span><br><span class="line">b) 使用display:none技术，只引发两次回流和重绘；</span><br><span class="line">c) 使用cloneNode(true or false)和replaceChild技术，引发一次回流和重绘</span><br></pre></td></tr></table></figure></li></ol><p><strong>vue生命周期钩子</strong></p><ol><li>beforcreate</li><li>created</li><li>beformount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>actived</li><li>deatived</li><li>beforeDestroy</li><li>destroyed</li></ol><p><strong>js跨域请求的方式，能写几种是几种</strong></p><ol><li>通过jsonp跨域</li><li>通过修改<code>document.domain</code>来跨子域</li><li>使用<code>window.name</code>来进行跨域</li><li>使用HTML5中新引进的<code>window.postMessage</code>方法来跨域传送数据（ie 67 不支持）</li><li>CORS 需要服务器设置header ：<code>Access-Control-Allow-Origin</code>。</li><li>nginx反向代理 这个方法一般很少有人提及，但是他可以不用目标服务器配合，不过需要你搭建一个中转nginx服务器，用于转发请求</li></ol><p><strong>对前端工程化的理解</strong></p><ul><li>开发规范</li><li>模块化开发</li><li>组件化开发</li><li>组件仓库</li><li>性能优化</li><li>项目部署</li><li>开发流程</li><li>开发工具</li></ul><p><strong>js深度复制的方式</strong></p><ol><li>使用jq的<code>$.extend(true, target, obj)</code></li><li><code>newobj = Object.create(sourceObj)</code>，// 但是这个是有个问题就是newobj的更改不会影响到 sourceobj但是 sourceobj的更改会影响到newObj</li><li><code>newobj = JSON.parse(JSON.stringify(sourceObj))</code></li></ol><p><strong>js设计模式: 总体来说设计模式分为三大类</strong></p><ul><li>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li><li>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li><li>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式</li></ul><p><strong>图片预览</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; onchange=&quot;showPreview(this)&quot; /&gt;</span><br><span class="line">&lt;img id=&quot;portrait&quot; src=&quot;&quot; width=&quot;70&quot; height=&quot;75&quot;&gt;</span><br><span class="line">function showPreview(source) &#123;</span><br><span class="line">  var file = source.files[0];</span><br><span class="line">  if(window.FileReader) &#123;</span><br><span class="line">      var fr = new FileReader();</span><br><span class="line">      fr.onloadend = function(e) &#123;</span><br><span class="line">        document.getElementById(&quot;portrait&quot;).src = e.target.result;</span><br><span class="line">      &#125;;</span><br><span class="line">      fr.readAsDataURL(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>扁平化多维数组</strong></p><ol><li><p>老方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var result = []</span><br><span class="line">function unfold(arr)&#123;</span><br><span class="line">     for(var i=0;i&lt; arr.length;i++)&#123;</span><br><span class="line">      if(typeof arr[i]==&quot;object&quot; &amp;&amp; arr[i].length&gt;1) &#123;</span><br><span class="line">       unfold(arr[i]);</span><br><span class="line">     &#125; else &#123;        </span><br><span class="line">       result.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var arr = [1,3,4,5,[6,[0,1,5],9],[2,5,[1,5]],[5]];</span><br><span class="line">unfold(arr)</span><br></pre></td></tr></table></figure></li><li><p>使用tostring</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var c=[1,3,4,5,[6,[0,1,5],9],[2,5,[1,5]],[5]];</span><br><span class="line">var b = c.toString().split(&apos;,&apos;)</span><br></pre></td></tr></table></figure></li><li><p>使用es6的reduce函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr=[1,3,4,5,[6,[0,1,5],9],[2,5,[1,5]],[5]];</span><br><span class="line">const flatten = arr =&gt; arr.reduce((a, b) =&gt; a.concat(Array.isArray(b) ? flatten(b) : b), []);</span><br><span class="line">var result = flatten(arr)</span><br></pre></td></tr></table></figure></li></ol><p><strong>iframe有那些缺点？</strong></p><ul><li>iframe会阻塞主页面的Onload事件；</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO;</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li><li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。</li></ul><p><strong>数组乱序</strong></p><ol><li><p>方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function shuffle(a) &#123;</span><br><span class="line">    var len = a.length;</span><br><span class="line">    for (var i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        var index = parseInt(Math.random() * (len - i));</span><br><span class="line">        var temp = a[index];</span><br><span class="line">        a[index] = a[len - i - 1];</span><br><span class="line">        a[len - i - 1] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function shuffle(arr)&#123;</span><br><span class="line">  return arr.sort(() =&gt; &#123;</span><br><span class="line">    return Math.random() &gt; 0.5 ? -1:1</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function shuffle(arr) &#123;</span><br><span class="line">  arr.sort(() =&gt; Math.random() - 0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>new Function的写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var message = new Function(&apos;msg&apos;,&apos;alert(msg)&apos;);</span><br></pre></td></tr></table></figure></p><p><strong>原型链顶层</strong></p><ul><li>Object.prototype</li></ul><p><strong>代码题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var test = (function(a)&#123;</span><br><span class="line">  this.a = a * 2; // 立即执行函数的this指向window</span><br><span class="line">  return function(b)&#123;</span><br><span class="line">    return this.a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)((function(a)&#123;</span><br><span class="line">  return a</span><br><span class="line">&#125;)(1,2))</span><br><span class="line"></span><br><span class="line">console.log(test(4)) // 6</span><br></pre></td></tr></table></figure></p><p><strong>如何覆盖组件库的px</strong><br>在style里面直接用样式覆盖<br>编写webpack的loader，在loader中将px转换成rem</p><p><strong>axios相比vue-resource的优势</strong><br>axios可以用于服务端渲染</p><h2 id="明源云"><a href="#明源云" class="headerlink" title="明源云"></a>明源云</h2><p><strong>状态码及其表达的意思</strong></p><ul><li>200   请求成功</li><li>204   请求成功，但没有返回响应实体</li><li>401   当前请求需要用户验证</li><li>403   禁止访问</li><li>404   资源未找到</li><li>408   请求超时</li><li>500   后台程序错误</li></ul><p><strong>防止代码提交冲突的方案</strong></p><p><strong>axios发起请求会有两个的原理，axios跨域处理</strong><br>OPTIONS是预请求，判断其是否能支持跨域</p><p><strong>vuex原理</strong></p><p><strong>svn和git的区别</strong></p><p><strong>使用ES5或者ES6实现单例模式</strong></p><ol><li><p>ES5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var Single = function(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    // 一个标记，用来判断是否已经创建了该类的实例</span><br><span class="line">    this.instance = null;</span><br><span class="line">&#125;</span><br><span class="line">// 提供了一个静态方法，用户可以直接在类上调用</span><br><span class="line">Single.getInstance = function(name)&#123;</span><br><span class="line">    // 没有实例化的时候创建一个该类的实例</span><br><span class="line">    if (!this.instance) &#123;</span><br><span class="line">        this.instance = new Single(name)</span><br><span class="line">    &#125;</span><br><span class="line">    // 已经实例化了，返回第一次实例化对象的引用</span><br><span class="line">    return this.instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ES6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Single &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.instance = null; </span><br><span class="line">    &#125;</span><br><span class="line">    // 构造一个广为人知的接口，供用户对该类进行实例化</span><br><span class="line">    static getInstance(name) &#123;</span><br><span class="line">        if (!this.instance) &#123;</span><br><span class="line">            this.instance = new Single(name);</span><br><span class="line">        &#125;</span><br><span class="line">        return this.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>代码题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var test = function(a, b)&#123;</span><br><span class="line">    alert(b);</span><br><span class="line">    return &#123;</span><br><span class="line">        test: function(c)&#123;</span><br><span class="line">            return test(c, a)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = test(100);a.test(201);a.test(301); // undefined 100 100</span><br><span class="line">var a = test(101).test(201).test(301); // undefined 101 201</span><br><span class="line">var a = test(103).test(203);a.test(303); // undefined 103 203</span><br></pre></td></tr></table></figure></p><p><strong>Promise链式调用其中一个报错，如何让其继续运行</strong><br>在catch中捕获错误</p><p><strong>AMD和CMD的异同</strong></p><blockquote><p>相同点</p></blockquote><p>RequireJS 和 Sea.js 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。</p><blockquote><p>不同点</p></blockquote><ol><li><strong>定位有差异</strong>。RequireJS 想成为浏览器端的模块加载器，同时也想成为 Rhino / Node 等环境的模块加载器。Sea.js 则专注于 Web 浏览器端，同时通过 Node 扩展的方式可以很方便跑在 Node 环境中。</li><li><strong>遵循的规范不同</strong>。RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。Sea.js 更贴近 CommonJS Modules/1.1 和 Node Modules 规范。</li><li><strong>推广理念有差异</strong>。RequireJS 在尝试让第三方类库修改自身来支持 RequireJS，目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。</li><li><strong>对开发调试的支持有差异</strong>。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持。</li><li><strong>插件机制不同</strong>。RequireJS 采取的是在源码中预留接口的形式，插件类型比较单一。Sea.js 采取的是通用事件机制，插件类型更丰富。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CMD 推崇依赖就近，AMD 推崇依赖前置。</span><br><span class="line">//CMD</span><br><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">    var a = require(&apos;./a&apos;)</span><br><span class="line">    a.doSomething()   // 此处略去 100 行</span><br><span class="line">    var b = require(&apos;./b&apos;) // 依赖可以就近书写   </span><br><span class="line">    b.doSomething()   </span><br><span class="line">&#125;)</span><br><span class="line">// AMD 默认推荐的是</span><br><span class="line">define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123;// 依赖必须一开始就写好</span><br><span class="line">    a.doSomething()</span><br><span class="line">    // 此处略去 100 行    </span><br><span class="line">    b.doSomething()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>如何使脱离文档流的元素回到文档流</strong></p><h2 id="旺合盛世"><a href="#旺合盛世" class="headerlink" title="旺合盛世"></a>旺合盛世</h2><p><strong>rem和百分比的优缺点</strong></p><p><strong>iframe的优缺点</strong><br>优点</p><ol><li>iframe能够原封不动的把嵌入的网页展现出来</li><li>如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。</li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。</li><li>重载页面时不需要重载整个页面，只需要重载页面中的一个框架页(减少了数据的传输，增加了网页下载速度)</li></ol><p>缺点</p><ol><li>页面样式调试麻烦，出现多个滚动条；</li><li>浏览器的后退按钮失效；</li><li>过多会增加服务器的HTTP请求；</li><li>小型的移动设备无法完全显示框架；</li><li>产生多个页面，不易管理；</li><li>不容易打印；</li><li>代码复杂，无法被一些搜索引擎解读。</li></ol><h2 id="星斯达"><a href="#星斯达" class="headerlink" title="星斯达"></a>星斯达</h2><p><strong>什么是MVC，MVC的框架又哪些</strong></p><p><strong>如何通过正则匹配协议</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.href.match(/(\w*):\/\//)</span><br><span class="line">[&quot;https://&quot;, &quot;https&quot;, index: 0, input: &quot;https://www.bilibili.com/video/av11314749/&quot;,length: 2]</span><br></pre></td></tr></table></figure></p><p><strong>js实现二分树</strong></p><h2 id="智游人"><a href="#智游人" class="headerlink" title="智游人"></a>智游人</h2><p><strong>vue-router中history和hash模式有什么区别</strong><br>hash模式的话路由地址会带上#，但是浏览器发送给服务端的却实#之前的URL，hash模式的好处是，虽然你是个单页面应用，但你可以刷新当前页。history的话需要服务端配合，如果服务端配置仅仅是找不到路由，就重定向到index.html，那么刷新会跳首页，如果服务端对于匹配不到URL不做配置，那么一般返回404页面</p><p><strong>样式优先级</strong><br>important &gt; 内联样式 &gt; id选择器 &gt; 类选择器、伪类选择器(:hover)、属性选择器 &gt; 伪元素选择器(::before)、标签选择器</p><p><strong>冒泡排序</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function arrSort (arr) &#123;</span><br><span class="line">    var i, j, tmp, len = arr.length - 1;</span><br><span class="line">    for(i = 0; i&lt; len; i++) &#123;</span><br><span class="line">        for(j = 0; j &lt; len - i; j++) &#123;</span><br><span class="line">            if(arr[j] &gt; arr[j + 1]) &#123; // 升序</span><br><span class="line">                tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j + 1];</span><br><span class="line">                arr[j + 1] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="仙人掌"><a href="#仙人掌" class="headerlink" title="仙人掌"></a>仙人掌</h2><p><strong>原型和原型链</strong></p><h2 id="开拍网"><a href="#开拍网" class="headerlink" title="开拍网"></a>开拍网</h2><p><strong>DOM操作方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parent.appendChild(child)           增加子元素</span><br><span class="line">parent.removeChild(child)           删除子元素</span><br><span class="line">parent.replaceChild(new, old)       替换子元素</span><br><span class="line">parent.insertBefore(new, existsDOM) 向已有子节点添加元素</span><br><span class="line">element.nextSibling                 返回元素相邻的下一个元素</span><br><span class="line">element.previousSibling             返回元素相邻的上一个元素</span><br></pre></td></tr></table></figure></p><h2 id="妙印云"><a href="#妙印云" class="headerlink" title="妙印云"></a>妙印云</h2><h3 id="flex宽度计算"><a href="#flex宽度计算" class="headerlink" title="flex宽度计算"></a>flex宽度计算</h3><p>写出item-1、item-2、item-3的宽度</p><p><style>.parent {display: flex;width: 100%;height: 100px;background-color: blue;color: #fff;}.item-1 {flex: 2 1 0%;background-color: red;}.item-2 {flex: 2 1 auto;background-color: green;}.item-3 {flex: 1 1 200px;}</style></p><div class="parent"><div class="item-1"></div><div class="item-2"></div><div class="item-3"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;item-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;item-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;item-3&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.parent &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  width: 600px;</span><br><span class="line">  height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.item-1 &#123;</span><br><span class="line">  flex: 2 1 0%;</span><br><span class="line">&#125;</span><br><span class="line">.item-2 &#123;</span><br><span class="line">  flex: 2 1 auto;</span><br><span class="line">&#125;</span><br><span class="line">.item-3 &#123;</span><br><span class="line">  flex: 1 1 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在子元素的flex-basis加起来小于父元素的宽度时<br>用父容器宽度减去flex-basis的宽度，然后再根据flex-grow去计算扩张的值，</li></ol><h3 id="用sort打乱数组"><a href="#用sort打乱数组" class="headerlink" title="用sort打乱数组"></a>用sort打乱数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function shuffle(arr) &#123;</span><br><span class="line">  arr.sort(() =&gt; Math.random() - 0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现add-1-2-3-，结果返回6的函数"><a href="#实现add-1-2-3-，结果返回6的函数" class="headerlink" title="实现add(1)(2)(3)，结果返回6的函数"></a>实现add(1)(2)(3)，结果返回6的函数</h3><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记录&quot;&gt;&lt;a href=&quot;#记录&quot; class=&quot;headerlink&quot; title=&quot;记录&quot;&gt;&lt;/a&gt;记录&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;一个页面上两个div左右铺满整个浏览器，要保证左边的div一直为100px，右边的div跟随浏览器大小变化（比如浏览器为50
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
      <category term="html" scheme="https://tragiclife.github.io/tags/html/"/>
    
      <category term="js" scheme="https://tragiclife.github.io/tags/js/"/>
    
      <category term="interview" scheme="https://tragiclife.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>项目中的那些事</title>
    <link href="https://tragiclife.github.io/front-end/other/problems-encountered-in-the-project/"/>
    <id>https://tragiclife.github.io/front-end/other/problems-encountered-in-the-project/</id>
    <published>2018-12-12T22:03:31.000Z</published>
    <updated>2019-01-19T10:47:27.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p><strong>界面渲染时出现花括号{}</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在挂载vue的标签上使用v-cloak，设置v-cloak属性的样式，vue渲染完后会自动移除该属性</span><br><span class="line">&lt;div class=&quot;app&quot; v-cloak&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">[v-cloak]&#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>使用:style或:class绑定时，key名带中划线(-)问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用引号将该key包裹起来，:style=&#123;&apos;background-color&apos;: &apos;#fff&apos;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>错误捕获</strong></p><blockquote><p>2.2.0+可用, 2.4.0+支持自定义事件的捕获</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler捕获钩子函数的报错信息，只能捕获钩子函数的错</span><br><span class="line">Vue.config.errorHandler = (err, vm, info) =&gt; &#123;</span><br><span class="line">  let &#123;</span><br><span class="line">    message, // 异常信息</span><br><span class="line">    name, // 异常名称</span><br><span class="line">    script,  // 异常脚本url</span><br><span class="line">    line,  // 异常行号</span><br><span class="line">    column,  // 异常列号</span><br><span class="line">    stack  // 异常堆栈信息</span><br><span class="line">  &#125; = err;</span><br><span class="line">  // info 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用ref绑定问题</strong><br>如果绑定的元素为遍历元素，则生成的refs为数组</p><p><strong>vue-router在history模式下使用子路由刷新报错问题</strong><br>修改assetsPublicPath路径，使用绝对路径</p><p><strong>style标签使用scoped的时候无法覆盖子组件样式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方法:</span><br><span class="line">1. 去掉scoped</span><br><span class="line">2. 混用本地和全局样式，即增加一个style标签，不写scoped，进行样式覆</span><br><span class="line">3. 使用深度选择器 /deep/或者&gt;&gt;&gt;，如.a /dep/ .b&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>进入详情页要缓存，从首页进入时要刷新的处理方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">使用keep-alive，在router中定义keeyAlive，在App.vue中</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">js代码：</span><br><span class="line">watch: &#123;</span><br><span class="line">  $route: &#123;</span><br><span class="line">    handler(to, from) &#123;</span><br><span class="line">      if (to.name === &apos;Home&apos;) &#123;</span><br><span class="line">        this.$refs.customerList.clearStatus();</span><br><span class="line">        from.meta.reload = true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  this.loadData();</span><br><span class="line">&#125;,</span><br><span class="line">activated() &#123;</span><br><span class="line">  if (this.$route.meta.reload) &#123;</span><br><span class="line">    this.loadData();</span><br><span class="line">    this.$route.meta.reload = false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>style标签使用scss的@import相对路径问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [&apos;.js&apos;, &apos;.vue&apos;],</span><br><span class="line">  alias: &#123;</span><br><span class="line">    &apos;@&apos;: path.resolve(__dirname, &apos;src&apos;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">引用时，@import &apos;~@/scss/icon.scss&apos;;</span><br></pre></td></tr></table></figure></p><p><strong>Duplicate presence of slot “titleName” found in the same render tree</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用具名插槽slot-scope</span><br><span class="line">&lt;template slot=&quot;titleName&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;order-title&quot;&gt;采购订单&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><p><strong>日期转换问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">日期中不允许有-，需要replace(/-/g, &apos;/&apos;)才可以进行new Date()</span><br><span class="line">日期中不允许有.0，如(2018-09-06 00:00:00.0)，需要replace(/\..*/g,&apos;&apos;)替换处理</span><br></pre></td></tr></table></figure></p><p><strong>IOS7伸缩盒兼容性问题</strong><br>使用伸缩盒时加webkit前缀，使用box</p><p><strong>IOS9元素运行动画后不显示问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. z-index没有设置或者太小</span><br><span class="line">2. 没有设置animation-fill-mode: forwards</span><br></pre></td></tr></table></figure></p><p><strong>animation-play-state失效问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">添加父容器，在暂停的时候给父容器加transform</span><br><span class="line">let container = this.$refs.musicContainer</span><br><span class="line">let musicT = getComputedStyle(this.$refs.music).transform</span><br><span class="line">let containerT = getComputedStyle(container).transform</span><br><span class="line">let transform = containerT === &apos;none&apos; ? musicT : musicT.concat(&apos; &apos;, containerT)</span><br><span class="line">container.style.transform = transform</span><br><span class="line">container.style.webkitTransform = transform</span><br></pre></td></tr></table></figure></p><p><strong>滚动暂停问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 将滚动容器从body改为app，设置-webkit-overflow-scrolling:touch，该属性会造成scroll事件只会在滚动停止的时候执行一次</span><br><span class="line">2. 使用滚动插件(如better-scroll)</span><br></pre></td></tr></table></figure></p><p><strong>使用-webkit-overflow-scrolling:touch问题</strong><br>如果触发了外层容器的弹性滚动，则该元素短时间内会无法滚动，可以使用better-scroll来实现滚动</p><p><strong>IOS的弹性滚动</strong></p><ol><li>body层滚动(系统特殊化处理):<br>自带弹性滚动，<code>overflow: hidden</code>失效，GIF和定时器暂停 </li><li>局部滚动:<br>没有弹性滚动，没有惯性滚动，不流畅<br><strong>局部滚动开启弹性滚动(仅支持IOS)</strong><br>设置滚动容器<code>-webkit-overflow-scrolling: touch</code>;<blockquote><p>上拉加载使用scroll事件，而不是touch事件(因为android中会有bug)</p></blockquote></li></ol><p><strong>-webkit-overflow-scrolling:touch偶尔卡住或不能滑动的bug</strong><br>在使用该属性的元素上不设置定位或者手动设置定位为static<br>在<code>webkit-overflow-scrolling:touch</code>属性的下一层子元素上，将height加1%或1px。从而主动触发scrollbar。</p><p><strong>-webkit-overflow-scrolling:touch还会导致的bug</strong></p><ol><li>滚动中 scrollTop 属性不会变化</li><li>手势可穿过其他元素触发元素滚动</li><li>滚动时暂停其他 transition</li></ol><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><strong>打开view时界面会有空白问题</strong><br>在mounted中使用setTimeout进行font-size的设置</p><p><strong>Android4.3中设置background的大小不生效</strong><br>通过background-size设置</p><p><strong>4.3版本的svg无法使用transform</strong><br>用div将svg包裹起来，设置div的transform</p><p><strong>兼容低版本css</strong><br>带webkit的css要放在后面</p><p><strong>Android4系统touchmove问题</strong><br>在touchmove的时候会执行touchcancel事件，导致touchmove只执行一次，需要使用e.preventDefault阻止默认事件才可以执行多次，但是会导致一些默认行为不触发，如scroll</p><p><strong>click事件失效问题</strong><br>父元素的touch事件加了preventDefault导致子元素的click事件不触发，修改子元素的click事件为touch事件</p><p><strong>动画由大变小闪动问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给动画元素的父容器加</span><br><span class="line">position: relative;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure></p><p><strong>安卓手机音频无法自动播放</strong><br>通过touch事件手动触发播放</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><strong>在元素隐藏的时候new Swiper，Swiper会有错位问题</strong></p><ol><li><p>设置obserVer和observParents为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new Swiper(this.$refs.swiperContainer, &#123;</span><br><span class="line">  observer: true,//修改swiper自己或子元素时，自动初始化swiper</span><br><span class="line">  observeParents: false,//修改swiper的父元素时，自动初始化swiper</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>显示的时候手动调用update方法</p></li></ol><p><strong>better-scroll内的子元素无法通过overflow滚动</strong></p><blockquote><p>better-scroll的bug</p></blockquote><p><strong>vue中同事使用keep-alive和better-scroll</strong><br>同时使用keep-alive和better-scroll时，better-scroll注册的事件不会自动销毁，需要手动调用<code>bScroll.destroy()</code>方法进行销毁。</p><h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><p><strong>使用animate时，animate动画不运行</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 获取animate的DOM，调用beginElement方法执行动画</span><br><span class="line">2. animate的dur设置的时间太小(小于25ms)，动画不会执行</span><br></pre></td></tr></table></figure></p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><strong>canvas绘制问题</strong><br>绘制前需要设置canvas的宽高</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong>使用webstorm时无法自动编译问题</strong><br>取消webstorm的自动保存功能</p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><strong>401状态码</strong><br>登录token有问题</p><h2 id="好车主APP"><a href="#好车主APP" class="headerlink" title="好车主APP"></a>好车主APP</h2><p><strong>某些机型打开健步行时白屏问题</strong><br>绘制圆环canvas的时候没有获取到DOM导致webview奔溃，在$nextTick的时候绘制canvas，后面改成了SVG</p><p><strong>aopsId获取失败</strong><br>连续调用了相同的客户端方法，导致前面的被覆盖</p><p><strong>监听APP前后台切换</strong><br>通过postEvent方法监听webview的切换</p><p><strong>因为手机设置字体大小导致样式错位问题</strong><br>安卓客户端通过webview配置<code>webview.getSettings().setTextZoom(100)</code>就可以禁止缩放，按照百分百显示。</p><h2 id="微信-企业微信"><a href="#微信-企业微信" class="headerlink" title="微信/企业微信"></a>微信/企业微信</h2><p><strong>微信端无法自动播放音频问题</strong></p><ol><li><p>使用微信提供的js-sdk，在ready中调用播放的API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//首先引用js: </span><br><span class="line">&lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">//然后写方法: </span><br><span class="line">function autoPlayAudio1()&#123;</span><br><span class="line">  wx.config(&#123;</span><br><span class="line">    //配置信息, 即使不正确也能使用 wx.ready</span><br><span class="line">    debug: false,</span><br><span class="line">    appId: &apos;&apos;,</span><br><span class="line">    timestamp: 1,</span><br><span class="line">    nonceStr: &apos;&apos;,</span><br><span class="line">    signature: &apos;&apos;,</span><br><span class="line">    jsApiList: []</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.ready(function() &#123;</span><br><span class="line">    document.getElementById(&apos;audio&apos;).play();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听WeixinJSBridgeReady事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var audio=document.querySelector(&quot;#audio&quot;);</span><br><span class="line">  document.addEventListener(&quot;WeixinJSBridgeReady&quot;,function()&#123;</span><br><span class="line">  audio.play();</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure></li></ol><p><strong>隐藏分享栏</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeixinJSBridge.call(&apos;hideOptionMenu&apos;)</span><br></pre></td></tr></table></figure></p><p><strong>企业微信注册报invalid signture</strong></p><ul><li>在home界面调用注册方法会报错，修改调用的位置至需要使用新建表单页面</li><li>后台返回的时间戳单位需要为<strong>秒</strong>，注册的url需要encodeURIComponent再传给后台，由后台decode</li><li>项目用的是history模式，每个页面使用sdk都需要重新调用注册方法<blockquote><p>url不调用encodeURIComponent的话链接上通过&amp;字符连接起来的参数会不被加入签名中</p></blockquote></li></ul><p><strong>安卓手机无法预览图片</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">调用接口时，urls必须传</span><br><span class="line">wx.previewImage(&#123;</span><br><span class="line">  current: imgUrl, // 当前显示图片的http链接</span><br><span class="line">  urls: [imgUrl] // 需要预览的图片http链接列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;界面渲染时出现花括号{}&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日常小记-JS</title>
    <link href="https://tragiclife.github.io/front-end/js/daily-notes/"/>
    <id>https://tragiclife.github.io/front-end/js/daily-notes/</id>
    <published>2018-12-11T23:59:39.000Z</published>
    <updated>2019-02-02T15:35:12.896Z</updated>
    
    <content type="html"><![CDATA[<p><strong>$(“p”).empty与$(“p”).remove</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).empty</span><br><span class="line">移除p标签中的文本及其子节点，留下p标签</span><br><span class="line">$(&quot;p&quot;).remove</span><br><span class="line">移除p标签及其文本内容还有其子节点</span><br></pre></td></tr></table></figure></p><p><strong>事件绑定</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DOM2级事件</span><br><span class="line">addEventListener(type, listener, useCapture/options);</span><br><span class="line">removeEventListener(type, listener, useCapture/options);</span><br><span class="line">useCapture: 默认为false，监听冒泡阶段</span><br><span class="line">options: &#123;</span><br><span class="line">  capture: Boolean, // 是否在捕获阶段触发事件</span><br><span class="line">  passive: Boolean, // 使preventDefault调用无效，可优化界面滚动效果</span><br><span class="line">  once: Boolean, // 是否执行一次</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IE</span><br><span class="line">attachEvent(&apos;on&apos; + type, listener);</span><br><span class="line">detachEvent(&apos;on&apos; + type, listener);</span><br></pre></td></tr></table></figure></p><p><strong>消除事件处理器的影响</strong></p><p><a href="https://mp.weixin.qq.com/s/YJficujNG3kX45ZwfFQoqA" target="_blank" rel="noopener">图解浏览器的工作原理</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">让浏览器即监听相关事件，又让组合器线程在等等主线程响应前构建新的组合帧</span><br><span class="line">document.body.addEventListener(&apos;touchstart&apos;, event =&gt; &#123;</span><br><span class="line">  if (event.target === area) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;passive: true&#125;);</span><br><span class="line"></span><br><span class="line">垂直方向的滚动可能会先于event.preventDefault()发生，此时可以通过 event.cancelable 来防止这种情况</span><br><span class="line">document.body.addEventListener(&apos;pointermove&apos;, event =&gt; &#123;</span><br><span class="line">  if (event.cancelable) &#123;</span><br><span class="line">    event.preventDefault(); // block the native scroll</span><br><span class="line">  &#125; </span><br><span class="line">&#125;, &#123;passive: true&#125;);</span><br><span class="line"></span><br><span class="line">也可以使用 css 属性 touch-action 来完全消除事件处理器的影响，如：</span><br><span class="line">#area &#123; </span><br><span class="line">  touch-action: pan-x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表示false的值</strong></p><p>false, 0, 空字符串(‘’), null, undefined</p><p><strong>Number,Boolean,String,Undefined比较问题</strong> </p><p>会先将复合对象转换成基本类型（依次调用valueOf和toString方法）再进行比较，undefined被当成基本类型，undefined转换成数字是NaN，因此undefined与除null之外的其它类型值进行比较时始终返回false（注意NaN==NaN返回false）null被当成复合对象，由于null没有valueOf和toStribg方法，因此除了和undefined之外的其它类型值进行比较时始终返回false</p><p><strong>设置prototype的值为对象时，首先要还原构造器</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let Person = function()&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>复制内容到粘贴板(仅支持IE)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let text = document.querySelector(&apos;.text&apos;).innerText;</span><br><span class="line">window.clipboardData.setData(&apos;text&apos;, text);</span><br></pre></td></tr></table></figure></p><p><strong>[]和new Array</strong><br>[]的运行速度比new Array快，后者需要调用构造器</p><p><strong>mouseout、mouseleave</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mouseout: 无论鼠标离开被选元素(绑定事件的元素)还是其子元素都会触发</span><br><span class="line">mouseleave: 当鼠标离开被选元素时触发</span><br></pre></td></tr></table></figure></p><p><strong>获取选中select标签的文本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// value和选择文本不同时，sel为select标签的dom元素</span><br><span class="line">sel.options[sel.selectedIndex].text</span><br></pre></td></tr></table></figure></p><p><strong>hover事件</strong><br>相当于mouseenter+mouseleave，不相当于mouseover+mouseout，mouseover(mouseout)鼠标进入(离开)某个元素或其子元素时触发。</p><p><strong>javascript:void(0)</strong><br>javascript是伪协议，表示url的内容通过javascript执行。void(0)表示不做任何操作，这样会防止链接跳转到其他界面。这么做可以保存链接的样式，但不让链接执行实际操作，具体的操作交给链接的onclick事件处理</p><p><strong>函数声明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数声明：function fn()&#123;&#125;</span><br><span class="line">函数表达式：var fn = function()&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>将伪数组转换成数组</strong><br>Array.prototype.slice.call(arguments, 0);</p><p><strong>操作class</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dom.classList.value  获取所有类名</span><br><span class="line">dom.classList.add()  添加类</span><br><span class="line">dom.classList.remove()  移除类</span><br><span class="line">dom.classList.contains()  查看是否存在某个类</span><br><span class="line">dom.classList.toggle()  切换是否显示某个类</span><br></pre></td></tr></table></figure></p><p><strong>获取对象类型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.toString.call(xx); // 结果为[object Type]</span><br><span class="line"></span><br><span class="line">// 判断是否为数组</span><br><span class="line">if(typeof Array.isArray===&apos;undefined&apos;)&#123;</span><br><span class="line">  Array.isArray = function(arg)&#123;</span><br><span class="line">    return Object.prototype.toString.call(arg)===&apos;[object Array]&apos;</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>判断是否为undefined</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a;</span><br><span class="line">undefined = 1; // 这样判断就会出错</span><br><span class="line">a === undefined; // undefined不是保留字，能被赋值</span><br><span class="line"></span><br><span class="line">a === void 0; // void后面随便跟上一个组成表达式，返回就是undefined</span><br></pre></td></tr></table></figure></p><p><strong>bind、call、apply的区别</strong></p><ul><li>bind只改变上下文环境，不执行</li><li>call第二个参数开始是参数列表</li><li>allpy第二个参数是数组</li></ul><p><strong>获取元素样式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getComputedStyle(dom, 伪类); // 可以获取伪类样式</span><br></pre></td></tr></table></figure></p><p><strong>判断图片是否加载完成</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. onload</span><br><span class="line">2. 通过img.complete属性判断</span><br><span class="line">3. onreadystatechange，img.readyState为complete或者loaded为加载完成</span><br></pre></td></tr></table></figure></p><p><strong>setTimeout(fn, time, param)</strong></p><ul><li>fn: 回调函数</li><li>time: 延迟调用时间</li><li>param: 传入回调的参数</li></ul><p><strong>获取transform后元素的宽高</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dom.getBoundingClientRect()</span><br></pre></td></tr></table></figure></p><p><strong>语法简写</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//取整</span><br><span class="line">parseInt(a,10); //Before</span><br><span class="line">Math.floor(a); //Before</span><br><span class="line">a&gt;&gt;0; //Before</span><br><span class="line">~~a; //After</span><br><span class="line">a|0; //After</span><br><span class="line"></span><br><span class="line">//四舍五入</span><br><span class="line">Math.round(a); //Before</span><br><span class="line">a+.5|0; //After</span><br><span class="line"></span><br><span class="line">//内置值</span><br><span class="line">undefined; //Before</span><br><span class="line">void 0; //After, 快</span><br><span class="line">0[0]; //After, 略慢</span><br><span class="line"></span><br><span class="line">//内置值</span><br><span class="line">Infinity;</span><br><span class="line">1/0;</span><br><span class="line"></span><br><span class="line">//布尔值短写法</span><br><span class="line">true; //Before</span><br><span class="line">!0; //After</span><br><span class="line"></span><br><span class="line">//布尔值短写法</span><br><span class="line">false; //Before</span><br><span class="line">!1; //After</span><br></pre></td></tr></table></figure></p><p><strong>base64图片前缀</strong><br>data:image/png;base64,</p><p><strong>拷贝</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象拷贝</span><br><span class="line">let obj = Object.defineProperties(&#123;&#125;, Object.getOwnPropertyDescriptors(copyObj))</span><br><span class="line"></span><br><span class="line">数组拷贝</span><br><span class="line">let arr = [].concat(copyArr);</span><br></pre></td></tr></table></figure></p><p><strong>第二次var定义变量如果不赋值，该值为原来定义的值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 100;</span><br><span class="line">var a;</span><br><span class="line">console.log(a); // 100</span><br></pre></td></tr></table></figure></p><p><strong>函数声明会比变量声明先</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(a); // function</span><br><span class="line">var a = &apos;123&apos;;</span><br><span class="line">function a ()&#123;&#125;;</span><br><span class="line">console.log(a); // 123</span><br></pre></td></tr></table></figure></p><p><strong>new的过程</strong></p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋值给新对象</li><li>执行构造函数的代码</li><li>返回新的对象</li></ol><p><strong>原型链的顶层</strong><br>null</p><p><strong>自定义事件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let evt = document.createEvent(&quot;HTMLEvents&quot;);</span><br><span class="line">// 初始化</span><br><span class="line">evt.initEvent(&quot;alert&quot;, false, false);</span><br><span class="line">// 触发</span><br><span class="line">week.dispatchEvent(evt);</span><br></pre></td></tr></table></figure></p><p><strong>查看元素事件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.getEventListeners(window); // 返回事件对象，如&#123;click:[], mousedown:[]&#125;</span><br><span class="line">window.getEventListeners(window).click[0].listener; // 获取第一个绑定的click事件函数</span><br></pre></td></tr></table></figure></p><p><strong>生成任意长度，且值为undefined的数组</strong><br>Array.apply(null, {length: 2}); // [undefined, undefined]</p><p><strong>移动端将键盘回车变为搜索</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将input的type改为search</span><br><span class="line">在input外包一层form, form标签设置action属性, 设置autocomplete=&quot;off&quot;去掉弹出的下拉框</span><br><span class="line">设置input[type=&quot;search&quot;]::-webkit-search-cancel-button&#123;display: none;&#125;将默认的X隐藏掉</span><br><span class="line">设置-webkit-appearance: none;去掉默认样式</span><br><span class="line">使用ajax提交时需要preventDefault阻止默认行为</span><br></pre></td></tr></table></figure></p><p><strong>监听APP返回键</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var hiddenProperty = &apos;hidden&apos; in document ? &apos;hidden&apos; : &apos;webkitHidden&apos; in document ? &apos;webkitHidden&apos; : &apos;mozHidden&apos; in document ? &apos;mozHidden&apos; : null;</span><br><span class="line">var visibilityChangeEvent = hiddenProperty.replace(/hidden/i, &apos;visibilitychange&apos;);</span><br><span class="line">var onVisibilityChange = function()&#123;</span><br><span class="line">  if (document[hiddenProperty]) &#123;    </span><br><span class="line">    console.log(&apos;页面非激活&apos;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    console.log(&apos;页面激活&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">document.addEventListener(visibilityChangeEvent, onVisibilityChange);</span><br></pre></td></tr></table></figure></p><p><strong>parseInt</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;12abc&apos;); // 12</span><br></pre></td></tr></table></figure></p><p><strong>触发鼠标右键事件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on(&quot;contextmenu&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>window.open</strong><br>window.open打开的子窗口可以使用opener访问父窗口的方法和变量</p><p><strong>onInput</strong><br>谷歌控制台使用Ctrl+p可以输入要打开的文件；onInput 是 HTML5 的标准事件，对于检测 textarea, input(text), input(password) 和 input(search) 这几个元素通过用户界面发生的内容变化非常有用，在内容修改后立即被触发，不像 onchange 事件需要失去焦点才触发。oninput 事件在 IE9 以下版本不支持，需要使用 IE 特有的onpropertychange 事件替代。</p><p><strong>try、catch、finally</strong><br>Js如果在try中return则不会进入finally</p><p><strong>改变当前链接</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.replace(url)</span><br></pre></td></tr></table></figure></p><p><strong>IOS日期转换问题</strong><br>IOS的Safari在new Date()的时候不支持’2017-3-6’的格式，支持’2017/3/6’，也不支持date为2018/09/19 00.00.00.0，后缀带.0的</p><p><strong>http</strong><br>get请求默认会在浏览器中缓存，可以通过添加时间戳来避免缓存</p><p><strong>NodeJS Event loop</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;script start&apos;);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(&apos;Promise&apos;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">  console.log(&apos;promise1&apos;);</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">  console.log(&apos;promise2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;script end&apos;);</span><br><span class="line">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span><br><span class="line"></span><br><span class="line">微任务: process.nextTick, promise, Object.observe, MutationObserver</span><br><span class="line">宏任务: script, setTimeout, setInterval, setImmediate, I/O, UI rendering</span><br><span class="line"></span><br><span class="line">&gt; setImmediate会比setTimeout先执行</span><br><span class="line"></span><br><span class="line">Event loop执行顺序</span><br><span class="line">1. 执行同步代码，这属于宏任务</span><br><span class="line">2. 执行栈为空，查询是否有微任务需要执行</span><br><span class="line">3. 执行所有微任务</span><br><span class="line">4. 必要的话渲染 UI</span><br><span class="line">5. 然后开始下一轮 Event loop，执行宏任务中的异步代码</span><br></pre></td></tr></table></figure></p><p><strong>存储</strong><br>特性 | cookie | localStorage | sessionStorage | indexDB<br>—|—|—|—|—<br>数据生命周期 | 一般由服务器生成，可以设置过期时间 |     除非被清理，否则一直存在 | 页面关闭就清理 |     除非被清理，否则一直存在<br>数据存储大小 | 4K | 5M | 5M | 无限<br>与服务端通信 | 每次都会携带在 header 中，对于请求性能影响 | 不参与 | 不参与 | 不参与</p><p><strong>cookie安全性</strong><br>属性 | 作用<br>—|—<br>value | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识<br>http-only | 不能通过 JS 访问 Cookie，减少 XSS 攻击<br>secure | 只能在协议为 HTTPS 的请求中携带<br>same-site | 规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击</p><p><strong>Service Worker</strong></p><blockquote><p>Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">if (navigator.serviceWorker) &#123;</span><br><span class="line">  navigator.serviceWorker.register(&apos;sw.js&apos;).then(registration =&gt; &#123;</span><br><span class="line">    console.log(&apos;service worker 注册成功&apos;);</span><br><span class="line">  &#125;).catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&apos;service worker 注册失败&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// sw.js</span><br><span class="line">// 监听install事件，回调缓存所需文件</span><br><span class="line">self.addEventListener(&apos;install&apos;, e =&gt; &#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    // 设置缓存的名称为my-cache</span><br><span class="line">    caches.open(&apos;my-cache&apos;).then(cache =&gt; &#123;</span><br><span class="line">      return cache.addAll([&apos;./index.html&apos;, &apos;./index.js&apos;]);</span><br><span class="line">    &#125;);</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 拦截所有请求事件</span><br><span class="line">// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span><br><span class="line">self.addEventListener(&apos;fetch&apos;, e =&gt; &#123;</span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(response =&gt; &#123;</span><br><span class="line">      if (response) &#123;</span><br><span class="line">        return response</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(&apos;fetch source&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">  );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Load和DOMContentLoaded区别</strong></p><ul><li>Load 事件触发代表页面中的 DOM，CSS，JS，图片已经全部加载完毕</li><li>DOMContentLoaded 事件触发代表初始的 HTML 被完全加载和解析，不需要等待 CSS，JS，图片加载</li></ul><p><strong>生成新图层</strong></p><ul><li>3D变换: translate3d、translateZ</li><li>will-change</li><li>video、iframe标签</li><li>通过动画实现的opacity动画转换</li><li>position: fixed</li></ul><blockquote><p>对于频繁渲染的建议生成一个新的图层，提高性能。但不能生成过多图层，会引起反作用。</p></blockquote><p><strong>重绘(Repaint)和回流(Reflow)</strong></p><ul><li>重绘是当节点需要更改外观而不会影响布局的，比如改变 color 就叫称为重绘</li><li>回流是布局或者几何属性需要改变就称为回流。</li></ul><blockquote><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。</p></blockquote><p><strong>并行、并发</strong></p><ul><li>并行：宏观和微观上都是同时进行</li><li>并发：宏观上同时，微观上不同时</li></ul><p><strong>工具库</strong><br>loadash、date-fns(日期格式化)、accounting.js(货币格式化)</p><p><strong>jsencrypt</strong><br>用于请求参数加密处理，加密方式为RSA</p><p><strong>vue框架核心方法defineProperty(defineProperties)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">writable、value和set、get不能同时存在</span><br><span class="line">Object.defineProperty(obj, prop, &#123;</span><br><span class="line">  configurable: false, //是否可以通过delete删除，能否修改属性的特性。直白点：是否可配置</span><br><span class="line">  enumerable: false, //枚举性，表示是否可以通过for-in循环返回</span><br><span class="line">  writable: false, //可写性：是否可以修改属性的值</span><br><span class="line">  value: undefined, //包含属性的值，也就是对应的可读性。</span><br><span class="line">  set: undefined,</span><br><span class="line">  get: undefined</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>获取github用户信息</strong><br><a href="https://api.github.com/users/{id}" target="_blank" rel="noopener">https://api.github.com/users/{id}</a></p><p><strong>复制功能</strong></p><ul><li><a href="https://clipboardjs.com/" target="_blank" rel="noopener">https://clipboardjs.com/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#%E5%91%BD%E4%BB%A4</a></li></ul><p><strong>安装nvm后无法使用问题</strong><br>先nvm install node，然后再nvm use [version]</p><p><strong>nvm安装最新nodejs包</strong><br>nvm install latest</p><p><strong>判断点击元素是否为某个元素的后代元素</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class="line">  if (el.contains(e.target)) &#123;</span><br><span class="line">    console.log(&apos;包含&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>js兼容写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(function(root, factory) &#123;</span><br><span class="line">  if (typeof exports === &apos;object&apos;) &#123;</span><br><span class="line">    module.exports = factory(); // commonjs环境下能拿到返回值</span><br><span class="line">  &#125; else if (typeof define === &apos;function&apos;) &#123;</span><br><span class="line">    define(factory); // define(function()&#123; return &apos;a&apos; &#125;) AMD</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    window.eventUtil = faltory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(this, function() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    addEvent: function(el, type, handle) &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;$(“p”).empty与$(“p”).remove&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>meta标签</title>
    <link href="https://tragiclife.github.io/front-end/html/tag-meta/"/>
    <id>https://tragiclife.github.io/front-end/html/tag-meta/</id>
    <published>2018-12-11T00:43:10.000Z</published>
    <updated>2019-01-08T13:51:16.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 更加标准的 lang 属性写法 http://zhi.hu/XyIa</span><br><span class="line">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 声明文档使用的字符编码</span><br><span class="line">&lt;meta charset=&apos;utf-8&apos;&gt;</span><br><span class="line"></span><br><span class="line">// 优先使用 IE 最新版本和 Chrome</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;wap-font-scale&quot; content=&quot;no&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 页面描述</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 页面关键词</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 网页作者</span><br><span class="line">&lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 搜索引擎抓取</span><br><span class="line">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 为移动设备添加 viewport</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=0&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="iOS-设备"><a href="#iOS-设备" class="headerlink" title="iOS 设备"></a>iOS 设备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// 添加到主屏后的标题（iOS 6 新增）</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）</span><br><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 设置苹果工具栏颜色</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 忽略页面中的数字识别为电话，忽略email识别</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 启用360浏览器的极速模式(webkit)</span><br><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 避免IE使用兼容模式</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 不让百度转码</span><br><span class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</span><br><span class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 微软的老式浏览器</span><br><span class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class="line"></span><br><span class="line">// uc强制竖屏</span><br><span class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line"></span><br><span class="line">// QQ强制竖屏</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line"></span><br><span class="line">// UC强制全屏</span><br><span class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class="line"></span><br><span class="line">// QQ强制全屏</span><br><span class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">// UC应用模式</span><br><span class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class="line"></span><br><span class="line">// QQ应用模式</span><br><span class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">// windows phone 点击无高光</span><br><span class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="iOS-图标"><a href="#iOS-图标" class="headerlink" title="iOS 图标"></a>iOS 图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// iOS 图标 begin</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// iPhone 和 iTouch，默认 57x57 像素，必须有</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;</span><br><span class="line">// Retina iPad，144x144 像素，可以没有，但推荐有</span><br><span class="line">// iOS 图标 end</span><br></pre></td></tr></table></figure><h3 id="iOS-启动画面"><a href="#iOS-启动画面" class="headerlink" title="iOS 启动画面"></a>iOS 启动画面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// iPad 竖屏 768 x 1004（标准分辨率）</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// iPad 竖屏 1536x2008（Retina）</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// iPad 横屏 1024x748（标准分辨率）</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// iPad 横屏 2048x1496（Retina）</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// iPhone/iPod Touch 竖屏 320x480 (标准分辨率)</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// iPhone/iPod Touch 竖屏 640x960 (Retina)</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina)</span><br><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Windows 8 磁贴颜色</span><br><span class="line">&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// Windows 8 磁贴图标</span><br><span class="line">&lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 添加 RSS 订阅</span><br><span class="line">&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;/rss.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 添加 favicon icon</span><br><span class="line">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="sns-社交标签"><a href="#sns-社交标签" class="headerlink" title="sns 社交标签"></a>sns 社交标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 参考微博API</span><br><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;类型&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:url&quot; content=&quot;URL地址&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;标题&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;图片&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;描述&quot; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="html" scheme="https://tragiclife.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css实现居中</title>
    <link href="https://tragiclife.github.io/front-end/css/css-centered/"/>
    <id>https://tragiclife.github.io/front-end/css/css-centered/</id>
    <published>2018-12-11T00:03:53.000Z</published>
    <updated>2019-01-01T16:04:51.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%, -50%);</span><br></pre></td></tr></table></figure><h2 id="伸缩盒"><a href="#伸缩盒" class="headerlink" title="伸缩盒"></a>伸缩盒</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css揭秘</title>
    <link href="https://tragiclife.github.io/front-end/css/css-reveal-secrets/"/>
    <id>https://tragiclife.github.io/front-end/css/css-reveal-secrets/</id>
    <published>2018-12-10T00:04:00.000Z</published>
    <updated>2019-01-01T16:02:49.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p><strong>使用box-shadow制作假边框，第四个值为增大或者减小投影面积(box-shadow范围内不会触发事件)</strong><br>box-shadow 是层层叠加的，第一层投影位于最顶层，依次类推。因此，你需要按此规律调整扩张半径。比如说，在前面的代码中，我们想在外圈再加一道 5px 的外框，那就需要指定扩张半径的值为15px （ 10px+5px ），会随着border-radius贴合border</p><p><style>.box-shadow{display: inline-block;margin: 20px;width: 10px;height: 10px;-webkit-box-shadow: 0 0 0 10px red, 0 0 0 15px blue;box-shadow: 0 0 0 10px red, 0 0 0 15px blue;font-size: 12px;}</style></p><div class="box-shadow"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-shadow&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box-shadow&#123;</span><br><span class="line">  width: 10px;</span><br><span class="line">  height: 10px;</span><br><span class="line">  box-shadow: 0 0 0 10px red, 0 0 0 15px blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>outline</strong><br>不触发事件，不随border-radius而贴合border</p><p><style>.outline {margin: 10px;width: 10px;height: 10px;border: 5px solid red;outline: 5px solid blue;box-sizing: content-box;}</style></p><div class="outline"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;outline&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.outline &#123;</span><br><span class="line">  width: 10px;</span><br><span class="line">  height: 10px;</span><br><span class="line">  border: 5px solid red;</span><br><span class="line">  outline: 5px solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background-origin<br>通过backgroun-origin改变background-position的基准位置</p><p>reapting-linear-gradient<br>linear-gradient的扩展</p><p><strong>利用linear-gradient实现网格</strong></p><p><style>.linear-gradient {margin: 10px;width: 100px;height: 100px;background: white;background-image: linear-gradient(90deg, rgba(200,0,0,.5) 50%,transparent 0), linear-gradient( rgba(200,0,0,.5) 50%, transparent 0);background-size: 30px 30px;}</style></p><div class="linear-gradient"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;linear-gradient&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.linear-gradient &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: white;</span><br><span class="line">  background-image: linear-gradient(90deg, rgba(200,0,0,.5) 50%, transparent 0), linear-gradient( rgba(200,0,0,.5) 50%, transparent 0);</span><br><span class="line">  background-size: 30px 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p>自适应的椭圆(元素为正方形时展示圆形)<br>border-radius: 50% / 50%;可简写为border-radius: 50%;</p><p><style>.circle {display: inline-block;margin: 10px;width: 50px;height: 50px;border-radius: 50%;background: blue;}.circle2 {width: 100px;}</style></p><div class="circle"></div><div class="circle circle2"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;circle circle2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.circle &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line">.circle2 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>切角效果</strong></p><p><style>.corner-cutting{display: inline-block;margin: 10px;width:100px; height: 100px;line-height: 100px;background: linear-gradient(135deg, transparent 15px, #58a 0) top left, linear-gradient(-135deg, transparent 15px, #58a 0) top right, linear-gradient(-45deg, transparent 15px, #58a 0) bottom right,linear-gradient(45deg, transparent 15px, #58a 0) bottom left;background-size: 50% 50%;background-repeat: no-repeat;text-align: center;}.clip-path{clip-path:polygon(20px 0, calc(100% - 20px) 0, 100% 20px,100% calc(100% - 20px), calc(100% - 20px) 100%,20px 100%, 0 calc(100% - 20px), 0 20px);}</style></p><div class="corner-cutting">background</div>    <div class="corner-cutting clip-path">clip-path</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.corner-cutting &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: linear-gradient(135deg, transparent 15px, #58a 0) top left, </span><br><span class="line">    linear-gradient(-135deg, transparent 15px, #58a 0) top right, </span><br><span class="line">    linear-gradient(-45deg, transparent 15px, #58a 0) bottom right,</span><br><span class="line">    linear-gradient(45deg, transparent 15px, #58a 0) bottom left;</span><br><span class="line">  background-size: 50% 50%;</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 或者使用clip-path</span><br><span class="line">clip-path:polygon(20px 0, calc(100% - 20px) 0, 100% 20px,100% calc(100% - 20px), calc(100% - 20px) 100%,20px 100%, 0 calc(100% - 20px), 0 20px);</span><br></pre></td></tr></table></figure><p><strong>制作单边倾斜的梯形</strong></p><p><style>.trapezoid {margin: 10px;width: 50px;height: 50px;background: blue;transform: perspective(.5em) rotateX(5deg);transform-origin: bottom left;}</style></p><div class="trapezoid"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;trapezoid&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.trapezoid &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  transform: perspective(.5em) rotateX(5deg);</span><br><span class="line">  transform-origin: bottom left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>投影</strong></p><p><style>.box-shadow {width: 50px;height: 50px;line-height: 50px;}.box-shadow1 {box-shadow: 0 5px 4px -4px black;}.box-shadow2 {box-shadow: 3px 3px 6px -3px black;}.box-shadow3 {box-shadow: 5px 0 5px -5px black, -5px 0 5px -5px black;}</style></p><div class="box-shadow box-shadow1">单边投影</div><div class="box-shadow box-shadow2">邻边投影</div><div class="box-shadow box-shadow3">两侧投影</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-shadow box-shadow1&quot;&gt;单边投影&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box-shadow box-shadow2&quot;&gt;邻边投影&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box-shadow box-shadow3&quot;&gt;两侧投影&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.box-shadow &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">// 单边投影</span><br><span class="line">.box-shadow1 &#123;</span><br><span class="line">  box-shadow: 0 5px 4px -4px black;</span><br><span class="line">&#125;</span><br><span class="line">// 邻边投影</span><br><span class="line">.box-shadow2 &#123;</span><br><span class="line">  box-shadow: 3px 3px 6px -3px black;</span><br><span class="line">&#125;</span><br><span class="line">// 两侧投影</span><br><span class="line">.box-shadow3 &#123;</span><br><span class="line">  box-shadow: 5px 0 5px -5px black, -5px 0 5px -5px black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>滤镜</strong></p><p><style>.filter {display: inline-block;margin: 10px;width: 50px;height: 50px;background: blue;}.filter-blur {filter: blur(5px);}.filter-grayscale {filter: grayscale();}.filter-drop-shadow {filter: drop-shadow(3px 3px 6px black)}</style></p><div class="filter filter-blur"></div><div class="filter filter-grayscale"></div><div class="filter filter-drop-shadow"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;filter&quot;&gt;&lt;/div&gt;</span><br><span class="line">.filter-blur &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line">.filter-blur &#123;</span><br><span class="line">  filter: blur(5px);</span><br><span class="line">&#125;</span><br><span class="line">.filter-grayscale &#123;</span><br><span class="line">  filter: grayscale();</span><br><span class="line">&#125;</span><br><span class="line">.filter-drop-shadow &#123;</span><br><span class="line">  filter: drop-shadow(3px 3px 6px black)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter: blur(5px) grayscale() drop-shadow(3px 3px 6px black)</span><br><span class="line">blur 元素模糊</span><br><span class="line">drop-shadow 类似于box-shadow</span><br></pre></td></tr></table></figure><p><strong>设置缩进</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tab-size: 2;</span><br></pre></td></tr></table></figure></p><p><strong>空心字效果</strong></p><p><style>.hollow-text {display: inline-block;margin-right: 10px;text-shadow: 1px 1px black, -1px -1px black, 1px -1px black, -1px 1px black;}.hollow-text2 {text-shadow: 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black;}</style></p><div class="hollow-text">空心字</div><div class="hollow-text hollow-text2">空心字</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;hollow-text&quot;&gt;空心字&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;hollow-text hollow-text2&quot;&gt;空心字&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.hollow-text &#123;</span><br><span class="line">  text-shadow: 1px 1px black, -1px -1px black, 1px -1px black, -1px 1px black;</span><br><span class="line">&#125;</span><br><span class="line">.hollow-text2 &#123;</span><br><span class="line">  text-shadow: 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用text-shadow实现文字模糊效果</strong></p><p><style>.filter-text {color: black;text-shadow: 0 0 .1em black, 0 0 .3em black;}</style></p><div class="filter-text">文字模糊</div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;filter-text&quot;&gt;文字模糊&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.filter-text &#123;</span><br><span class="line">  color: black;</span><br><span class="line">  text-shadow: 0 0 .1em black, 0 0 .3em black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用svg实现环形文字效果</strong></p><p><style>.circular{width: 50px;}</style></p><div class="circular"><svg viewbox="0 0 100 100"><path d="M 0,50 a 50,50 0 1,1 0,1 z" id="circle"/><text><textpath xlink:href="#circle">circular reasoning works because</textpath></text></svg></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;circular&quot;&gt;</span><br><span class="line">  &lt;svg viewBox=&quot;0 0 100 100&quot;&gt;</span><br><span class="line">  &lt;path d=&quot;M 0,50 a 50,50 0 1,1 0,1 z&quot; id=&quot;circle&quot; /&gt;</span><br><span class="line">  &lt;text&gt;</span><br><span class="line">    &lt;textPath xlink:href=&quot;#circle&quot;&gt;circular reasoning works because&lt;/textPath&gt;</span><br><span class="line">  &lt;/text&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><ul><li>使用合适的cursor</li><li>增大可点击范围<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border: 10px solid transparent;</span><br><span class="line">background-clip: padding-box;</span><br><span class="line">需要边框时增加box-shadow: 0 0 0 1px rgba(0,0,0,.3) inset;</span><br></pre></td></tr></table></figure></li></ul><p><strong>水平居中</strong><br>行内元素：对其父元素设置text-align:center;<br>块级元素：对其自身设置margin:0 auto;</p><p><strong>实现水平垂直居中</strong></p><ol><li>通过position定位<br><style>.position-container {position: relative;margin: 10px;width: 50px;height: 50px;background: red;}.position {position: absolute;top: 50%;left: 50%;width: 30px;height: 30px;background: blue;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);}</style><div class="position-container"><div class="position"></div></div></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;position-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;position&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.position-container &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">.position &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 30px;</span><br><span class="line">  background: blue;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">margin: 50% auto 0;transform: translateY(-50%);(只适用于全屏居中)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用flex<br><style>.flex-container {display: flex;margin: 10px;width: 50px;height: 50px;background: red;}.margin-item {margin: auto;width: 30px;height: 30px;background: blue;}.flex-container2 {justify-content: center;align-items: center;}.flex-item {width: 30px;height: 30px;background: blue;}</style><div>margin</div><div class="flex-container"><div class="margin-item"></div></div><div>flex</div><div class="flex-container flex-container2"><div class="flex-item"></div></div></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 使用margin</span><br><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;margin-item&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.flex-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">.margin-item &#123;</span><br><span class="line">  margin: auto;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 30px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用伸缩盒属性</span><br><span class="line">.flex-container2 &#123;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.flex-item &#123;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 30px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小球回弹动画</strong><br><style>@keyframes bounce {60%, 80%, to {transform: translateX(400px);animation-timing-function: ease;}70% { transform: translateX(300px); }90% { transform: translateX(360px); }}.ball {margin: 10px;width: 50px;height: 50px;background: blue;animation: bounce 3s cubic-bezier(.1,.25,1,.25) infinite;animation-direction: alternate;}</style></p><div class="ball"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;ball&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">@keyframes bounce &#123;</span><br><span class="line">  60%, 80%, to &#123;</span><br><span class="line">    transform: translateX(400px);</span><br><span class="line">    animation-timing-function: ease;</span><br><span class="line">  &#125;</span><br><span class="line">  70% &#123; transform: translateX(300px); &#125;</span><br><span class="line">  90% &#123; transform: translateX(360px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">.ball &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  animation: bounce 3s cubic-bezier(.1,.25,1,.25) infinite;</span><br><span class="line">  animation-direction: alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用steps对png背景做切换</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation: loader 1s infinite steps(8);</span><br><span class="line">@keyframes loader &#123;to &#123; background-position: -800px 0; &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>实现闪烁效果</strong><br><style>@keyframes twinkle {0% {backgroud: blue;}100% {background: transparent;}}.twinkle {margin: 10px;width: 50px;height: 50px;background: blue;animation: twinkle .5s linear infinite alternate;}</style></p><div class="twinkle"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;twinkle&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">@keyframes twinkle &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    backgroud: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.twinkle &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  animation: twinkle .5s linear infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>背景图片来回播放</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@keyframes panoramic &#123;to &#123; background-position: 100% 0; &#125;&#125;</span><br><span class="line">.panoramic &#123;</span><br><span class="line">  width: 150px; height: 150px;</span><br><span class="line">  background: url(&quot;img/naxos-greece.jpg&quot;);</span><br><span class="line">  background-size: auto 100%;</span><br><span class="line">  animation: panoramic 10s linear infinite alternate;</span><br><span class="line">  animation-play-state: paused;</span><br><span class="line">&#125;</span><br><span class="line">.panoramic:hover, .panoramic:focus &#123;</span><br><span class="line">  animation-play-state: running;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>利用translate实现transform-origin的效果</strong></p><p><style>.transform-container {margin: 50px;}.transform {width: 50px;height: 50px;background: blue;transform: rotate(30deg);transform-origin: 50px 100px;}.transform2 {transform: translate(50px, 100px) rotate(30deg) translate(-50px, -100px);transform-origin: 0 0;}</style></p><div class="transform-container"><div class="transform"></div><div class="transform transform2"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;transform-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;transform&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;transform2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.transform-container &#123;</span><br><span class="line">  margin: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.transform &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: blue;</span><br><span class="line">  transform: rotate(30deg);</span><br><span class="line">  transform-origin: 50px 100px;</span><br><span class="line">&#125;</span><br><span class="line">// 效果同上</span><br><span class="line">.transform2 &#123;</span><br><span class="line">  transform: translate(50px, 100px) rotate(30deg) translate(-50px, -100px);</span><br><span class="line">  transform-origin: 0 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;边框&quot;&gt;&lt;a href=&quot;#边框&quot; class=&quot;headerlink&quot; title=&quot;边框&quot;&gt;&lt;/a&gt;边框&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;使用box-shadow制作假边框，第四个值为增大或者减小投影面积(box-shadow范围内不会触发事件)&lt;/strong
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>日常小记-样式</title>
    <link href="https://tragiclife.github.io/front-end/css/daily-notes/"/>
    <id>https://tragiclife.github.io/front-end/css/daily-notes/</id>
    <published>2018-12-09T00:12:08.000Z</published>
    <updated>2019-01-12T15:54:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>BEM(block element modifier)</p><p><strong>常用的屏幕大小</strong><br>手机屏：&lt;768<br>pad屏：≥768<br>显示器：≥992<br>大屏显示器：≥1200</p><p><strong>禁止文本选中</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user-select:none</span><br></pre></td></tr></table></figure></p><p><strong>链接的伪类</strong></p><ul><li>:link  // 初始</li><li>:visited  // 访问后</li><li>:hover  // 鼠标悬停时</li><li>:active  // 点击时</li></ul><p><strong>浮动问题</strong><br>子元素都为float，则父元素需要设置float才能被撑开</p><p><strong>background属性的设置顺序</strong><br><code>bsckground:url() repeat attachment position/size origin clip</code></p><p><strong>制作梯形</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: perspective(20px) rotateX(-1deg ) rotateY(-2deg) translateZ(0)</span><br></pre></td></tr></table></figure></p><p><strong>实现模糊效果(支持IOS)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backdrop-filter:blur(10px);</span><br></pre></td></tr></table></figure></p><p>matrix(a,b,c,d,e,f)</p><ul><li>e和f相当于translate</li><li>a和d相当于scale</li><li>b和c相当于rotate</li></ul><p><strong>使滚动变流畅</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-overflow-scrolling: touch;</span><br></pre></td></tr></table></figure></p><p><strong>-webkit-overflow-scrolling产生的问题</strong></p><ul><li>滚动中scrollTop不会变化、不触发scroll事件，只在停下来的时候触发</li><li>手势可穿过其它元素触发元素滚动</li><li>滚动时暂停其它transition</li><li>有时会卡住不动，浏览器容器回弹停止后才可滑动</li></ul><p><strong>文本渐变</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">h2[data-text] &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">h2[data-text]::after &#123;</span><br><span class="line">  content: attr(data-text);</span><br><span class="line">  z-index: 10;</span><br><span class="line">  color: #e3e3e3;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  -webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,0)), color-stop(50%, rgba(0,0,0,1)), to(rgba(0,0,0,0)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>黑白图片</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">  filter: grayscale(100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>优化文本显示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text &#123;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  text-rendering: optimizeLegibility;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>文本模糊</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text&#123;</span><br><span class="line">  text-shadow: 0 0 5px rgba(0, 0, 0, .5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>表格单元格等宽</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.table &#123;</span><br><span class="line">  table-layout: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>多行省略号</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 2; // 显示的行数</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure></p><p><strong>伸缩盒</strong><br>子元素的宽度没有超过父元素宽度或没有设置flex-wrap: wrap时，align-content不生效</p><p><strong>GPU硬件加速</strong><br>1、设置will-change:transform进行硬件加速，还需要设置trsnsform:translateZ(0)进行hack<br>2、transform: translate3d(0, 0, 0)</p><p><strong>避免隐式合成</strong><br>保持动画的对象的z-index尽可能的高。理想的，这些元素应该是body元素的直接子元素。当然，这不是总可能的。所以你可以克隆一个元素，把它放在body元素下仅仅是为了做动画。<br>将元素上设置will-change CSS属性，元素上有了这个属性，浏览器会提升这个元素成为一个复合层（不是总是）。这样动画就可以平滑的开始和结束。但是不要滥用这个属性，否则会大大增加内存消耗。</p><p><strong>动画优化</strong></p><ul><li>减少浏览器的重排和重绘的发生。</li><li>不要使用table布局。</li><li>css动画中尽量只使用transform和opacity，这不会发生重排和重绘。</li><li>尽可能地只使用css做动画。</li><li>避免浏览器的隐式合成。</li><li>改变复合层的尺寸。(使用小图片，通过scale放大)</li></ul><p><strong>使用锚点切换时平滑滚动</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scroll-behavior: smooth</span><br></pre></td></tr></table></figure></p><p><strong>实现左右300px，中间自适应布局</strong><br>1、float(优：兼容性好；缺：需要清除浮动)<br>2、position:absolute(优：布局快；缺：兄弟元素都需要脱离文档流处理，可使用性差)<br>3、flex(比较完美)<br>4、table、table-cell(易处理；其中一个单元格高度增长时，其余也会跟着增长)<br>5、grid</p><p><strong>background的设置顺序</strong><br>background:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;</p><p><strong>:last-child</strong><br>匹配父元素的最后一个元素</p><p><strong>position:fixed宽高受父级元素影响问题</strong><br>如果父级元素使用了transform，则其position为fixed的子元素设置的宽高受父元素影响</p><p><strong>touch-action</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">开发者文档</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2018/07/chrome-safari-touchmove-preventdefault-treated-as-passive/" target="_blank" rel="noopener">张鑫旭的博客</a></li></ul><p><strong>移动端设置cursor: pointer时，点击元素会有背景色</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  -webkit-tap-highlight-color: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>图片上下排列3px间隔的消除方法</strong></p><ul><li>给居上的图片加vertical-align: top</li><li>给居上的图片加display: block</li><li>设置font-size: 0</li></ul><p><strong>position</strong></p><ul><li>static不拖出文档流</li><li>relative不拖出文档流</li><li>absolute拖出文档流</li><li>fixed拖出文档流</li></ul><p><strong>display和visibility</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">display: none; // 隐藏DOM，不占据空间</span><br><span class="line">visibility: hidden; // 隐藏DOM，占据空间</span><br></pre></td></tr></table></figure></p><p><strong>GPU硬件加速</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 设置will-change: transform，还需要设置transform: translateZ(0)进行hack</span><br><span class="line">2. transform: traslate3d(0, 0, 0)</span><br></pre></td></tr></table></figure></p><p><strong>硬件加速优化</strong></p><ul><li>设置动画元素的z-index高于其他元素</li><li>使用3D硬件加速提升动画性能时，最好给元素增加一个z-index属性，人为干扰复合层的排序，可以有效减少chrome创建不必要的复合层，提升渲染性能，移动端优化效果尤为明显</li></ul><p><strong>元素容器宽度固定，当元素超出容器时整个元素换行处理</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;123&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;123&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">方法一</span><br><span class="line">.item &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line">.container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>实现半圆阴影</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.half_circle &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: -.25rem;</span><br><span class="line">  z-index: 1;</span><br><span class="line">  width: .2rem;</span><br><span class="line">  height: .2rem;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  transform: translate(0, -50%);</span><br><span class="line">  /*background: radial-gradient(circle, #fbfbfb 10px, #fff);*/</span><br><span class="line">  box-shadow: inset 0 0 10px 0 rgba(0, 0, 0, .1);</span><br><span class="line">  &amp;:before &#123;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    z-index: 3;</span><br><span class="line">    width: .1rem;</span><br><span class="line">    height: .2rem;</span><br><span class="line">    background: linear-gradient(to left, rgb(250, 250, 250), #fff);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>浏览器html默认字体大小为16px，设置font-size为62.5%后可换算为10px</li><li>只有块级元素或者行内块元素transform属性才回生效</li><li>display:inline-block的元素可以通过vertical-align:middle实现居中</li><li>50vh表示50%的设备高度，50vw表示50%的设备宽度</li><li>word-break：break-all;设置后火狐下的文字会比较对齐</li><li>文字要超过一行text-align:justify才会生效</li><li>resize属性可以设置文本框的拖动，其overflow需要设置为overflow/auto/scroll</li><li>ie浏览器的option标签不可改变样式、不触发事件(由select触发)</li><li>伪对象after和before相当于内联元素</li><li>使用inline-block边距会多出4个像素，可通过font-size:0去除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h2&gt;&lt;p&gt;BEM(block element modifier)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用的屏幕大小&lt;/strong&gt;&lt;br
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>屏幕适配</title>
    <link href="https://tragiclife.github.io/front-end/css/screen-adaptation/"/>
    <id>https://tragiclife.github.io/front-end/css/screen-adaptation/</id>
    <published>2018-12-08T00:34:18.000Z</published>
    <updated>2019-01-01T15:43:41.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见移动web适配方法"><a href="#常见移动web适配方法" class="headerlink" title="常见移动web适配方法"></a>常见移动web适配方法</h2><h3 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h3><ul><li>960px/1000px居中</li><li>盒子模型，定高，定宽</li><li>display:inline-block</li></ul><h3 id="移动web"><a href="#移动web" class="headerlink" title="移动web:"></a>移动web:</h3><ul><li>定高，宽度百分比</li><li>flex</li><li>Media Query(媒体查询)</li></ul><h2 id="Media-Query"><a href="#Media-Query" class="headerlink" title="Media Query"></a>Media Query</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@media 媒体类型 and (媒体特性)</span><br><span class="line">如: @media screen and (max-width:320px)</span><br><span class="line">可在标签上引用</span><br><span class="line">&lt;link href=&quot;&quot; media=&quot;screen and (max-width:320px)&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="rem原理和简介"><a href="#rem原理和简介" class="headerlink" title="rem原理和简介"></a>rem原理和简介</h2><ol><li>字体单位</li><li>值根据html根元素大小而定，同样可以作为宽度、高度等单位</li></ol><h3 id="适配原理"><a href="#适配原理" class="headerlink" title="适配原理"></a>适配原理</h3><p>将px替换成rem，动态修改html的font-size适配</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>IOS6以上、Android2.1以上</p><h2 id="js动态修改font-size"><a href="#js动态修改font-size" class="headerlink" title="js动态修改font-size"></a>js动态修改font-size</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(function computedWidth()&#123;</span><br><span class="line">  let htmlWidth = document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class="line">  let $html = document.querySelector(&apos;html&apos;);</span><br><span class="line">  $html.style.fontSize = htmWidth / 3.75 + &apos;px&apos;; // iPhone6的手机尺寸</span><br><span class="line"></span><br><span class="line">  //屏幕宽度变化时</span><br><span class="line">  window.addEventListener(&apos;resize&apos;, computedWidth);</span><br><span class="line">  //横竖屏切换时</span><br><span class="line">  window.addEventListener(&apos;orientationchange&apos;, computedWidth);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常见移动web适配方法&quot;&gt;&lt;a href=&quot;#常见移动web适配方法&quot; class=&quot;headerlink&quot; title=&quot;常见移动web适配方法&quot;&gt;&lt;/a&gt;常见移动web适配方法&lt;/h2&gt;&lt;h3 id=&quot;PC&quot;&gt;&lt;a href=&quot;#PC&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
      <category term="rem" scheme="https://tragiclife.github.io/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>深入overflow</title>
    <link href="https://tragiclife.github.io/front-end/css/deep-into-overflow/"/>
    <id>https://tragiclife.github.io/front-end/css/deep-into-overflow/</id>
    <published>2018-12-07T22:28:51.000Z</published>
    <updated>2019-01-01T15:35:27.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><ol><li>overfloe-x、overflow-y(IE8+)<br>如果overflow-x与overflow-y相同，则等同于overflow；如果两个设置不同，切其中一个设置为visible则visible会被重置为auto</li><li>表格元素无效，需要先设置table-layout:fixed</li><li>overflow:auto时，chrome下能显示padding-bottom，而其他浏览器都不显示padding-bottom</li></ol><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>清除浮动影响<code>overflow:hidden;_zoom:1</code>;</li><li>避免margin穿透问题</li><li>两栏自适应布局</li></ol><h2 id="BFC属性"><a href="#BFC属性" class="headerlink" title="BFC属性"></a>BFC属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 自适应，但溢出不可见，限制了应用场景</span><br><span class="line">overflow:hidden</span><br><span class="line"></span><br><span class="line">// 包裹性+破坏性，无法自适应，块状浮动布局</span><br><span class="line">float+float</span><br><span class="line"></span><br><span class="line">position:absolute  </span><br><span class="line"></span><br><span class="line">// 包裹性，无法自适应，IE6、7不识别</span><br><span class="line">display:inline-block</span><br><span class="line"></span><br><span class="line">// 包裹性，无溢出特性，绝对宽度也能自适应</span><br><span class="line">display:table-cell</span><br></pre></td></tr></table></figure><h2 id="文字溢出出省略号"><a href="#文字溢出出省略号" class="headerlink" title="文字溢出出省略号"></a>文字溢出出省略号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 单行省略</span><br><span class="line">width:100px;</span><br><span class="line">white-space:nowrap;</span><br><span class="line">text-overflow:ellipisis;</span><br><span class="line">overflow:hidden;</span><br><span class="line"></span><br><span class="line">// 多行省略号</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 2; // 显示的行数</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>无论什么浏览器，默认滚动条都来自html标签，而不是body标签</li><li>滚动条的宽度等于外部容器减去内部元素的clientWidth</li></ul><h3 id="获取滚动高度"><a href="#获取滚动高度" class="headerlink" title="获取滚动高度"></a>获取滚动高度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chrome:document.body.scrollTop</span><br><span class="line">其他浏览器:document.documentElement.scrollTop</span><br></pre></td></tr></table></figure><h3 id="出现滚动条时，修复水平居中的元素跳动问题"><a href="#出现滚动条时，修复水平居中的元素跳动问题" class="headerlink" title="出现滚动条时，修复水平居中的元素跳动问题"></a>出现滚动条时，修复水平居中的元素跳动问题</h3><ol><li>设置<code>html{overflow-y:scroll}</code></li><li><code>container{padding-left:calc(100vw - 100%)}</code>，既设置滚动条的宽度，适用于IE9+及其他浏览器</li></ol><h3 id="块级格式化上下文"><a href="#块级格式化上下文" class="headerlink" title="块级格式化上下文"></a>块级格式化上下文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow:auto/scroll/hidden</span><br></pre></td></tr></table></figure><h3 id="元素包裹问题"><a href="#元素包裹问题" class="headerlink" title="元素包裹问题"></a>元素包裹问题</h3><p>元素的父元素没有设置position:absolute/relative/fixed时，父元素的overflow无法包裹住position:absolute的子元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="overflow失效妙用"><a href="#overflow失效妙用" class="headerlink" title="overflow失效妙用"></a>overflow失效妙用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 父元素</span><br><span class="line">height:0;</span><br><span class="line">overflow:hidden;</span><br><span class="line">text-align:right;</span><br><span class="line">// 子元素</span><br><span class="line">position:absolute</span><br></pre></td></tr></table></figure><h3 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h3><ul><li>锚点定位的触发</li><li>url地址中的锚链与锚点元素</li><li>可focus的锚点元素处于focus态</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关问题&quot;&gt;&lt;a href=&quot;#相关问题&quot; class=&quot;headerlink&quot; title=&quot;相关问题&quot;&gt;&lt;/a&gt;相关问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;overfloe-x、overflow-y(IE8+)&lt;br&gt;如果overflow-x与overflow-y相同
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入float</title>
    <link href="https://tragiclife.github.io/front-end/css/deep-into-float/"/>
    <id>https://tragiclife.github.io/front-end/css/deep-into-float/</id>
    <published>2018-12-06T21:39:30.000Z</published>
    <updated>2019-01-01T14:57:31.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置初衷"><a href="#设置初衷" class="headerlink" title="设置初衷"></a>设置初衷</h2><p>为了文字的环绕<br>float元素会产生BFC(块级格式化上下文，block formatting context)</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="包裹具有包裹性的相关属性"><a href="#包裹具有包裹性的相关属性" class="headerlink" title="包裹具有包裹性的相关属性"></a>包裹具有包裹性的相关属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display:inline-block/table-cell</span><br><span class="line">position:absolute/fixed/sticky</span><br><span class="line">overflow:hidden/scroll</span><br></pre></td></tr></table></figure><h3 id="破坏-父元素塌陷"><a href="#破坏-父元素塌陷" class="headerlink" title="破坏(父元素塌陷)"></a>破坏(父元素塌陷)</h3><p>具有破坏性的相关属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">display:none</span><br><span class="line">position:absolute/fixed/sticky</span><br></pre></td></tr></table></figure></p><h2 id="能形成BFC的样式"><a href="#能形成BFC的样式" class="headerlink" title="能形成BFC的样式"></a>能形成BFC的样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">float:left/right</span><br><span class="line">position:absolute/fixed</span><br><span class="line">overflow:hidden/scroll(IE7+)</span><br><span class="line">display:inline-block/table-cell(IE8+)</span><br><span class="line">width/height/zoom:1...(IE6/IE7)</span><br></pre></td></tr></table></figure><h2 id="清除浮动-较佳使用"><a href="#清除浮动-较佳使用" class="headerlink" title="清除浮动(较佳使用)"></a>清除浮动(较佳使用)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after&#123;</span><br><span class="line">  content:&apos;&apos;;</span><br><span class="line">  display:table;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clesrfix&#123;</span><br><span class="line">  *zoom:1;  //IE6、7</span><br><span class="line">&#125;</span><br><span class="line">应用于包含浮动元素的父元素上</span><br></pre></td></tr></table></figure><h3 id="浮动与两侧皆适应的流体布局"><a href="#浮动与两侧皆适应的流体布局" class="headerlink" title="浮动与两侧皆适应的流体布局"></a>浮动与两侧皆适应的流体布局</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">display:table-cell;</span><br><span class="line">*display:inline-block;</span><br><span class="line">width:2000px;</span><br><span class="line">*width:auto</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设置初衷&quot;&gt;&lt;a href=&quot;#设置初衷&quot; class=&quot;headerlink&quot; title=&quot;设置初衷&quot;&gt;&lt;/a&gt;设置初衷&lt;/h2&gt;&lt;p&gt;为了文字的环绕&lt;br&gt;float元素会产生BFC(块级格式化上下文，block formatting context)&lt;/p
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入border</title>
    <link href="https://tragiclife.github.io/front-end/css/deep-into-border/"/>
    <id>https://tragiclife.github.io/front-end/css/deep-into-border/</id>
    <published>2018-12-05T23:16:00.000Z</published>
    <updated>2019-01-01T15:28:48.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>border-style为dashed时，不同浏览器下实线和空白区域的比例不同</li><li>border-style为dotted时，形状不同</li><li>当border-color没有指定颜色时，默认使用color作为边框颜色，类似的还有box-shadow,text-shadow,outline</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="让背景图固定距离右侧50px"><a href="#让背景图固定距离右侧50px" class="headerlink" title="让背景图固定距离右侧50px"></a>让背景图固定距离右侧50px</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border-right:50px solid transparent;</span><br><span class="line">background-position:100% 40px ;</span><br></pre></td></tr></table></figure><h3 id="实现三角形"><a href="#实现三角形" class="headerlink" title="实现三角形"></a>实现三角形</h3><p><style>.triangle {margin-bottom: 10px;width: 0;height: 0;border: 25px solid transparent;border-bottom-color: blue;}</style></p><div class="triangle"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;triangle&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.triangle &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border: 25px solid transparent;</span><br><span class="line">  border-bottom-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现梯形"><a href="#实现梯形" class="headerlink" title="实现梯形"></a>实现梯形</h3><p><style>.trapezoid {margin-bottom: 10px;width: 70px;height: 0;border: 25px solid transparent;border-bottom-color: blue;}</style></p><div class="trapezoid"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;trapezoid&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.trapezoid &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border: 25px solid transparent;</span><br><span class="line">  border-bottom-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;border-style为dashed时，不同浏览器下实线和空白区域的比例不同&lt;/li&gt;
&lt;li&gt;border-style为do
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入padding</title>
    <link href="https://tragiclife.github.io/front-end/css/deep-into-padding/"/>
    <id>https://tragiclife.github.io/front-end/css/deep-into-padding/</id>
    <published>2018-12-04T21:37:28.000Z</published>
    <updated>2019-01-25T16:11:47.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="padding是否生效"><a href="#padding是否生效" class="headerlink" title="padding是否生效"></a>padding是否生效</h2><h3 id="对于block水平元素"><a href="#对于block水平元素" class="headerlink" title="对于block水平元素"></a>对于block水平元素</h3><ol><li>padding值过大，一定会影响尺寸</li><li>width非auto，padding一定影响尺寸</li><li>width为auto或box-sizing为border-box，同时padding值没有过大，不影响尺寸</li></ol><h3 id="对于inline水平元素"><a href="#对于inline水平元素" class="headerlink" title="对于inline水平元素"></a>对于inline水平元素</h3><p>水平padding影响尺寸，垂直padding不影响尺寸，但是会影响背景色(占据空间)</p><h2 id="支持的属性值"><a href="#支持的属性值" class="headerlink" title="支持的属性值"></a>支持的属性值</h2><ol><li>不支持负值</li><li>百分比根据宽度计算(如果设置50%则为一个正方形)</li><li>inline元素的padding：同样相对于宽度计算，默认的宽度高度细节有差异，padding会断行</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="实现border与内容区域之间空白的效果"><a href="#实现border与内容区域之间空白的效果" class="headerlink" title="实现border与内容区域之间空白的效果"></a>实现border与内容区域之间空白的效果</h3><p><style>.clip-container {margin: 10px;padding: 10px;width: 50px;height: 50px;border: 10px solid red;background-color: blue;background-clip: content-box;}</style></p><div class="clip-container"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;clip-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 利用background-clip实现</span><br><span class="line">.clip-container &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border: 10px solid red;</span><br><span class="line">  background-color: blue;</span><br><span class="line">  background-clip: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何得到一个正方形"><a href="#如何得到一个正方形" class="headerlink" title="如何得到一个正方形"></a>如何得到一个正方形</h3><p><style>.square-container{margin: 10px;width: 50px;height: 50px;}.square {width: 100%;padding-top: 100%;background-color: blue;}</style></p><div class="square-container"><div class="square"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;square-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;square&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.square-container&#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.square &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  padding-top: 100%;</span><br><span class="line">  background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>inline元素的垂直padding会让让空白节点显现，既规范中的strut，可以通过font-size:0去除</li><li>ol/ul标签内置padding-left是以px为单位的，如果字号很小，间距就会很开；如果字号很大，就会跑到容器外面</li><li>在firefox下设置button的padding为0时依然有padding值，通过设置<code>button::-moz-focus-inner{padding:0}</code>。</li><li>IE7下文字越多，button的padding值越大，通过设置<code>button{overflow:visiable;}</code>去除。</li><li>可访问性隐藏：将元素设置absolute，定位到看不见的地方，或者设置<code>z-index:-1</code>隐藏在背景之下。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;padding是否生效&quot;&gt;&lt;a href=&quot;#padding是否生效&quot; class=&quot;headerlink&quot; title=&quot;padding是否生效&quot;&gt;&lt;/a&gt;padding是否生效&lt;/h2&gt;&lt;h3 id=&quot;对于block水平元素&quot;&gt;&lt;a href=&quot;#对于bloc
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入margin</title>
    <link href="https://tragiclife.github.io/front-end/css/deep-into-margin/"/>
    <id>https://tragiclife.github.io/front-end/css/deep-into-margin/</id>
    <published>2018-12-03T22:42:01.000Z</published>
    <updated>2019-01-01T15:09:01.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是margin"><a href="#什么是margin" class="headerlink" title="什么是margin"></a>什么是margin</h2><p>设置元素的外边距，允许使用负值，适用于没有设置宽高的普通block元素，既非float、absolute/fixed、inline、table-cell元素。</p><h2 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 设置一个值，相当于四个方向的外边距都为10px</span><br><span class="line">margin: 10px;</span><br><span class="line"></span><br><span class="line">// 设置两个值，相当于设置上下、左右的外边距，即上下为10px，左右为5px</span><br><span class="line">margin: 10px 5px;</span><br><span class="line"></span><br><span class="line">// 设置三个值，相当于设置上、左右、下的外边距，即上为10px，左右为5px，下为1px</span><br><span class="line">margin: 10px 5px 1px;</span><br><span class="line"></span><br><span class="line">// 设置四个值，相当于设置上、右、下、左的外边距，即上为10px，右为5px，下为2px，左为1px</span><br><span class="line">margin: 10px 5px 2px 1px;</span><br></pre></td></tr></table></figure><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>可以改变元素尺寸</li><li>适用于没有设置宽高的普通block元素，既非float、absolute/fixed、inline、table-cell元素。</li></ul><h2 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h2><p>普通元素的百分比margin都是<code>相对于容器</code>的宽度计算的<br>绝对定位元素的百分比margin是相对于第一个定位祖先元素（relative、absolute、fixed）的宽度计算的。</p><h2 id="margin重叠"><a href="#margin重叠" class="headerlink" title="margin重叠"></a>margin重叠</h2><p>margin重叠特性只对<code>block元素</code>(除float和absolute)起作用，只发生在垂直方向上(writing-mode设置可变为水平方向)</p><h2 id="重叠的三种情景"><a href="#重叠的三种情景" class="headerlink" title="重叠的三种情景"></a>重叠的三种情景</h2><ol><li>相邻的兄弟元素</li><li>父级元素和第一个或最后一个子元素</li><li>空的block元素正正取大值，正负值相加，负负最负值</li></ol><h2 id="实现水平垂直居中"><a href="#实现水平垂直居中" class="headerlink" title="实现水平垂直居中"></a>实现水平垂直居中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 元素宽高固定</span><br><span class="line">position:absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">margin-top: -50px;</span><br><span class="line">margin-left: -100px;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 200px;</span><br></pre></td></tr></table></figure><h2 id="负值的应用场景"><a href="#负值的应用场景" class="headerlink" title="负值的应用场景"></a>负值的应用场景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// margin负值下的两端对齐</span><br><span class="line">ul &#123;</span><br><span class="line">  margin-right:-20px;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  margin-right:20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// margin负值下的等高布局</span><br><span class="line">div &#123;</span><br><span class="line">  margin-bottom:-600px;</span><br><span class="line">  padding-bottom:600px;</span><br><span class="line">&#125;</span><br><span class="line">// margin负值下的两栏自适应布局</span><br></pre></td></tr></table></figure><h2 id="margin失效情形"><a href="#margin失效情形" class="headerlink" title="margin失效情形"></a>margin失效情形</h2><ol><li>inline水平元素的垂直margin无效</li><li>margin重叠</li><li>display:table-cell等</li><li>position:absolute;当其父元素设置为relative时会生效</li><li>前一个元素float以后，后一个元素的margin-left要大于前一个元素的宽度时才会生效</li><li>内联特性导致无效</li></ol><h2 id="新属性值"><a href="#新属性值" class="headerlink" title="新属性值"></a>新属性值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// (一开始相当于margin-left):文档流开始的方向left</span><br><span class="line">margin-start</span><br><span class="line"></span><br><span class="line">// 相当于margin-top</span><br><span class="line">margin-before</span><br><span class="line"></span><br><span class="line">// 相当于margin-bottom</span><br><span class="line">margin-after</span><br><span class="line"></span><br><span class="line">// 重叠效果</span><br><span class="line">margin-collapse</span><br><span class="line">可选值：collapse(默认重叠) | discard(取消margin效果) | separate(不重叠)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是margin&quot;&gt;&lt;a href=&quot;#什么是margin&quot; class=&quot;headerlink&quot; title=&quot;什么是margin&quot;&gt;&lt;/a&gt;什么是margin&lt;/h2&gt;&lt;p&gt;设置元素的外边距，允许使用负值，适用于没有设置宽高的普通block元素，既非floa
      
    
    </summary>
    
    
      <category term="css" scheme="https://tragiclife.github.io/tags/css/"/>
    
  </entry>
  
</feed>
